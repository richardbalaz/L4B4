
L4B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001156  000011ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00803e04  00803e04  000011ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040e1  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022eb  00000000  00000000  00005585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000179d  00000000  00000000  00007870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00009010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001980  00000000  00000000  000095d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001509  00000000  00000000  0000af58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000c461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cd c1       	rjmp	.+922    	; 0x39c <__ctors_end>
       2:	e7 c1       	rjmp	.+974    	; 0x3d2 <__bad_interrupt>
       4:	e6 c1       	rjmp	.+972    	; 0x3d2 <__bad_interrupt>
       6:	b6 c4       	rjmp	.+2412   	; 0x974 <__vector_3>
       8:	f6 c4       	rjmp	.+2540   	; 0x9f6 <__vector_4>
       a:	36 c5       	rjmp	.+2668   	; 0xa78 <__vector_5>
       c:	6b c6       	rjmp	.+3286   	; 0xce4 <__vector_6>
       e:	e1 c1       	rjmp	.+962    	; 0x3d2 <__bad_interrupt>
      10:	e0 c1       	rjmp	.+960    	; 0x3d2 <__bad_interrupt>
      12:	df c1       	rjmp	.+958    	; 0x3d2 <__bad_interrupt>
      14:	de c1       	rjmp	.+956    	; 0x3d2 <__bad_interrupt>
      16:	dd c1       	rjmp	.+954    	; 0x3d2 <__bad_interrupt>
      18:	dc c1       	rjmp	.+952    	; 0x3d2 <__bad_interrupt>
      1a:	db c1       	rjmp	.+950    	; 0x3d2 <__bad_interrupt>
      1c:	da c1       	rjmp	.+948    	; 0x3d2 <__bad_interrupt>
      1e:	d9 c1       	rjmp	.+946    	; 0x3d2 <__bad_interrupt>
      20:	d8 c1       	rjmp	.+944    	; 0x3d2 <__bad_interrupt>
      22:	d7 c1       	rjmp	.+942    	; 0x3d2 <__bad_interrupt>
      24:	d6 c1       	rjmp	.+940    	; 0x3d2 <__bad_interrupt>
      26:	d5 c1       	rjmp	.+938    	; 0x3d2 <__bad_interrupt>
      28:	d4 c1       	rjmp	.+936    	; 0x3d2 <__bad_interrupt>
      2a:	d3 c1       	rjmp	.+934    	; 0x3d2 <__bad_interrupt>
      2c:	d2 c1       	rjmp	.+932    	; 0x3d2 <__bad_interrupt>
      2e:	d1 c1       	rjmp	.+930    	; 0x3d2 <__bad_interrupt>
      30:	d0 c1       	rjmp	.+928    	; 0x3d2 <__bad_interrupt>
      32:	cf c1       	rjmp	.+926    	; 0x3d2 <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	25 01       	movw	r4, r10
      36:	77 01       	movw	r14, r14
      38:	49 01       	movw	r8, r18
      3a:	77 01       	movw	r14, r14
      3c:	87 01       	movw	r16, r14
      3e:	77 01       	movw	r14, r14
      40:	87 01       	movw	r16, r14
      42:	65 04       	cpc	r6, r5
      44:	00 00       	nop
      46:	90 01       	movw	r18, r0
      48:	ed 01       	movw	r28, r26
      4a:	77 01       	movw	r14, r14
      4c:	b8 01       	movw	r22, r16
      4e:	77 01       	movw	r14, r14
      50:	ed 01       	movw	r28, r26
      52:	bb 00       	.word	0x00bb	; ????
      54:	b8 01       	movw	r22, r16
      56:	bb 00       	.word	0x00bb	; ????
      58:	87 01       	movw	r16, r14
      5a:	77 01       	movw	r14, r14
      5c:	b8 01       	movw	r22, r16
      5e:	77 01       	movw	r14, r14
      60:	ed 01       	movw	r28, r26
      62:	65 04       	cpc	r6, r5
      64:	00 00       	nop
      66:	90 01       	movw	r18, r0
      68:	b8 01       	movw	r22, r16
      6a:	77 01       	movw	r14, r14
      6c:	ed 01       	movw	r28, r26
      6e:	77 01       	movw	r14, r14
      70:	ed 01       	movw	r28, r26
      72:	77 01       	movw	r14, r14
      74:	ed 01       	movw	r28, r26
      76:	bb 00       	.word	0x00bb	; ????
      78:	b8 01       	movw	r22, r16
      7a:	bb 00       	.word	0x00bb	; ????
      7c:	87 01       	movw	r16, r14
      7e:	77 01       	movw	r14, r14
      80:	87 01       	movw	r16, r14
      82:	77 01       	movw	r14, r14
      84:	87 01       	movw	r16, r14
      86:	65 04       	cpc	r6, r5
      88:	00 00       	nop
      8a:	90 01       	movw	r18, r0
      8c:	25 01       	movw	r4, r10
      8e:	bb 00       	.word	0x00bb	; ????
      90:	87 01       	movw	r16, r14
      92:	77 01       	movw	r14, r14
      94:	b8 01       	movw	r22, r16
      96:	77 01       	movw	r14, r14
      98:	ed 01       	movw	r28, r26
      9a:	77 01       	movw	r14, r14
      9c:	b8 01       	movw	r22, r16
      9e:	65 04       	cpc	r6, r5
      a0:	00 00       	nop
      a2:	90 01       	movw	r18, r0
      a4:	87 01       	movw	r16, r14
      a6:	bb 00       	.word	0x00bb	; ????
      a8:	ed 01       	movw	r28, r26
      aa:	77 01       	movw	r14, r14
      ac:	b8 01       	movw	r22, r16
      ae:	77 01       	movw	r14, r14
      b0:	87 01       	movw	r16, r14
      b2:	77 01       	movw	r14, r14
      b4:	ed 01       	movw	r28, r26
      b6:	32 02       	muls	r19, r18
      b8:	b8 01       	movw	r22, r16
      ba:	bb 00       	.word	0x00bb	; ????
      bc:	87 01       	movw	r16, r14
      be:	77 01       	movw	r14, r14
      c0:	00 00       	nop
      c2:	90 01       	movw	r18, r0
      c4:	4b 02       	muls	r20, r27
      c6:	ee 02       	muls	r30, r30
      c8:	ed 01       	movw	r28, r26
      ca:	77 01       	movw	r14, r14
      cc:	b8 01       	movw	r22, r16
      ce:	77 01       	movw	r14, r14
      d0:	87 01       	movw	r16, r14
      d2:	ee 02       	muls	r30, r30
      d4:	87 01       	movw	r16, r14
      d6:	65 04       	cpc	r6, r5

000000d8 <song_city_of_stars>:
      d8:	25 01 49 00 49 01 49 00 5d 01 49 00 87 01 49 00     %.I.I.I.].I...I.
      e8:	b8 01 26 01 4b 02 4c 02 4b 02 4c 02 4b 02 26 01     ..&.K.L.K.L.K.&.
      f8:	0b 02 26 01 4b 02 26 01 93 02 72 03 00 00 26 01     ..&.K.&...r...&.
     108:	93 02 26 01 93 02 26 01 4b 02 26 01 93 02 26 01     ..&...&.K.&...&.
     118:	93 02 72 03 00 00 26 01 93 02 26 01 93 02 26 01     ..r...&...&...&.
     128:	4b 02 26 01 93 02 26 01 ba 02 4c 02 ba 02 26 01     K.&...&...L...&.
     138:	93 02 26 01 93 02 26 01 4b 02 26 01 b8 01 72 03     ..&...&.K.&...r.
     148:	00 00 26 01 b8 01 26 01 4b 02 4c 02 4b 02 4c 02     ..&...&.K.L.K.L.
     158:	4b 02 26 01 0b 02 26 01 4b 02 26 01 93 02 72 03     K.&...&.K.&...r.

00000168 <song_hallelujah>:
     168:	49 01 4a 01 87 01 94 02 87 01 4a 01 87 01 94 02     I.J.......J.....
     178:	87 01 4a 01 b8 01 4a 01 b8 01 4a 01 b8 01 de 03     ..J...J...J.....
     188:	49 01 4a 01 87 01 94 02 87 01 4a 01 87 01 94 02     I.J.......J.....
     198:	87 01 4a 01 b8 01 4a 01 b8 01 4a 01 b8 01 de 03     ..J...J...J.....
     1a8:	87 01 4a 01 b8 01 94 02 b8 01 94 02 b8 01 4a 01     ..J...........J.
     1b8:	b8 01 4a 01 b8 01 94 02 87 01 4a 01 87 01 94 02     ..J.......J.....
     1c8:	5d 01 4a 01 87 01 de 03 87 01 de 03                 ].J.........

000001d4 <song_havana>:
     1d4:	e9 00 21 02 25 01 10 01 25 01 10 01 e9 00 10 01     ..!.%...%.......
     1e4:	e9 00 10 01 c3 00 42 04 00 00 10 01 25 01 10 01     ......B.....%...
     1f4:	05 01 10 01 25 01 10 01 37 01 10 01 25 01 10 01     ....%...7...%...
     204:	05 01 10 01 e9 00 10 01 25 01 10 01 25 01 10 01     ........%...%...
     214:	e9 00 10 01 e9 00 10 01 c3 00 42 04 00 00 10 01     ..........B.....
     224:	25 01 10 01 05 01 10 01 25 01 10 01 37 01 10 01     %.......%...7...
     234:	25 01 10 01 05 01 10 01 e9 00 10 01 25 01 10 01     %...........%...
     244:	e9 00 10 01 00 00 10 01 25 01 10 01 05 01 10 01     ........%.......
     254:	25 01 10 01 05 01 10 01 e9 00 10 01 25 01 10 01     %...........%...
     264:	dc 00 10 01 00 00 10 01 e9 00 10 01 dc 00 10 01     ................
     274:	e9 00 10 01 dc 00 10 01 e9 00 10 01 c3 00 42 04     ..............B.

00000284 <song_another_day_of_sun>:
     284:	cf 00 f0 00 05 01 f0 00 37 01 f0 00 37 01 78 00     ........7...7.x.
     294:	cf 00 78 00 00 00 78 00 cf 00 78 00 05 01 f0 00     ..x...x...x.....
     2a4:	37 01 f0 00 37 01 f0 00 cf 00 f0 00 25 01 f0 00     7...7.......%...
     2b4:	5d 01 f0 00 5d 01 78 00 e9 00 78 00 00 00 78 00     ]...].x...x...x.
     2c4:	25 01 78 00 5d 01 f0 00 d2 01 f0 00 9f 01 f0 00     %.x.]...........
     2d4:	87 01 f0 00 37 01 f0 00 05 01 f0 00 05 01 78 00     ....7.........x.
     2e4:	87 01 78 00 00 00 78 00 87 01 78 00 37 01 f0 00     ..x...x...x.7...
     2f4:	05 01 f0 00 05 01 f0 00 25 01 f0 00 e9 00 f0 00     ........%.......
     304:	c3 00 f0 00 c3 00 78 00 25 01 78 00 00 00 78 00     ......x.%.x...x.
     314:	25 01 78 00 e9 00 f0 00 c3 00 f0 00 c3 00 f0 00     %.x.............

00000324 <song_la_la_land>:
     324:	15 01 5e 01 71 01 5e 01 9f 01 5e 01 b8 01 5e 01     ..^.q.^...^...^.
     334:	9f 01 5e 01 71 01 5e 01 25 01 20 03 00 00 5e 01     ..^.q.^.%. ...^.
     344:	25 01 5e 01 71 01 5e 01 9f 01 5e 01 b8 01 5e 01     %.^.q.^...^...^.
     354:	9f 01 5e 01 71 01 5e 01 15 01 20 03                 ..^.q.^... .

00000360 <song_game_over>:
     360:	e9 00 f4 01 b8 00 f4 01 9b 00 f4 01 74 00 b0 04     ............t...

00000370 <song_sequence_correct>:
     370:	ba 02 7d 00 70 03 7d 00 16 04 f4 01                 ..}.p.}.....

0000037c <song_new_round>:
     37c:	05 01 fa 00 5d 01 7d 00 b8 01 7d 00 0b 02 7d 00     ....].}...}...}.
     38c:	00 00 7d 00 b8 01 7d 00 00 00 7d 00 0b 02 7d 00     ..}...}...}...}.

0000039c <__ctors_end>:
     39c:	11 24       	eor	r1, r1
     39e:	1f be       	out	0x3f, r1	; 63
     3a0:	cf ef       	ldi	r28, 0xFF	; 255
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df e3       	ldi	r29, 0x3F	; 63
     3a6:	de bf       	out	0x3e, r29	; 62

000003a8 <__do_clear_bss>:
     3a8:	2e e3       	ldi	r18, 0x3E	; 62
     3aa:	a4 e0       	ldi	r26, 0x04	; 4
     3ac:	be e3       	ldi	r27, 0x3E	; 62
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a0 36       	cpi	r26, 0x60	; 96
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>

000003b8 <__do_copy_data>:
     3b8:	1e e3       	ldi	r17, 0x3E	; 62
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	be e3       	ldi	r27, 0x3E	; 62
     3be:	e6 e5       	ldi	r30, 0x56	; 86
     3c0:	f1 e1       	ldi	r31, 0x11	; 17
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <__do_copy_data+0x10>
     3c4:	05 90       	lpm	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	a4 30       	cpi	r26, 0x04	; 4
     3ca:	b1 07       	cpc	r27, r17
     3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__do_copy_data+0xc>
     3ce:	05 d2       	rcall	.+1034   	; 0x7da <main>
     3d0:	c0 c6       	rjmp	.+3456   	; 0x1152 <_exit>

000003d2 <__bad_interrupt>:
     3d2:	16 ce       	rjmp	.-980    	; 0x0 <__vectors>

000003d4 <game_is_running>:
/*
 * Return whether the game is running
 */
int game_is_running()
{
	return (game_running == RUNNING);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <__data_end>
     3dc:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <__data_end+0x1>
     3e0:	21 30       	cpi	r18, 0x01	; 1
     3e2:	31 05       	cpc	r19, r1
     3e4:	11 f0       	breq	.+4      	; 0x3ea <game_is_running+0x16>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
}
     3ea:	08 95       	ret

000003ec <game_is_ready_to_start>:
/*
 * Return whether the game is ready to start
 */
int game_is_ready_to_start()
{
	if (starting_buttons_state[EASY_STARTING_BUTTON_1] 
     3ec:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <starting_buttons_state+0x4>
     3f0:	90 91 33 3e 	lds	r25, 0x3E33	; 0x803e33 <starting_buttons_state+0x5>
     3f4:	89 2b       	or	r24, r25
     3f6:	31 f0       	breq	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	    && starting_buttons_state[EASY_STARTING_BUTTON_2]) {
     3f8:	80 91 34 3e 	lds	r24, 0x3E34	; 0x803e34 <starting_buttons_state+0x6>
     3fc:	90 91 35 3e 	lds	r25, 0x3E35	; 0x803e35 <starting_buttons_state+0x7>
     400:	89 2b       	or	r24, r25
     402:	79 f4       	brne	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		return READY_EASY;
	} else if (starting_buttons_state[HARD_STARTING_BUTTON_1]
     404:	80 91 2e 3e 	lds	r24, 0x3E2E	; 0x803e2e <starting_buttons_state>
     408:	90 91 2f 3e 	lds	r25, 0x3E2F	; 0x803e2f <starting_buttons_state+0x1>
     40c:	89 2b       	or	r24, r25
     40e:	61 f0       	breq	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			   && starting_buttons_state[HARD_STARTING_BUTTON_2]) {
     410:	80 91 30 3e 	lds	r24, 0x3E30	; 0x803e30 <starting_buttons_state+0x2>
     414:	90 91 31 3e 	lds	r25, 0x3E31	; 0x803e31 <starting_buttons_state+0x3>
     418:	89 2b       	or	r24, r25
     41a:	49 f0       	breq	.+18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		return READY_HARD;			   
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	08 95       	ret
 */
int game_is_ready_to_start()
{
	if (starting_buttons_state[EASY_STARTING_BUTTON_1] 
	    && starting_buttons_state[EASY_STARTING_BUTTON_2]) {
		return READY_EASY;
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	08 95       	ret
	} else if (starting_buttons_state[HARD_STARTING_BUTTON_1]
			   && starting_buttons_state[HARD_STARTING_BUTTON_2]) {
		return READY_HARD;			   
	}
	
	return NOT_READY;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	90 e0       	ldi	r25, 0x00	; 0
}
     432:	08 95       	ret

00000434 <game_end_over>:
/*
 * End the game as loss
 */
void game_end_over()
{
	game_running = GAME_OVER;
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
     43c:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x1>
	
	util_music_play(song_game_over, SONG_GAME_OVER_LEN);
     440:	64 e0       	ldi	r22, 0x04	; 4
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e6       	ldi	r24, 0x60	; 96
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	05 d5       	rcall	.+2570   	; 0xe54 <util_music_play>
	
	wdt_mcu_reset();
     44a:	f3 d4       	rcall	.+2534   	; 0xe32 <wdt_mcu_reset>
     44c:	08 95       	ret

0000044e <game_generate_sequence>:

/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
	for (int i = 0; i < len; i++)
     456:	16 16       	cp	r1, r22
     458:	17 06       	cpc	r1, r23
     45a:	a4 f4       	brge	.+40     	; 0x484 <game_generate_sequence+0x36>
     45c:	8c 01       	movw	r16, r24
     45e:	ec 01       	movw	r28, r24
     460:	66 0f       	add	r22, r22
     462:	77 1f       	adc	r23, r23
     464:	06 0f       	add	r16, r22
     466:	17 1f       	adc	r17, r23
		sequence[i] = rand() % BUTTON_COUNT;
     468:	5f d6       	rcall	.+3262   	; 0x1128 <rand>
     46a:	83 70       	andi	r24, 0x03	; 3
     46c:	90 78       	andi	r25, 0x80	; 128
     46e:	99 23       	and	r25, r25
     470:	24 f4       	brge	.+8      	; 0x47a <game_generate_sequence+0x2c>
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	8c 6f       	ori	r24, 0xFC	; 252
     476:	9f 6f       	ori	r25, 0xFF	; 255
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	89 93       	st	Y+, r24
     47c:	99 93       	st	Y+, r25
/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++)
     47e:	c0 17       	cp	r28, r16
     480:	d1 07       	cpc	r29, r17
     482:	91 f7       	brne	.-28     	; 0x468 <game_generate_sequence+0x1a>
		sequence[i] = rand() % BUTTON_COUNT;
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <game_blink_sequence>:

/*
 * Blink the LED sequence
 */
void game_blink_sequence(int *sequence, int len)
{
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
     49a:	16 16       	cp	r1, r22
     49c:	17 06       	cpc	r1, r23
     49e:	1c f5       	brge	.+70     	; 0x4e6 <game_blink_sequence+0x58>
     4a0:	ec 01       	movw	r28, r24
     4a2:	66 0f       	add	r22, r22
     4a4:	77 1f       	adc	r23, r23
     4a6:	7c 01       	movw	r14, r24
     4a8:	e6 0e       	add	r14, r22
     4aa:	f7 1e       	adc	r15, r23
     4ac:	8e 01       	movw	r16, r28
		led_blinker_turn_on(sequence[i]);
     4ae:	89 91       	ld	r24, Y+
     4b0:	99 91       	ld	r25, Y+
     4b2:	8f d3       	rcall	.+1822   	; 0xbd2 <led_blinker_turn_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b4:	2f e1       	ldi	r18, 0x1F	; 31
     4b6:	81 ea       	ldi	r24, 0xA1	; 161
     4b8:	97 e0       	ldi	r25, 0x07	; 7
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <game_blink_sequence+0x2c>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <game_blink_sequence+0x36>
     4c4:	00 00       	nop
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
     4c6:	f8 01       	movw	r30, r16
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	9f d3       	rcall	.+1854   	; 0xc0c <led_blinker_turn_off>
     4ce:	ff e1       	ldi	r31, 0x1F	; 31
     4d0:	21 ea       	ldi	r18, 0xA1	; 161
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	f1 50       	subi	r31, 0x01	; 1
     4d6:	20 40       	sbci	r18, 0x00	; 0
     4d8:	80 40       	sbci	r24, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <game_blink_sequence+0x46>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <game_blink_sequence+0x50>
     4de:	00 00       	nop
/*
 * Blink the LED sequence
 */
void game_blink_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++) {
     4e0:	ce 15       	cp	r28, r14
     4e2:	df 05       	cpc	r29, r15
     4e4:	19 f7       	brne	.-58     	; 0x4ac <game_blink_sequence+0x1e>
		/* Don't do the delay after the last LED */
		//if (i < (len - 1))
		//	_delay_ms(750);
	}
	
	util_led_sequence_end();
     4e6:	3b d5       	rcall	.+2678   	; 0xf5e <util_led_sequence_end>
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	08 95       	ret

000004f6 <game_next_round>:
/*
 * Generate and blink out next round
 */
void game_next_round()
{
	button_interrupts_disable();
     4f6:	d8 d1       	rcall	.+944    	; 0x8a8 <button_interrupts_disable>
     4f8:	2a e2       	ldi	r18, 0x2A	; 42
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	9a e0       	ldi	r25, 0x0A	; 10
     4fe:	21 50       	subi	r18, 0x01	; 1
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	90 40       	sbci	r25, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <game_next_round+0x8>
     506:	00 00       	nop
	
	_delay_ms(1000);
	
	round_current++;
     508:	60 91 36 3e 	lds	r22, 0x3E36	; 0x803e36 <round_current>
     50c:	70 91 37 3e 	lds	r23, 0x3E37	; 0x803e37 <round_current+0x1>
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	60 93 36 3e 	sts	0x3E36, r22	; 0x803e36 <round_current>
     518:	70 93 37 3e 	sts	0x3E37, r23	; 0x803e37 <round_current+0x1>

	sequence_ptr = 0;
     51c:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <sequence_ptr>
     520:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <sequence_ptr+0x1>

	game_blink_sequence(blinker_sequence, round_current);		
     524:	8c e0       	ldi	r24, 0x0C	; 12
     526:	9e e3       	ldi	r25, 0x3E	; 62
     528:	b2 df       	rcall	.-156    	; 0x48e <game_blink_sequence>
     52a:	2a e6       	ldi	r18, 0x6A	; 106
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <game_next_round+0x3a>
     538:	00 c0       	rjmp	.+0      	; 0x53a <game_next_round+0x44>
		
	_delay_ms(100);
	util_music_play(song_new_round, SONG_NEW_ROUND_LEN);
     53a:	68 e0       	ldi	r22, 0x08	; 8
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	8c e7       	ldi	r24, 0x7C	; 124
     540:	93 e0       	ldi	r25, 0x03	; 3
     542:	88 d4       	rcall	.+2320   	; 0xe54 <util_music_play>

	button_interrupts_enable();
     544:	99 d1       	rcall	.+818    	; 0x878 <button_interrupts_enable>
     546:	08 95       	ret

00000548 <game_start>:

/*
 * Start a new game
 */
void game_start(int difficulty)
{	
     548:	ec 01       	movw	r28, r24
	button_interrupts_disable();
     54a:	ae d1       	rcall	.+860    	; 0x8a8 <button_interrupts_disable>
	
	/* Set seed for rand session */
	srand(eeprom_get_next_seed());
     54c:	e3 d2       	rcall	.+1478   	; 0xb14 <eeprom_get_next_seed>
     54e:	f0 d5       	rcall	.+3040   	; 0x1130 <srand>
	
	/* Intro score blinking */
	util_led_intro();
     550:	e7 d4       	rcall	.+2510   	; 0xf20 <util_led_intro>
	
	/* Reset variables */
	game_running = RUNNING;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
     55a:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x1>
	game_score = 0;
     55e:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <game_score>
     562:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <game_score+0x1>
	round_current = 0;
     566:	10 92 36 3e 	sts	0x3E36, r1	; 0x803e36 <round_current>
     56a:	10 92 37 3e 	sts	0x3E37, r1	; 0x803e37 <round_current+0x1>
	effect_state = 0;
     56e:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <effect_state>
     572:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <effect_state+0x1>
	
	game_difficulty = difficulty;
     576:	c0 93 2c 3e 	sts	0x3E2C, r28	; 0x803e2c <game_difficulty>
     57a:	d0 93 2d 3e 	sts	0x3E2D, r29	; 0x803e2d <game_difficulty+0x1>

	switch (difficulty) {
     57e:	20 97       	sbiw	r28, 0x00	; 0
     580:	19 f0       	breq	.+6      	; 0x588 <game_start+0x40>
     582:	21 97       	sbiw	r28, 0x01	; 1
     584:	41 f0       	breq	.+16     	; 0x596 <game_start+0x4e>
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <game_start+0x5a>
		case EASY:
			round_count = EASY_ROUND_COUNT;
     588:	88 e0       	ldi	r24, 0x08	; 8
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <round_count>
     590:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <round_count+0x1>
			break;
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <game_start+0x5a>
		case HARD:
			round_count = HARD_ROUND_COUNT;
     596:	80 e1       	ldi	r24, 0x10	; 16
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <round_count>
     59e:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <round_count+0x1>
			break;			
	}
	
	led_counter_set(game_score);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	f1 d2       	rcall	.+1506   	; 0xb88 <led_counter_set>
	
	game_generate_sequence(blinker_sequence, round_count);
     5a6:	60 91 06 3e 	lds	r22, 0x3E06	; 0x803e06 <round_count>
     5aa:	70 91 07 3e 	lds	r23, 0x3E07	; 0x803e07 <round_count+0x1>
     5ae:	8c e0       	ldi	r24, 0x0C	; 12
     5b0:	9e e3       	ldi	r25, 0x3E	; 62
     5b2:	4d df       	rcall	.-358    	; 0x44e <game_generate_sequence>
	
	game_next_round();
     5b4:	a0 df       	rcall	.-192    	; 0x4f6 <game_next_round>
	
	/* Go in sleep and set reset timeout after each round */
	while(1) {
		wdt_on();
		sleep_mode();
     5b6:	c0 e5       	ldi	r28, 0x50	; 80
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
	
	game_next_round();
	
	/* Go in sleep and set reset timeout after each round */
	while(1) {
		wdt_on();
     5ba:	41 d4       	rcall	.+2178   	; 0xe3e <wdt_on>
		sleep_mode();
     5bc:	88 81       	ld	r24, Y
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	88 83       	st	Y, r24
     5c2:	88 95       	sleep
     5c4:	88 81       	ld	r24, Y
     5c6:	8e 7f       	andi	r24, 0xFE	; 254
     5c8:	88 83       	st	Y, r24
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <game_start+0x72>

000005cc <game_led_effect_update>:
/*
 * Automatically called handler after timeout, after the game ended
 */
void game_led_effect_update()
{
	switch (game_difficulty) {
     5cc:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <game_difficulty>
     5d0:	90 91 2d 3e 	lds	r25, 0x3E2D	; 0x803e2d <game_difficulty+0x1>
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	19 f0       	breq	.+6      	; 0x5de <game_led_effect_update+0x12>
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	a9 f0       	breq	.+42     	; 0x606 <game_led_effect_update+0x3a>
     5dc:	21 c0       	rjmp	.+66     	; 0x620 <game_led_effect_update+0x54>
		case EASY:
			if (effect_state == 0) {
     5de:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <effect_state>
     5e2:	90 91 59 3e 	lds	r25, 0x3E59	; 0x803e59 <effect_state+0x1>
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	39 f4       	brne	.+14     	; 0x5f8 <game_led_effect_update+0x2c>
				effect_state = 8;
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <effect_state>
     5f2:	90 93 59 3e 	sts	0x3E59, r25	; 0x803e59 <effect_state+0x1>
     5f6:	14 c0       	rjmp	.+40     	; 0x620 <game_led_effect_update+0x54>
			} else {
				effect_state >>= 1;
     5f8:	95 95       	asr	r25
     5fa:	87 95       	ror	r24
     5fc:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <effect_state>
     600:	90 93 59 3e 	sts	0x3E59, r25	; 0x803e59 <effect_state+0x1>
     604:	0d c0       	rjmp	.+26     	; 0x620 <game_led_effect_update+0x54>
			}
			break;
		
		case HARD:
			effect_state = rand() % 16;
     606:	90 d5       	rcall	.+2848   	; 0x1128 <rand>
     608:	8f 70       	andi	r24, 0x0F	; 15
     60a:	90 78       	andi	r25, 0x80	; 128
     60c:	99 23       	and	r25, r25
     60e:	24 f4       	brge	.+8      	; 0x618 <game_led_effect_update+0x4c>
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	80 6f       	ori	r24, 0xF0	; 240
     614:	9f 6f       	ori	r25, 0xFF	; 255
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <effect_state>
     61c:	90 93 59 3e 	sts	0x3E59, r25	; 0x803e59 <effect_state+0x1>
			break;
	}
	
	led_counter_set(effect_state);
     620:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <effect_state>
     624:	b1 d2       	rcall	.+1378   	; 0xb88 <led_counter_set>
     626:	08 95       	ret

00000628 <game_end_win>:
/*
 * End the game as winning
 */
void game_end_win()
{
	game_running = WON;
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
     630:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x1>
	
	/* Keep the LED effect running while playing song */
	game_led_effect_update();	
     634:	cb df       	rcall	.-106    	; 0x5cc <game_led_effect_update>
	rtc_enable();
     636:	32 d3       	rcall	.+1636   	; 0xc9c <rtc_enable>
	
	/* Play final song */
	switch ((rand() % SONGS_COUNT)) {
     638:	77 d5       	rcall	.+2798   	; 0x1128 <rand>
     63a:	66 e0       	ldi	r22, 0x06	; 6
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	b1 d4       	rcall	.+2402   	; 0xfa2 <__divmodhi4>
     640:	82 30       	cpi	r24, 0x02	; 2
     642:	91 05       	cpc	r25, r1
     644:	c9 f0       	breq	.+50     	; 0x678 <game_end_win+0x50>
     646:	2c f4       	brge	.+10     	; 0x652 <game_end_win+0x2a>
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	51 f0       	breq	.+20     	; 0x660 <game_end_win+0x38>
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	71 f0       	breq	.+28     	; 0x66c <game_end_win+0x44>
     650:	2a c0       	rjmp	.+84     	; 0x6a6 <game_end_win+0x7e>
     652:	84 30       	cpi	r24, 0x04	; 4
     654:	91 05       	cpc	r25, r1
     656:	e1 f0       	breq	.+56     	; 0x690 <game_end_win+0x68>
     658:	ac f0       	brlt	.+42     	; 0x684 <game_end_win+0x5c>
     65a:	05 97       	sbiw	r24, 0x05	; 5
     65c:	f9 f0       	breq	.+62     	; 0x69c <game_end_win+0x74>
     65e:	23 c0       	rjmp	.+70     	; 0x6a6 <game_end_win+0x7e>
		case SONG_LA_LA_LAND:
			util_music_play(song_la_la_land, SONG_LA_LA_LAND_LEN);
     660:	6f e0       	ldi	r22, 0x0F	; 15
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	84 e2       	ldi	r24, 0x24	; 36
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	f5 d3       	rcall	.+2026   	; 0xe54 <util_music_play>
			break;
     66a:	1d c0       	rjmp	.+58     	; 0x6a6 <game_end_win+0x7e>
		case SONG_ANOTHER_DAY_OF_SUN:
			util_music_play(song_another_day_of_sun, SONG_ANOTHER_DAY_OF_SUN_LEN);
     66c:	68 e2       	ldi	r22, 0x28	; 40
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	84 e8       	ldi	r24, 0x84	; 132
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	ef d3       	rcall	.+2014   	; 0xe54 <util_music_play>
			break;	
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <game_end_win+0x7e>
		case SONG_HAVANA:
			util_music_play(song_havana, SONG_HAVANA_LEN);
     678:	6c e2       	ldi	r22, 0x2C	; 44
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	84 ed       	ldi	r24, 0xD4	; 212
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	e9 d3       	rcall	.+2002   	; 0xe54 <util_music_play>
			break;	
     682:	11 c0       	rjmp	.+34     	; 0x6a6 <game_end_win+0x7e>
		case SONG_HALLELUJAH:
			util_music_play(song_hallelujah, SONG_HALLELUJAH_LEN);
     684:	6b e1       	ldi	r22, 0x1B	; 27
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	88 e6       	ldi	r24, 0x68	; 104
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	e3 d3       	rcall	.+1990   	; 0xe54 <util_music_play>
			break;
     68e:	0b c0       	rjmp	.+22     	; 0x6a6 <game_end_win+0x7e>
		case SONG_CITY_OF_STARS:
			util_music_play(song_city_of_stars, SONG_CITY_OF_STARS_LEN);
     690:	64 e2       	ldi	r22, 0x24	; 36
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	88 ed       	ldi	r24, 0xD8	; 216
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	dd d3       	rcall	.+1978   	; 0xe54 <util_music_play>
			break;
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <game_end_win+0x7e>
		case SONG_PERFECT:
			util_music_play(song_perfect, SONG_PERFECT_LEN);
     69c:	69 e2       	ldi	r22, 0x29	; 41
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	84 e3       	ldi	r24, 0x34	; 52
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	d7 d3       	rcall	.+1966   	; 0xe54 <util_music_play>
			break;				
	}
	
	rtc_disable();
     6a6:	cf d2       	rcall	.+1438   	; 0xc46 <rtc_disable>
	
	wdt_mcu_reset();
     6a8:	c4 d3       	rcall	.+1928   	; 0xe32 <wdt_mcu_reset>
     6aa:	08 95       	ret

000006ac <button_pressed>:

/*
 * Automatically called handler after button pressing
 */
void button_pressed(int button)
{
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
	wdt_off();
     6b2:	cb d3       	rcall	.+1942   	; 0xe4a <wdt_off>

	if (!game_is_running()) {
     6b4:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
     6b8:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <__data_end+0x1>
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	49 f0       	breq	.+18     	; 0x6d2 <button_pressed+0x26>
		starting_buttons_state[button] = 1;		
     6c0:	cc 0f       	add	r28, r28
     6c2:	dd 1f       	adc	r29, r29
     6c4:	c2 5d       	subi	r28, 0xD2	; 210
     6c6:	d1 4c       	sbci	r29, 0xC1	; 193
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	88 83       	st	Y, r24
     6ce:	99 83       	std	Y+1, r25	; 0x01
		return;
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <button_pressed+0x2c>
	}

	led_blinker_turn_on(util_button_to_blinker(button));
     6d2:	ce 01       	movw	r24, r28
     6d4:	11 d4       	rcall	.+2082   	; 0xef8 <util_button_to_blinker>
     6d6:	7d d2       	rcall	.+1274   	; 0xbd2 <led_blinker_turn_on>
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <button_released>:

/*
 * Automatically called handler after button releasing
 */
void button_released(int button)
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
	wdt_off();
     6e4:	b2 d3       	rcall	.+1892   	; 0xe4a <wdt_off>
	
	if (!game_is_running()) {
     6e6:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
     6ea:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <__data_end+0x1>
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	39 f0       	breq	.+14     	; 0x700 <button_released+0x22>
		starting_buttons_state[button] = 0;
     6f2:	cc 0f       	add	r28, r28
     6f4:	dd 1f       	adc	r29, r29
     6f6:	c2 5d       	subi	r28, 0xD2	; 210
     6f8:	d1 4c       	sbci	r29, 0xC1	; 193
     6fa:	18 82       	st	Y, r1
     6fc:	19 82       	std	Y+1, r1	; 0x01
		return;
     6fe:	55 c0       	rjmp	.+170    	; 0x7aa <button_released+0xcc>
	}

	led_blinker_turn_off(util_button_to_blinker(button));
     700:	ce 01       	movw	r24, r28
     702:	fa d3       	rcall	.+2036   	; 0xef8 <util_button_to_blinker>
     704:	83 d2       	rcall	.+1286   	; 0xc0c <led_blinker_turn_off>
	
	/* Add button to sequence */
	button_sequence[sequence_ptr] = button;
     706:	20 91 08 3e 	lds	r18, 0x3E08	; 0x803e08 <sequence_ptr>
     70a:	30 91 09 3e 	lds	r19, 0x3E09	; 0x803e09 <sequence_ptr+0x1>
     70e:	c9 01       	movw	r24, r18
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	fc 01       	movw	r30, r24
     716:	e8 5c       	subi	r30, 0xC8	; 200
     718:	f1 4c       	sbci	r31, 0xC1	; 193
     71a:	c0 83       	st	Z, r28
     71c:	d1 83       	std	Z+1, r29	; 0x01

	/* Check if correct button was released */
	if (button_sequence[sequence_ptr] == blinker_sequence[sequence_ptr]) {
     71e:	fc 01       	movw	r30, r24
     720:	e4 5f       	subi	r30, 0xF4	; 244
     722:	f1 4c       	sbci	r31, 0xC1	; 193
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	c8 17       	cp	r28, r24
     72a:	d9 07       	cpc	r29, r25
     72c:	e9 f5       	brne	.+122    	; 0x7a8 <button_released+0xca>
		sequence_ptr++;
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	20 93 08 3e 	sts	0x3E08, r18	; 0x803e08 <sequence_ptr>
     736:	30 93 09 3e 	sts	0x3E09, r19	; 0x803e09 <sequence_ptr+0x1>
				
		/* Check if all buttons were pressed and released in this round */
		if (sequence_ptr == round_current) {
     73a:	80 91 36 3e 	lds	r24, 0x3E36	; 0x803e36 <round_current>
     73e:	90 91 37 3e 	lds	r25, 0x3E37	; 0x803e37 <round_current+0x1>
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	89 f5       	brne	.+98     	; 0x7aa <button_released+0xcc>
			game_score++;
     748:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <game_score>
     74c:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <game_score+0x1>
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <game_score>
     756:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <game_score+0x1>
			led_counter_set(game_score);
     75a:	16 d2       	rcall	.+1068   	; 0xb88 <led_counter_set>
			
			/* Check if all rounds were passed */
			if (round_current == round_count) {
     75c:	20 91 36 3e 	lds	r18, 0x3E36	; 0x803e36 <round_current>
     760:	30 91 37 3e 	lds	r19, 0x3E37	; 0x803e37 <round_current+0x1>
     764:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <round_count>
     768:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <round_count+0x1>
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	59 f4       	brne	.+22     	; 0x788 <button_released+0xaa>
     772:	2f e3       	ldi	r18, 0x3F	; 63
     774:	8d e0       	ldi	r24, 0x0D	; 13
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	21 50       	subi	r18, 0x01	; 1
     77a:	80 40       	sbci	r24, 0x00	; 0
     77c:	90 40       	sbci	r25, 0x00	; 0
     77e:	e1 f7       	brne	.-8      	; 0x778 <button_released+0x9a>
     780:	00 c0       	rjmp	.+0      	; 0x782 <button_released+0xa4>
     782:	00 00       	nop
				//button_interrupts_disable();
				_delay_ms(300);
				game_end_win();
     784:	51 df       	rcall	.-350    	; 0x628 <game_end_win>
				return;
     786:	11 c0       	rjmp	.+34     	; 0x7aa <button_released+0xcc>
     788:	2f e3       	ldi	r18, 0x3F	; 63
     78a:	8d e0       	ldi	r24, 0x0D	; 13
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	21 50       	subi	r18, 0x01	; 1
     790:	80 40       	sbci	r24, 0x00	; 0
     792:	90 40       	sbci	r25, 0x00	; 0
     794:	e1 f7       	brne	.-8      	; 0x78e <button_released+0xb0>
     796:	00 c0       	rjmp	.+0      	; 0x798 <button_released+0xba>
     798:	00 00       	nop
			} else {
				_delay_ms(300);
				util_music_play(song_sequence_correct, SONG_SEQUENCE_CORRECT_LEN);
     79a:	63 e0       	ldi	r22, 0x03	; 3
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e7       	ldi	r24, 0x70	; 112
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	58 d3       	rcall	.+1712   	; 0xe54 <util_music_play>
				
				game_next_round();
     7a4:	a8 de       	rcall	.-688    	; 0x4f6 <game_next_round>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <button_released+0xcc>
			}
		} else
			return;		
	} else {
		/* Released button doesn't match the blinker sequence - game over */
		game_end_over();
     7a8:	45 de       	rcall	.-886    	; 0x434 <game_end_over>
	}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <setup>:
/*
 * Setup hardware peripherals
 */
void setup()
{
	led_init();
     7b0:	c8 d1       	rcall	.+912    	; 0xb42 <led_init>
	speaker_init();
     7b2:	c2 d2       	rcall	.+1412   	; 0xd38 <speaker_init>
	
	/* Register handler functions for buttons */
	button_init(&button_pressed, &button_released);
     7b4:	6f e6       	ldi	r22, 0x6F	; 111
     7b6:	73 e0       	ldi	r23, 0x03	; 3
     7b8:	86 e5       	ldi	r24, 0x56	; 86
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	3b d0       	rcall	.+118    	; 0x834 <button_init>
	
	/* Register handler function for RTC effects */
	rtc_init(&game_led_effect_update);
     7be:	86 ee       	ldi	r24, 0xE6	; 230
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	53 d2       	rcall	.+1190   	; 0xc6a <rtc_init>
	rtc_set_timeout(LED_EFFECT_TIMEOUT);
     7c4:	84 eb       	ldi	r24, 0xB4	; 180
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	7d d2       	rcall	.+1274   	; 0xcc4 <rtc_set_timeout>
	
	sei();
     7ca:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_STANDBY);	
     7cc:	e0 e5       	ldi	r30, 0x50	; 80
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	89 7f       	andi	r24, 0xF9	; 249
     7d4:	82 60       	ori	r24, 0x02	; 2
     7d6:	80 83       	st	Z, r24
     7d8:	08 95       	ret

000007da <main>:
/*
 * Main function called upon reset
 */
int main(void)
{
	setup();
     7da:	ea df       	rcall	.-44     	; 0x7b0 <setup>
	
	while (1) {
		/* Put CPU in sleep immediately, awake by button depressing */
		sleep_mode();
     7dc:	c0 e5       	ldi	r28, 0x50	; 80
     7de:	d0 e0       	ldi	r29, 0x00	; 0
     7e0:	88 81       	ld	r24, Y
     7e2:	81 60       	ori	r24, 0x01	; 1
     7e4:	88 83       	st	Y, r24
     7e6:	88 95       	sleep
     7e8:	88 81       	ld	r24, Y
     7ea:	8e 7f       	andi	r24, 0xFE	; 254
     7ec:	88 83       	st	Y, r24
		
		if(!game_is_running()) {
     7ee:	f2 dd       	rcall	.-1052   	; 0x3d4 <game_is_running>
     7f0:	89 2b       	or	r24, r25
     7f2:	b1 f7       	brne	.-20     	; 0x7e0 <main+0x6>
			int start_status = game_is_ready_to_start();
     7f4:	fb dd       	rcall	.-1034   	; 0x3ec <game_is_ready_to_start>
     7f6:	8c 01       	movw	r16, r24
			
			/* Both starting buttons are not pressed */
			if (start_status == NOT_READY)
     7f8:	02 97       	sbiw	r24, 0x02	; 2
     7fa:	91 f3       	breq	.-28     	; 0x7e0 <main+0x6>
     7fc:	24 e5       	ldi	r18, 0x54	; 84
     7fe:	88 e5       	ldi	r24, 0x58	; 88
     800:	94 e1       	ldi	r25, 0x14	; 20
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <main+0x28>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <main+0x32>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0x34>
				continue;
				
			_delay_ms(BUTTON_START_TIMEOUT);
			
			/* Check if buttons are still pressed after timeout */
			if (start_status == game_is_ready_to_start()) {
     80e:	ee dd       	rcall	.-1060   	; 0x3ec <game_is_ready_to_start>
     810:	08 17       	cp	r16, r24
     812:	19 07       	cpc	r17, r25
     814:	29 f7       	brne	.-54     	; 0x7e0 <main+0x6>
				switch (start_status) {
     816:	01 15       	cp	r16, r1
     818:	11 05       	cpc	r17, r1
     81a:	21 f0       	breq	.+8      	; 0x824 <main+0x4a>
     81c:	01 30       	cpi	r16, 0x01	; 1
     81e:	11 05       	cpc	r17, r1
     820:	29 f0       	breq	.+10     	; 0x82c <main+0x52>
     822:	de cf       	rjmp	.-68     	; 0x7e0 <main+0x6>
					case READY_EASY:
						game_start(EASY);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	8f de       	rcall	.-738    	; 0x548 <game_start>
						break;
     82a:	da cf       	rjmp	.-76     	; 0x7e0 <main+0x6>
					case READY_HARD:
						game_start(HARD);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	8b de       	rcall	.-746    	; 0x548 <game_start>
						break;
     832:	d6 cf       	rjmp	.-84     	; 0x7e0 <main+0x6>

00000834 <button_init>:
 */
void button_init(void (*button_event_pressed_handler)(int),
				 void (*button_event_released_handler)(int))
{
	/* Set as input pin */
	BUTTON_GREEN_PORT.DIRCLR = BUTTON_GREEN_PIN;
     834:	a0 e4       	ldi	r26, 0x40	; 64
     836:	b4 e0       	ldi	r27, 0x04	; 4
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	12 96       	adiw	r26, 0x02	; 2
     83c:	2c 93       	st	X, r18
     83e:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_ORANGE_PORT.DIRCLR = BUTTON_ORANGE_PIN;
     840:	e0 e2       	ldi	r30, 0x20	; 32
     842:	f4 e0       	ldi	r31, 0x04	; 4
     844:	24 e0       	ldi	r18, 0x04	; 4
     846:	22 83       	std	Z+2, r18	; 0x02
	BUTTON_YELLOW_PORT.DIRCLR = BUTTON_YELLOW_PIN;
     848:	22 e0       	ldi	r18, 0x02	; 2
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	2c 93       	st	X, r18
     84e:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_RED_PORT.DIRCLR = BUTTON_RED_PIN;
     850:	28 e0       	ldi	r18, 0x08	; 8
     852:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable pull-up and interrupt */
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     854:	29 e0       	ldi	r18, 0x09	; 9
     856:	50 96       	adiw	r26, 0x10	; 16
     858:	2c 93       	st	X, r18
     85a:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     85c:	22 8b       	std	Z+18, r18	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     85e:	51 96       	adiw	r26, 0x11	; 17
     860:	2c 93       	st	X, r18
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     862:	23 8b       	std	Z+19, r18	; 0x13

	button_pressed_handler = button_event_pressed_handler;
     864:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <button_pressed_handler>
     868:	90 93 5d 3e 	sts	0x3E5D, r25	; 0x803e5d <button_pressed_handler+0x1>
	button_released_handler = button_event_released_handler;
     86c:	60 93 5a 3e 	sts	0x3E5A, r22	; 0x803e5a <button_released_handler>
     870:	70 93 5b 3e 	sts	0x3E5B, r23	; 0x803e5b <button_released_handler+0x1>
	
	/* Enable global interrupts */
	sei();
     874:	78 94       	sei
     876:	08 95       	ret

00000878 <button_interrupts_enable>:
/*
 * Enable hardware interrupts for buttons
 */
void button_interrupts_enable()
{
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;
     878:	a0 e4       	ldi	r26, 0x40	; 64
     87a:	b4 e0       	ldi	r27, 0x04	; 4
     87c:	50 96       	adiw	r26, 0x10	; 16
     87e:	8c 91       	ld	r24, X
     880:	50 97       	sbiw	r26, 0x10	; 16
     882:	81 60       	ori	r24, 0x01	; 1
     884:	50 96       	adiw	r26, 0x10	; 16
     886:	8c 93       	st	X, r24
     888:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;
     88a:	e0 e2       	ldi	r30, 0x20	; 32
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	82 89       	ldd	r24, Z+18	; 0x12
     890:	81 60       	ori	r24, 0x01	; 1
     892:	82 8b       	std	Z+18, r24	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;
     894:	51 96       	adiw	r26, 0x11	; 17
     896:	8c 91       	ld	r24, X
     898:	51 97       	sbiw	r26, 0x11	; 17
     89a:	81 60       	ori	r24, 0x01	; 1
     89c:	51 96       	adiw	r26, 0x11	; 17
     89e:	8c 93       	st	X, r24
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;	
     8a0:	83 89       	ldd	r24, Z+19	; 0x13
     8a2:	81 60       	ori	r24, 0x01	; 1
     8a4:	83 8b       	std	Z+19, r24	; 0x13
     8a6:	08 95       	ret

000008a8 <button_interrupts_disable>:
/*
 * Disable hardware interrupts for buttons
 */
void button_interrupts_disable()
{
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8a8:	a0 e4       	ldi	r26, 0x40	; 64
     8aa:	b4 e0       	ldi	r27, 0x04	; 4
     8ac:	50 96       	adiw	r26, 0x10	; 16
     8ae:	8c 91       	ld	r24, X
     8b0:	50 97       	sbiw	r26, 0x10	; 16
     8b2:	8e 7f       	andi	r24, 0xFE	; 254
     8b4:	50 96       	adiw	r26, 0x10	; 16
     8b6:	8c 93       	st	X, r24
     8b8:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8ba:	e0 e2       	ldi	r30, 0x20	; 32
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	82 89       	ldd	r24, Z+18	; 0x12
     8c0:	8e 7f       	andi	r24, 0xFE	; 254
     8c2:	82 8b       	std	Z+18, r24	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8c4:	51 96       	adiw	r26, 0x11	; 17
     8c6:	8c 91       	ld	r24, X
     8c8:	51 97       	sbiw	r26, 0x11	; 17
     8ca:	8e 7f       	andi	r24, 0xFE	; 254
     8cc:	51 96       	adiw	r26, 0x11	; 17
     8ce:	8c 93       	st	X, r24
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8d0:	83 89       	ldd	r24, Z+19	; 0x13
     8d2:	8e 7f       	andi	r24, 0xFE	; 254
     8d4:	83 8b       	std	Z+19, r24	; 0x13
     8d6:	08 95       	ret

000008d8 <button_is_pressed>:
/*
 * Return 1 if 'button' is pressed or 0 if released
 */
int button_is_pressed(int button)
{
	switch (button) {
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	91 05       	cpc	r25, r1
     8dc:	89 f0       	breq	.+34     	; 0x900 <button_is_pressed+0x28>
     8de:	1c f4       	brge	.+6      	; 0x8e6 <button_is_pressed+0xe>
     8e0:	89 2b       	or	r24, r25
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <button_is_pressed+0x1a>
     8e4:	28 c0       	rjmp	.+80     	; 0x936 <button_is_pressed+0x5e>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	91 05       	cpc	r25, r1
     8ea:	99 f0       	breq	.+38     	; 0x912 <button_is_pressed+0x3a>
     8ec:	03 97       	sbiw	r24, 0x03	; 3
     8ee:	c9 f0       	breq	.+50     	; 0x922 <button_is_pressed+0x4a>
     8f0:	22 c0       	rjmp	.+68     	; 0x936 <button_is_pressed+0x5e>
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
     8f2:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
				return 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	89 27       	eor	r24, r25
     8fa:	81 70       	andi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	08 95       	ret
			break;
		}
		case BUTTON_ORANGE: {
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
     900:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
     904:	86 95       	lsr	r24
     906:	86 95       	lsr	r24
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	89 27       	eor	r24, r25
     90c:	81 70       	andi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	08 95       	ret
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
				return 1;
			break;
		}
		case BUTTON_YELLOW: {
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
     912:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
     916:	86 95       	lsr	r24
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	89 27       	eor	r24, r25
     91c:	81 70       	andi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
				return 1;
			break;
		}
		case BUTTON_RED: {
			if (!(BUTTON_RED_PORT.IN & BUTTON_RED_PIN))
     922:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
     926:	86 95       	lsr	r24
     928:	86 95       	lsr	r24
     92a:	86 95       	lsr	r24
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	89 27       	eor	r24, r25
     930:	81 70       	andi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	08 95       	ret
				return 1;
			break;
		}
	}
		
	return 0;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
}
     93a:	08 95       	ret

0000093c <button_call_handler>:

/*
 * Call handler for button event
 */
void button_call_handler(int button)
{
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	8d e8       	ldi	r24, 0x8D	; 141
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <button_call_handler+0xa>
     94a:	00 00       	nop
	/* Button debounce */
	_delay_ms(BUTTON_BOUNCE_MS);
	
	if (button_is_pressed(button)) {
     94c:	ce 01       	movw	r24, r28
     94e:	c4 df       	rcall	.-120    	; 0x8d8 <button_is_pressed>
     950:	89 2b       	or	r24, r25
     952:	39 f0       	breq	.+14     	; 0x962 <button_call_handler+0x26>
		(*button_pressed_handler)(button);
     954:	e0 91 5c 3e 	lds	r30, 0x3E5C	; 0x803e5c <button_pressed_handler>
     958:	f0 91 5d 3e 	lds	r31, 0x3E5D	; 0x803e5d <button_pressed_handler+0x1>
     95c:	ce 01       	movw	r24, r28
     95e:	09 95       	icall
     960:	06 c0       	rjmp	.+12     	; 0x96e <button_call_handler+0x32>
	} else {
		(*button_released_handler)(button);
     962:	e0 91 5a 3e 	lds	r30, 0x3E5A	; 0x803e5a <button_released_handler>
     966:	f0 91 5b 3e 	lds	r31, 0x3E5B	; 0x803e5b <button_released_handler+0x1>
     96a:	ce 01       	movw	r24, r28
     96c:	09 95       	icall
	}
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <__vector_3>:

/*
 * Interrupt service routine for PORTA
 */
ISR(PORTA_PORT_vect)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_GREEN_PIN) {
     996:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     99a:	80 ff       	sbrs	r24, 0
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <__vector_3+0x30>
		button_call_handler(BUTTON_GREEN);
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	cc df       	rcall	.-104    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_ORANGE_PIN) {
     9a4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9a8:	82 ff       	sbrs	r24, 2
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <__vector_3+0x3e>
		button_call_handler(BUTTON_ORANGE);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	c5 df       	rcall	.-118    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_YELLOW_PIN) {
     9b2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9b6:	81 ff       	sbrs	r24, 1
     9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <__vector_3+0x4c>
		button_call_handler(BUTTON_YELLOW);
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	be df       	rcall	.-132    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_RED_PIN) {
     9c0:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9c4:	83 ff       	sbrs	r24, 3
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <__vector_3+0x5a>
		button_call_handler(BUTTON_RED);
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	b7 df       	rcall	.-146    	; 0x93c <button_call_handler>
	}
	#endif
	
	/* Clear interrupt flag, so the next one can occur */
	PORTA.INTFLAGS = 0xff;
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <__vector_4>:

/*
 * Interrupt service routine for PORTB 
 */
ISR(PORTB_PORT_vect)
{
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	ef 93       	push	r30
     a16:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_GREEN_PIN) {
     a18:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a1c:	80 ff       	sbrs	r24, 0
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <__vector_4+0x30>
		button_call_handler(BUTTON_GREEN);
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	8b df       	rcall	.-234    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_ORANGE_PIN) {
     a26:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a2a:	82 ff       	sbrs	r24, 2
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <__vector_4+0x3e>
		button_call_handler(BUTTON_ORANGE);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	84 df       	rcall	.-248    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_YELLOW_PIN) {
     a34:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a38:	81 ff       	sbrs	r24, 1
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <__vector_4+0x4c>
		button_call_handler(BUTTON_YELLOW);
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	7d df       	rcall	.-262    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_RED_PIN) {
     a42:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a46:	83 ff       	sbrs	r24, 3
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <__vector_4+0x5a>
		button_call_handler(BUTTON_RED);
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	76 df       	rcall	.-276    	; 0x93c <button_call_handler>
	}
	#endif	
	
	/* Clear interrupt flag, so the next one can occur */
	PORTB.INTFLAGS = 0xff;
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_5>:

/*
 * Interrupt service routine for PORTC
 */
ISR(PORTC_PORT_vect)
{
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_GREEN_PIN) {
     a9a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     a9e:	80 ff       	sbrs	r24, 0
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <__vector_5+0x30>
		button_call_handler(BUTTON_GREEN);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	4a df       	rcall	.-364    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_ORANGE_PIN) {
     aa8:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     aac:	82 ff       	sbrs	r24, 2
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <__vector_5+0x3e>
		button_call_handler(BUTTON_ORANGE);
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	43 df       	rcall	.-378    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_YELLOW_PIN) {
     ab6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     aba:	81 ff       	sbrs	r24, 1
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <__vector_5+0x4c>
		button_call_handler(BUTTON_YELLOW);
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	3c df       	rcall	.-392    	; 0x93c <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_RED_PIN) {
     ac4:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     ac8:	83 ff       	sbrs	r24, 3
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <__vector_5+0x5a>
		button_call_handler(BUTTON_RED);
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	35 df       	rcall	.-406    	; 0x93c <button_call_handler>
	}
	#endif

	/* Clear interrupt flag, so the next one can occur */
	PORTC.INTFLAGS = 0xff;
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <eeprom_write>:
 */
void eeprom_write(uint16_t addr, uint8_t data)
{
	uint16_t *addr_ptr = (uint16_t *) addr;
	
	*addr_ptr = data;
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	fc 01       	movw	r30, r24
     afe:	60 83       	st	Z, r22
     b00:	71 83       	std	Z+1, r23	; 0x01
	NVMCTRL.ADDR = addr;
     b02:	e0 e0       	ldi	r30, 0x00	; 0
     b04:	f0 e1       	ldi	r31, 0x10	; 16
     b06:	80 87       	std	Z+8, r24	; 0x08
     b08:	91 87       	std	Z+9, r25	; 0x09
	
	CPU_CCP = CCP_SPM_gc;
     b0a:	8d e9       	ldi	r24, 0x9D	; 157
     b0c:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;	
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	80 83       	st	Z, r24
     b12:	08 95       	ret

00000b14 <eeprom_get_next_seed>:

/*
 * Read seed from EEPROM, increment, return and store it back
 */
uint16_t eeprom_get_next_seed()
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
	uint16_t seed = (eeprom_read(EEPROM_ADDR_HIGH) << 8) | eeprom_read(EEPROM_ADDR_LOW);
     b18:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x701401>
     b1c:	d8 2f       	mov	r29, r24
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	c8 2f       	mov	r28, r24
     b22:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x701400>
     b26:	c8 2b       	or	r28, r24
	
	seed++;
     b28:	21 96       	adiw	r28, 0x01	; 1
	
	eeprom_write(EEPROM_ADDR_HIGH, seed >> 8);
     b2a:	6d 2f       	mov	r22, r29
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	94 e1       	ldi	r25, 0x14	; 20
     b30:	e4 df       	rcall	.-56     	; 0xafa <eeprom_write>
	eeprom_write(EEPROM_ADDR_LOW, seed & 0xFF);
     b32:	6c 2f       	mov	r22, r28
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	94 e1       	ldi	r25, 0x14	; 20
     b38:	e0 df       	rcall	.-64     	; 0xafa <eeprom_write>
	
	return seed;
}
     b3a:	ce 01       	movw	r24, r28
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <led_init>:
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f4 e0       	ldi	r31, 0x04	; 4
     b46:	30 e4       	ldi	r19, 0x40	; 64
     b48:	31 83       	std	Z+1, r19	; 0x01
     b4a:	20 e8       	ldi	r18, 0x80	; 128
     b4c:	21 83       	std	Z+1, r18	; 0x01
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	81 83       	std	Z+1, r24	; 0x01
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	36 83       	std	Z+6, r19	; 0x06
     b58:	26 83       	std	Z+6, r18	; 0x06
     b5a:	86 83       	std	Z+6, r24	; 0x06
     b5c:	96 83       	std	Z+6, r25	; 0x06
     b5e:	38 e0       	ldi	r19, 0x08	; 8
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 e1       	ldi	r18, 0x10	; 16
     b64:	21 83       	std	Z+1, r18	; 0x01
     b66:	a0 e2       	ldi	r26, 0x20	; 32
     b68:	b4 e0       	ldi	r27, 0x04	; 4
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	9c 93       	st	X, r25
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	11 96       	adiw	r26, 0x01	; 1
     b74:	8c 93       	st	X, r24
     b76:	11 97       	sbiw	r26, 0x01	; 1
     b78:	36 83       	std	Z+6, r19	; 0x06
     b7a:	26 83       	std	Z+6, r18	; 0x06
     b7c:	16 96       	adiw	r26, 0x06	; 6
     b7e:	9c 93       	st	X, r25
     b80:	16 97       	sbiw	r26, 0x06	; 6
     b82:	16 96       	adiw	r26, 0x06	; 6
     b84:	8c 93       	st	X, r24
     b86:	08 95       	ret

00000b88 <led_counter_set>:
/*
 * Set counter LEDs to number in binary (0-15)
 */
void led_counter_set(uint8_t number)
{
	if (number & (1 << 0)) {
     b88:	80 ff       	sbrs	r24, 0
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <led_counter_set+0xc>
 */
void led_counter_turn_on(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
     b8c:	90 e4       	ldi	r25, 0x40	; 64
     b8e:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <led_counter_set+0x12>
 */
void led_counter_turn_off(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
     b94:	90 e4       	ldi	r25, 0x40	; 64
     b96:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_1);
	} else {
		led_counter_turn_off(COUNTER_1);
	}

	if (number & (1 << 1)) {
     b9a:	81 ff       	sbrs	r24, 1
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <led_counter_set+0x1e>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
     b9e:	90 e8       	ldi	r25, 0x80	; 128
     ba0:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <led_counter_set+0x24>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
     ba6:	90 e8       	ldi	r25, 0x80	; 128
     ba8:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_2);
	} else {
		led_counter_turn_off(COUNTER_2);
	}

	if (number & (1 << 2)) {
     bac:	82 ff       	sbrs	r24, 2
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <led_counter_set+0x30>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <led_counter_set+0x36>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_4);
	} else {
		led_counter_turn_off(COUNTER_4);
	}

	if (number & (1 << 3)) {
     bbe:	83 ff       	sbrs	r24, 3
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <led_counter_set+0x42>
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTSET = COUNTER_8_PIN;
     bc2:	84 e0       	ldi	r24, 0x04	; 4
     bc4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     bc8:	08 95       	ret
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     bd0:	08 95       	ret

00000bd2 <led_blinker_turn_on>:
/*
 * Turn the specific 'blinker' LED on
 */
void led_blinker_turn_on(int blinker)
{
	switch (blinker) {
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	91 05       	cpc	r25, r1
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <led_blinker_turn_on+0x22>
     bd8:	1c f4       	brge	.+6      	; 0xbe0 <led_blinker_turn_on+0xe>
     bda:	89 2b       	or	r24, r25
     bdc:	39 f0       	breq	.+14     	; 0xbec <led_blinker_turn_on+0x1a>
     bde:	08 95       	ret
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	91 05       	cpc	r25, r1
     be4:	59 f0       	breq	.+22     	; 0xbfc <led_blinker_turn_on+0x2a>
     be6:	03 97       	sbiw	r24, 0x03	; 3
     be8:	69 f0       	breq	.+26     	; 0xc04 <led_blinker_turn_on+0x32>
     bea:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTSET = BLINKER_GREEN_PIN;
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
     bf2:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTSET = BLINKER_ORANGE_PIN;
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
     bfa:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTSET = BLINKER_YELLOW_PIN;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
			break;				
     c02:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTSET = BLINKER_RED_PIN;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     c0a:	08 95       	ret

00000c0c <led_blinker_turn_off>:
/*
 * Turn the specific 'blinker' LED off
 */
void led_blinker_turn_off(int blinker)
{
	switch (blinker) {
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	91 05       	cpc	r25, r1
     c10:	71 f0       	breq	.+28     	; 0xc2e <led_blinker_turn_off+0x22>
     c12:	1c f4       	brge	.+6      	; 0xc1a <led_blinker_turn_off+0xe>
     c14:	89 2b       	or	r24, r25
     c16:	39 f0       	breq	.+14     	; 0xc26 <led_blinker_turn_off+0x1a>
     c18:	08 95       	ret
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	91 05       	cpc	r25, r1
     c1e:	59 f0       	breq	.+22     	; 0xc36 <led_blinker_turn_off+0x2a>
     c20:	03 97       	sbiw	r24, 0x03	; 3
     c22:	69 f0       	breq	.+26     	; 0xc3e <led_blinker_turn_off+0x32>
     c24:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTCLR = BLINKER_GREEN_PIN;
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
     c2c:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTCLR = BLINKER_ORANGE_PIN;
     c2e:	80 e1       	ldi	r24, 0x10	; 16
     c30:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
     c34:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTCLR = BLINKER_YELLOW_PIN;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
			break;
     c3c:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTCLR = BLINKER_RED_PIN;
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     c44:	08 95       	ret

00000c46 <rtc_disable>:
 * Disable RTC and stop counting
 */
void rtc_disable()
{
	/* Disable overflow interrupt */
	RTC.INTCTRL &= ~RTC_OVF_bm;
     c46:	e0 e4       	ldi	r30, 0x40	; 64
     c48:	f1 e0       	ldi	r31, 0x01	; 1
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	82 83       	std	Z+2, r24	; 0x02
	
	/* Disable counter */
	RTC.CTRLA &= ~RTC_RTCEN_bm;
     c50:	80 81       	ld	r24, Z
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	80 83       	st	Z, r24
     c56:	08 95       	ret

00000c58 <rtc_synchronise>:
/*
 * Wait for register synchronization of bit masked register from status
 */
void rtc_synchronise(int bitmask)
{
	while (RTC.STATUS & bitmask)
     c58:	e0 e4       	ldi	r30, 0x40	; 64
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	21 81       	ldd	r18, Z+1	; 0x01
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	28 23       	and	r18, r24
     c62:	39 23       	and	r19, r25
     c64:	23 2b       	or	r18, r19
     c66:	d1 f7       	brne	.-12     	; 0xc5c <rtc_synchronise+0x4>
		continue;
}
     c68:	08 95       	ret

00000c6a <rtc_init>:

/*
 * Initialize RTC - Real Time Counter
 */
void rtc_init(void (*rtc_event_overflow_handler)())
{
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	8c 01       	movw	r16, r24
	/* Set RTC speed to 1KHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; 
     c74:	c0 e4       	ldi	r28, 0x40	; 64
     c76:	d1 e0       	ldi	r29, 0x01	; 1
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	8f 83       	std	Y+7, r24	; 0x07
	
	/* Set RTC prescaler to /1 (no division) */
	rtc_synchronise(RTC_CTRLABUSY_bm);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	eb df       	rcall	.-42     	; 0xc58 <rtc_synchronise>
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc;
     c82:	18 82       	st	Y, r1
	rtc_synchronise(RTC_CTRLABUSY_bm);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	e7 df       	rcall	.-50     	; 0xc58 <rtc_synchronise>

	rtc_overflow_handler = rtc_event_overflow_handler;
     c8a:	00 93 5e 3e 	sts	0x3E5E, r16	; 0x803e5e <rtc_overflow_handler>
     c8e:	10 93 5f 3e 	sts	0x3E5F, r17	; 0x803e5f <rtc_overflow_handler+0x1>
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <rtc_enable>:

/*
 * Enable RTC and starting counting
 */
void rtc_enable()
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
	/* Reset counter */
	rtc_synchronise(RTC_CNTBUSY_bm);
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	d9 df       	rcall	.-78     	; 0xc58 <rtc_synchronise>
	RTC.CNT = 0;
     ca6:	c0 e4       	ldi	r28, 0x40	; 64
     ca8:	d1 e0       	ldi	r29, 0x01	; 1
     caa:	18 86       	std	Y+8, r1	; 0x08
     cac:	19 86       	std	Y+9, r1	; 0x09
	rtc_synchronise(RTC_CNTBUSY_bm);
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	d2 df       	rcall	.-92     	; 0xc58 <rtc_synchronise>
	
	/* Enable overflow interrupt */
	RTC.INTCTRL = RTC_OVF_bm;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	8a 83       	std	Y+2, r24	; 0x02
	
	/* Enable counter */
	RTC.CTRLA |= RTC_RTCEN_bm;
     cb8:	88 81       	ld	r24, Y
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	88 83       	st	Y, r24
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <rtc_set_timeout>:

/*
 * Set overflow timeout in milliseconds
 */
void rtc_set_timeout(int millis)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
	rtc_synchronise(RTC_PERBUSY_bm);
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	c4 df       	rcall	.-120    	; 0xc58 <rtc_synchronise>
	RTC.PER = millis;
     cd0:	c0 93 4a 01 	sts	0x014A, r28	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cd4:	d0 93 4b 01 	sts	0x014B, r29	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
	rtc_synchronise(RTC_PERBUSY_bm);
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	bd df       	rcall	.-134    	; 0xc58 <rtc_synchronise>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <__vector_6>:

/*
 * Interrupt service routine for RTC counter
 */
ISR(RTC_CNT_vect)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
	/* Call handler */
	(*rtc_overflow_handler)();
     d06:	e0 91 5e 3e 	lds	r30, 0x3E5E	; 0x803e5e <rtc_overflow_handler>
     d0a:	f0 91 5f 3e 	lds	r31, 0x3E5F	; 0x803e5f <rtc_overflow_handler+0x1>
     d0e:	09 95       	icall
	
	/* Clear interrupt flag, so the next one can occur */
	RTC.INTFLAGS = 0xff;
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <speaker_init>:
/*
 * Initialize output pins for counters and blinkers
 */
void speaker_init()
{
	SPEAKER_PORT.DIRSET = SPEAKER_PIN;
     d38:	e0 e0       	ldi	r30, 0x00	; 0
     d3a:	f4 e0       	ldi	r31, 0x04	; 4
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	81 83       	std	Z+1, r24	; 0x01
	SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
     d40:	86 83       	std	Z+6, r24	; 0x06
     d42:	08 95       	ret

00000d44 <speaker_generate_tone>:
/*
 * Play frequency at specified duration in milliseconds
 * This function is I/O blocking
 */
void speaker_generate_tone(long frequency, long duration)
{
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	6b 01       	movw	r12, r22
     d66:	7c 01       	movw	r14, r24
     d68:	29 01       	movw	r4, r18
     d6a:	3a 01       	movw	r6, r20
	long period_us = 1000000L / frequency;
     d6c:	60 e4       	ldi	r22, 0x40	; 64
     d6e:	72 e4       	ldi	r23, 0x42	; 66
     d70:	8f e0       	ldi	r24, 0x0F	; 15
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a7 01       	movw	r20, r14
     d76:	96 01       	movw	r18, r12
     d78:	27 d1       	rcall	.+590    	; 0xfc8 <__divmodsi4>
     d7a:	49 01       	movw	r8, r18
     d7c:	5a 01       	movw	r10, r20
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
     d7e:	68 e0       	ldi	r22, 0x08	; 8
     d80:	76 e4       	ldi	r23, 0x46	; 70
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	1e d1       	rcall	.+572    	; 0xfc8 <__divmodsi4>
     d8c:	69 01       	movw	r12, r18
     d8e:	7a 01       	movw	r14, r20
	
	while(elapsed_us < (duration * 1000L)) {
     d90:	a8 ee       	ldi	r26, 0xE8	; 232
     d92:	b3 e0       	ldi	r27, 0x03	; 3
     d94:	a3 01       	movw	r20, r6
     d96:	92 01       	movw	r18, r4
     d98:	33 d1       	rcall	.+614    	; 0x1000 <__muluhisi3>
     d9a:	8b 01       	movw	r16, r22
     d9c:	9c 01       	movw	r18, r24
     d9e:	16 16       	cp	r1, r22
     da0:	17 06       	cpc	r1, r23
     da2:	18 06       	cpc	r1, r24
     da4:	19 06       	cpc	r1, r25
     da6:	a4 f5       	brge	.+104    	; 0xe10 <speaker_generate_tone+0xcc>
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	ba 01       	movw	r22, r20
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
     dae:	e0 e0       	ldi	r30, 0x00	; 0
     db0:	f4 e0       	ldi	r31, 0x04	; 4
     db2:	c0 e2       	ldi	r28, 0x20	; 32
     db4:	dc 2f       	mov	r29, r28
     db6:	d5 83       	std	Z+5, r29	; 0x05
		
		for (long i = 0L; i < half_period_wait; i++)
     db8:	1c 14       	cp	r1, r12
     dba:	1d 04       	cpc	r1, r13
     dbc:	1e 04       	cpc	r1, r14
     dbe:	1f 04       	cpc	r1, r15
     dc0:	04 f5       	brge	.+64     	; 0xe02 <speaker_generate_tone+0xbe>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	dc 01       	movw	r26, r24
		{
			_NOP();
     dc8:	00 00       	nop
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	a1 1d       	adc	r26, r1
     dce:	b1 1d       	adc	r27, r1
     dd0:	c8 16       	cp	r12, r24
     dd2:	d9 06       	cpc	r13, r25
     dd4:	ea 06       	cpc	r14, r26
     dd6:	fb 06       	cpc	r15, r27
     dd8:	b9 f7       	brne	.-18     	; 0xdc8 <speaker_generate_tone+0x84>
     dda:	15 c0       	rjmp	.+42     	; 0xe06 <speaker_generate_tone+0xc2>
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
     ddc:	00 00       	nop
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	a1 1d       	adc	r26, r1
     de2:	b1 1d       	adc	r27, r1
     de4:	c8 16       	cp	r12, r24
     de6:	d9 06       	cpc	r13, r25
     de8:	ea 06       	cpc	r14, r26
     dea:	fb 06       	cpc	r15, r27
     dec:	b9 f7       	brne	.-18     	; 0xddc <speaker_generate_tone+0x98>
		{
			_NOP();
		}
		
		elapsed_us += period_us;
     dee:	48 0d       	add	r20, r8
     df0:	59 1d       	adc	r21, r9
     df2:	6a 1d       	adc	r22, r10
     df4:	7b 1d       	adc	r23, r11
{
	long period_us = 1000000L / frequency;
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
     df6:	40 17       	cp	r20, r16
     df8:	51 07       	cpc	r21, r17
     dfa:	62 07       	cpc	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	dc f2       	brlt	.-74     	; 0xdb6 <speaker_generate_tone+0x72>
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <speaker_generate_tone+0xcc>
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
     e02:	c6 83       	std	Z+6, r28	; 0x06
     e04:	f4 cf       	rjmp	.-24     	; 0xdee <speaker_generate_tone+0xaa>
     e06:	c6 83       	std	Z+6, r28	; 0x06
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	dc 01       	movw	r26, r24
     e0e:	e6 cf       	rjmp	.-52     	; 0xddc <speaker_generate_tone+0x98>
		}
		
		elapsed_us += period_us;
	}
	
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	08 95       	ret

00000e32 <wdt_mcu_reset>:
 * Reset the MCU after 8ms
 */
void wdt_mcu_reset()
{
	/* Request the access for protected I/O */
	CPU_CCP = CCP_IOREG_gc;
     e32:	88 ed       	ldi	r24, 0xD8	; 216
     e34:	84 bf       	out	0x34, r24	; 52
	
	/* Set timer to 8ms */
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e3c:	ff cf       	rjmp	.-2      	; 0xe3c <wdt_mcu_reset+0xa>

00000e3e <wdt_on>:
 * Set watchdog timer to 8 seconds
 */
void wdt_on()
{
	/* Request the access for protected I/O */
	CPU_CCP = CCP_IOREG_gc;
     e3e:	88 ed       	ldi	r24, 0xD8	; 216
     e40:	84 bf       	out	0x34, r24	; 52
	/* Set timer to 8s */
	WDT.CTRLA = WDT_PERIOD_8KCLK_gc;	
     e42:	8b e0       	ldi	r24, 0x0B	; 11
     e44:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e48:	08 95       	ret

00000e4a <wdt_off>:
 * Turn the ticking watchdog timer off
 */
void wdt_off()
{
	/* Request the access for protected I/O */
	CPU_CCP = CCP_IOREG_gc;
     e4a:	88 ed       	ldi	r24, 0xD8	; 216
     e4c:	84 bf       	out	0x34, r24	; 52
	/* Disable WDT */
	WDT.CTRLA = WDT_PERIOD_OFF_gc;	
     e4e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e52:	08 95       	ret

00000e54 <util_music_play>:

/*
 * Play frequency durations out from speaker
 */
void util_music_play(const int music[][2], int len)
{
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
     e64:	16 16       	cp	r1, r22
     e66:	17 06       	cpc	r1, r23
     e68:	0c f0       	brlt	.+2      	; 0xe6c <util_music_play+0x18>
     e6a:	3d c0       	rjmp	.+122    	; 0xee6 <util_music_play+0x92>
     e6c:	7b 01       	movw	r14, r22
     e6e:	c8 2f       	mov	r28, r24
     e70:	d9 2f       	mov	r29, r25
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	10 e0       	ldi	r17, 0x00	; 0
		
		if (freq > 0) {
			_delay_ms(15);
			speaker_generate_tone(freq, dur);
		} else {
			for (int j = 0; j < (dur / 10); j++)
     e76:	0f 2e       	mov	r0, r31
     e78:	fa e0       	ldi	r31, 0x0A	; 10
     e7a:	cf 2e       	mov	r12, r31
     e7c:	d1 2c       	mov	r13, r1
     e7e:	f0 2d       	mov	r31, r0
 * Play frequency durations out from speaker
 */
void util_music_play(const int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
		int freq = pgm_read_word(&(music[i][FREQUENCY]));
     e80:	fe 01       	movw	r30, r28
     e82:	65 91       	lpm	r22, Z+
     e84:	74 91       	lpm	r23, Z
		int dur = pgm_read_word(&(music[i][DURATION]));
     e86:	fe 01       	movw	r30, r28
     e88:	32 96       	adiw	r30, 0x02	; 2
     e8a:	25 91       	lpm	r18, Z+
     e8c:	34 91       	lpm	r19, Z
     e8e:	82 2f       	mov	r24, r18
     e90:	93 2f       	mov	r25, r19
		
		if (freq > 0) {
     e92:	16 16       	cp	r1, r22
     e94:	17 06       	cpc	r1, r23
     e96:	34 f0       	brlt	.+12     	; 0xea4 <util_music_play+0x50>
			_delay_ms(15);
			speaker_generate_tone(freq, dur);
		} else {
			for (int j = 0; j < (dur / 10); j++)
     e98:	b6 01       	movw	r22, r12
     e9a:	83 d0       	rcall	.+262    	; 0xfa2 <__divmodhi4>
     e9c:	16 16       	cp	r1, r22
     e9e:	17 06       	cpc	r1, r23
     ea0:	8c f0       	brlt	.+34     	; 0xec4 <util_music_play+0x70>
     ea2:	1b c0       	rjmp	.+54     	; 0xeda <util_music_play+0x86>
     ea4:	83 ed       	ldi	r24, 0xD3	; 211
     ea6:	90 e3       	ldi	r25, 0x30	; 48
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <util_music_play+0x54>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <util_music_play+0x5a>
     eae:	00 00       	nop
		int freq = pgm_read_word(&(music[i][FREQUENCY]));
		int dur = pgm_read_word(&(music[i][DURATION]));
		
		if (freq > 0) {
			_delay_ms(15);
			speaker_generate_tone(freq, dur);
     eb0:	03 2e       	mov	r0, r19
     eb2:	00 0c       	add	r0, r0
     eb4:	44 0b       	sbc	r20, r20
     eb6:	55 0b       	sbc	r21, r21
     eb8:	07 2e       	mov	r0, r23
     eba:	00 0c       	add	r0, r0
     ebc:	88 0b       	sbc	r24, r24
     ebe:	99 0b       	sbc	r25, r25
     ec0:	41 df       	rcall	.-382    	; 0xd44 <speaker_generate_tone>
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <util_music_play+0x86>
		} else {
			for (int j = 0; j < (dur / 10); j++)
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	ed e8       	ldi	r30, 0x8D	; 141
     eca:	f0 e2       	ldi	r31, 0x20	; 32
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <util_music_play+0x78>
     ed0:	00 00       	nop
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	86 17       	cp	r24, r22
     ed6:	97 07       	cpc	r25, r23
     ed8:	b9 f7       	brne	.-18     	; 0xec8 <util_music_play+0x74>
/*
 * Play frequency durations out from speaker
 */
void util_music_play(const int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
     eda:	0f 5f       	subi	r16, 0xFF	; 255
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	24 96       	adiw	r28, 0x04	; 4
     ee0:	e0 16       	cp	r14, r16
     ee2:	f1 06       	cpc	r15, r17
     ee4:	69 f6       	brne	.-102    	; 0xe80 <util_music_play+0x2c>
		} else {
			for (int j = 0; j < (dur / 10); j++)
			_delay_ms(10);
		}
	}
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	08 95       	ret

00000ef8 <util_button_to_blinker>:
/*
 * Convert button to it's blinker
 */
int util_button_to_blinker(int button)
{
	switch (button) {
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	91 05       	cpc	r25, r1
     efc:	41 f0       	breq	.+16     	; 0xf0e <util_button_to_blinker+0x16>
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	91 05       	cpc	r25, r1
     f02:	41 f0       	breq	.+16     	; 0xf14 <util_button_to_blinker+0x1c>
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	49 f4       	brne	.+18     	; 0xf1a <util_button_to_blinker+0x22>
		case BUTTON_GREEN:
			return BLINKER_GREEN;
		case BUTTON_ORANGE:
			return BLINKER_ORANGE;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	08 95       	ret
		case BUTTON_YELLOW:
			return BLINKER_YELLOW;
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	08 95       	ret
		case BUTTON_RED:
			return BLINKER_RED;
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	08 95       	ret
 */
int util_button_to_blinker(int button)
{
	switch (button) {
		case BUTTON_GREEN:
			return BLINKER_GREEN;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
		case BUTTON_RED:
			return BLINKER_RED;
	}
	
	return 0;
}
     f1e:	08 95       	ret

00000f20 <util_led_intro>:

/*
 * Blink all score LEDs three times
 */
void util_led_intro()
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	c3 e0       	ldi	r28, 0x03	; 3
     f26:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 3; i++) {
		led_counter_set(15);
     f28:	8f e0       	ldi	r24, 0x0F	; 15
     f2a:	2e de       	rcall	.-932    	; 0xb88 <led_counter_set>
     f2c:	2f e7       	ldi	r18, 0x7F	; 127
     f2e:	8a e1       	ldi	r24, 0x1A	; 26
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	80 40       	sbci	r24, 0x00	; 0
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <util_led_intro+0x12>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <util_led_intro+0x1c>
     f3c:	00 00       	nop
		_delay_ms(600);
		led_counter_set(0);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	23 de       	rcall	.-954    	; 0xb88 <led_counter_set>
     f42:	2f e7       	ldi	r18, 0x7F	; 127
     f44:	8a e1       	ldi	r24, 0x1A	; 26
     f46:	96 e0       	ldi	r25, 0x06	; 6
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	80 40       	sbci	r24, 0x00	; 0
     f4c:	90 40       	sbci	r25, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <util_led_intro+0x28>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <util_led_intro+0x32>
     f52:	00 00       	nop
     f54:	21 97       	sbiw	r28, 0x01	; 1
/*
 * Blink all score LEDs three times
 */
void util_led_intro()
{
	for (int i = 0; i < 3; i++) {
     f56:	41 f7       	brne	.-48     	; 0xf28 <util_led_intro+0x8>
		led_counter_set(15);
		_delay_ms(600);
		led_counter_set(0);
		_delay_ms(600);
	}
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <util_led_sequence_end>:
/*
 * Blink all blinker LEDs
 */
void util_led_sequence_end()
{
	led_blinker_turn_on(BLINKER_GREEN);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	37 de       	rcall	.-914    	; 0xbd2 <led_blinker_turn_on>
	led_blinker_turn_on(BLINKER_RED);
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	34 de       	rcall	.-920    	; 0xbd2 <led_blinker_turn_on>
	led_blinker_turn_on(BLINKER_YELLOW);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	31 de       	rcall	.-926    	; 0xbd2 <led_blinker_turn_on>
	led_blinker_turn_on(BLINKER_ORANGE);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	2e de       	rcall	.-932    	; 0xbd2 <led_blinker_turn_on>
     f76:	2f e3       	ldi	r18, 0x3F	; 63
     f78:	8d e0       	ldi	r24, 0x0D	; 13
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <util_led_sequence_end+0x1e>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <util_led_sequence_end+0x28>
     f86:	00 00       	nop

	_delay_ms(300);

	led_blinker_turn_off(BLINKER_GREEN);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	3f de       	rcall	.-898    	; 0xc0c <led_blinker_turn_off>
	led_blinker_turn_off(BLINKER_RED);
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	3c de       	rcall	.-904    	; 0xc0c <led_blinker_turn_off>
	led_blinker_turn_off(BLINKER_YELLOW);
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	39 de       	rcall	.-910    	; 0xc0c <led_blinker_turn_off>
	led_blinker_turn_off(BLINKER_ORANGE);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	36 de       	rcall	.-916    	; 0xc0c <led_blinker_turn_off>
     fa0:	08 95       	ret

00000fa2 <__divmodhi4>:
     fa2:	97 fb       	bst	r25, 7
     fa4:	07 2e       	mov	r0, r23
     fa6:	16 f4       	brtc	.+4      	; 0xfac <__divmodhi4+0xa>
     fa8:	00 94       	com	r0
     faa:	06 d0       	rcall	.+12     	; 0xfb8 <__divmodhi4_neg1>
     fac:	77 fd       	sbrc	r23, 7
     fae:	08 d0       	rcall	.+16     	; 0xfc0 <__divmodhi4_neg2>
     fb0:	31 d0       	rcall	.+98     	; 0x1014 <__udivmodhi4>
     fb2:	07 fc       	sbrc	r0, 7
     fb4:	05 d0       	rcall	.+10     	; 0xfc0 <__divmodhi4_neg2>
     fb6:	3e f4       	brtc	.+14     	; 0xfc6 <__divmodhi4_exit>

00000fb8 <__divmodhi4_neg1>:
     fb8:	90 95       	com	r25
     fba:	81 95       	neg	r24
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__divmodhi4_neg2>:
     fc0:	70 95       	com	r23
     fc2:	61 95       	neg	r22
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fc6 <__divmodhi4_exit>:
     fc6:	08 95       	ret

00000fc8 <__divmodsi4>:
     fc8:	05 2e       	mov	r0, r21
     fca:	97 fb       	bst	r25, 7
     fcc:	16 f4       	brtc	.+4      	; 0xfd2 <__divmodsi4+0xa>
     fce:	00 94       	com	r0
     fd0:	0f d0       	rcall	.+30     	; 0xff0 <__negsi2>
     fd2:	57 fd       	sbrc	r21, 7
     fd4:	05 d0       	rcall	.+10     	; 0xfe0 <__divmodsi4_neg2>
     fd6:	32 d0       	rcall	.+100    	; 0x103c <__udivmodsi4>
     fd8:	07 fc       	sbrc	r0, 7
     fda:	02 d0       	rcall	.+4      	; 0xfe0 <__divmodsi4_neg2>
     fdc:	46 f4       	brtc	.+16     	; 0xfee <__divmodsi4_exit>
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <__negsi2>

00000fe0 <__divmodsi4_neg2>:
     fe0:	50 95       	com	r21
     fe2:	40 95       	com	r20
     fe4:	30 95       	com	r19
     fe6:	21 95       	neg	r18
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	4f 4f       	sbci	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255

00000fee <__divmodsi4_exit>:
     fee:	08 95       	ret

00000ff0 <__negsi2>:
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__muluhisi3>:
    1000:	3f d0       	rcall	.+126    	; 0x1080 <__umulhisi3>
    1002:	a5 9f       	mul	r26, r21
    1004:	90 0d       	add	r25, r0
    1006:	b4 9f       	mul	r27, r20
    1008:	90 0d       	add	r25, r0
    100a:	a4 9f       	mul	r26, r20
    100c:	80 0d       	add	r24, r0
    100e:	91 1d       	adc	r25, r1
    1010:	11 24       	eor	r1, r1
    1012:	08 95       	ret

00001014 <__udivmodhi4>:
    1014:	aa 1b       	sub	r26, r26
    1016:	bb 1b       	sub	r27, r27
    1018:	51 e1       	ldi	r21, 0x11	; 17
    101a:	07 c0       	rjmp	.+14     	; 0x102a <__udivmodhi4_ep>

0000101c <__udivmodhi4_loop>:
    101c:	aa 1f       	adc	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	a6 17       	cp	r26, r22
    1022:	b7 07       	cpc	r27, r23
    1024:	10 f0       	brcs	.+4      	; 0x102a <__udivmodhi4_ep>
    1026:	a6 1b       	sub	r26, r22
    1028:	b7 0b       	sbc	r27, r23

0000102a <__udivmodhi4_ep>:
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	5a 95       	dec	r21
    1030:	a9 f7       	brne	.-22     	; 0x101c <__udivmodhi4_loop>
    1032:	80 95       	com	r24
    1034:	90 95       	com	r25
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	08 95       	ret

0000103c <__udivmodsi4>:
    103c:	a1 e2       	ldi	r26, 0x21	; 33
    103e:	1a 2e       	mov	r1, r26
    1040:	aa 1b       	sub	r26, r26
    1042:	bb 1b       	sub	r27, r27
    1044:	fd 01       	movw	r30, r26
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <__udivmodsi4_ep>

00001048 <__udivmodsi4_loop>:
    1048:	aa 1f       	adc	r26, r26
    104a:	bb 1f       	adc	r27, r27
    104c:	ee 1f       	adc	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	a2 17       	cp	r26, r18
    1052:	b3 07       	cpc	r27, r19
    1054:	e4 07       	cpc	r30, r20
    1056:	f5 07       	cpc	r31, r21
    1058:	20 f0       	brcs	.+8      	; 0x1062 <__udivmodsi4_ep>
    105a:	a2 1b       	sub	r26, r18
    105c:	b3 0b       	sbc	r27, r19
    105e:	e4 0b       	sbc	r30, r20
    1060:	f5 0b       	sbc	r31, r21

00001062 <__udivmodsi4_ep>:
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	1a 94       	dec	r1
    106c:	69 f7       	brne	.-38     	; 0x1048 <__udivmodsi4_loop>
    106e:	60 95       	com	r22
    1070:	70 95       	com	r23
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	bd 01       	movw	r22, r26
    107c:	cf 01       	movw	r24, r30
    107e:	08 95       	ret

00001080 <__umulhisi3>:
    1080:	a2 9f       	mul	r26, r18
    1082:	b0 01       	movw	r22, r0
    1084:	b3 9f       	mul	r27, r19
    1086:	c0 01       	movw	r24, r0
    1088:	a3 9f       	mul	r26, r19
    108a:	01 d0       	rcall	.+2      	; 0x108e <__umulhisi3+0xe>
    108c:	b2 9f       	mul	r27, r18
    108e:	70 0d       	add	r23, r0
    1090:	81 1d       	adc	r24, r1
    1092:	11 24       	eor	r1, r1
    1094:	91 1d       	adc	r25, r1
    1096:	08 95       	ret

00001098 <do_rand>:
    1098:	8f 92       	push	r8
    109a:	9f 92       	push	r9
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ec 01       	movw	r28, r24
    10ae:	68 81       	ld	r22, Y
    10b0:	79 81       	ldd	r23, Y+1	; 0x01
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	9b 81       	ldd	r25, Y+3	; 0x03
    10b6:	61 15       	cp	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	81 05       	cpc	r24, r1
    10bc:	91 05       	cpc	r25, r1
    10be:	21 f4       	brne	.+8      	; 0x10c8 <do_rand+0x30>
    10c0:	64 e2       	ldi	r22, 0x24	; 36
    10c2:	79 ed       	ldi	r23, 0xD9	; 217
    10c4:	8b e5       	ldi	r24, 0x5B	; 91
    10c6:	97 e0       	ldi	r25, 0x07	; 7
    10c8:	2d e1       	ldi	r18, 0x1D	; 29
    10ca:	33 ef       	ldi	r19, 0xF3	; 243
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	7b df       	rcall	.-266    	; 0xfc8 <__divmodsi4>
    10d2:	49 01       	movw	r8, r18
    10d4:	5a 01       	movw	r10, r20
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	a7 ea       	ldi	r26, 0xA7	; 167
    10dc:	b1 e4       	ldi	r27, 0x41	; 65
    10de:	90 df       	rcall	.-224    	; 0x1000 <__muluhisi3>
    10e0:	6b 01       	movw	r12, r22
    10e2:	7c 01       	movw	r14, r24
    10e4:	ac ee       	ldi	r26, 0xEC	; 236
    10e6:	b4 ef       	ldi	r27, 0xF4	; 244
    10e8:	a5 01       	movw	r20, r10
    10ea:	94 01       	movw	r18, r8
    10ec:	2e d0       	rcall	.+92     	; 0x114a <__mulohisi3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	8c 0d       	add	r24, r12
    10f4:	9d 1d       	adc	r25, r13
    10f6:	ae 1d       	adc	r26, r14
    10f8:	bf 1d       	adc	r27, r15
    10fa:	b7 ff       	sbrs	r27, 7
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <do_rand+0x6c>
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	a1 09       	sbc	r26, r1
    1102:	b0 48       	sbci	r27, 0x80	; 128
    1104:	88 83       	st	Y, r24
    1106:	99 83       	std	Y+1, r25	; 0x01
    1108:	aa 83       	std	Y+2, r26	; 0x02
    110a:	bb 83       	std	Y+3, r27	; 0x03
    110c:	9f 77       	andi	r25, 0x7F	; 127
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	08 95       	ret

00001124 <rand_r>:
    1124:	b9 df       	rcall	.-142    	; 0x1098 <do_rand>
    1126:	08 95       	ret

00001128 <rand>:
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	9e e3       	ldi	r25, 0x3E	; 62
    112c:	b5 df       	rcall	.-150    	; 0x1098 <do_rand>
    112e:	08 95       	ret

00001130 <srand>:
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
    1138:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__data_start+0x1>
    113c:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__data_start+0x2>
    1140:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__data_start+0x3>
    1144:	08 95       	ret

00001146 <__mulshisi3>:
    1146:	b7 ff       	sbrs	r27, 7
    1148:	5b cf       	rjmp	.-330    	; 0x1000 <__muluhisi3>

0000114a <__mulohisi3>:
    114a:	5a df       	rcall	.-332    	; 0x1000 <__muluhisi3>
    114c:	82 1b       	sub	r24, r18
    114e:	93 0b       	sbc	r25, r19
    1150:	08 95       	ret

00001152 <_exit>:
    1152:	f8 94       	cli

00001154 <__stop_program>:
    1154:	ff cf       	rjmp	.-2      	; 0x1154 <__stop_program>
