
L4B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00803e00  00000c3c  00000cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00803e0a  00803e0a  00000cda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032a5  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e98  00000000  00000000  0000415d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000101a  00000000  00000000  00005ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00007010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001301  00000000  00000000  000073bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e95  00000000  00000000  000086bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00009552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	60 c2       	rjmp	.+1216   	; 0x4c8 <__vector_3>
   8:	a0 c2       	rjmp	.+1344   	; 0x54a <__vector_4>
   a:	e0 c2       	rjmp	.+1472   	; 0x5cc <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	aa e0       	ldi	r26, 0x0A	; 10
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 32       	cpi	r26, 0x25	; 37
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>

00000050 <__do_copy_data>:
  50:	1e e3       	ldi	r17, 0x3E	; 62
  52:	a0 e0       	ldi	r26, 0x00	; 0
  54:	be e3       	ldi	r27, 0x3E	; 62
  56:	ec e3       	ldi	r30, 0x3C	; 60
  58:	fc e0       	ldi	r31, 0x0C	; 12
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__do_copy_data+0x10>
  5c:	05 90       	lpm	r0, Z+
  5e:	0d 92       	st	X+, r0
  60:	aa 30       	cpi	r26, 0x0A	; 10
  62:	b1 07       	cpc	r27, r17
  64:	d9 f7       	brne	.-10     	; 0x5c <__do_copy_data+0xc>
  66:	a8 d1       	rcall	.+848    	; 0x3b8 <main>
  68:	e7 c5       	rjmp	.+3022   	; 0xc38 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <game_is_running>:
/*
 * Return whether the game is running
 */
int game_is_running()
{
	return (game_running == RUNNING);
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	20 91 0a 3e 	lds	r18, 0x3E0A	; 0x803e0a <__data_end>
  74:	30 91 0b 3e 	lds	r19, 0x3E0B	; 0x803e0b <__data_end+0x1>
  78:	21 30       	cpi	r18, 0x01	; 1
  7a:	31 05       	cpc	r19, r1
  7c:	11 f0       	breq	.+4      	; 0x82 <game_is_running+0x16>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
}
  82:	08 95       	ret

00000084 <game_is_ready_to_start>:
/*
 * Return whether the game is ready to start
 */
int game_is_ready_to_start()
{
	if (starting_buttons_pressed[EASY_STARTING_BUTTON_1] 
  84:	80 91 15 3e 	lds	r24, 0x3E15	; 0x803e15 <starting_buttons_pressed+0x4>
  88:	90 91 16 3e 	lds	r25, 0x3E16	; 0x803e16 <starting_buttons_pressed+0x5>
  8c:	89 2b       	or	r24, r25
  8e:	31 f0       	breq	.+12     	; 0x9c <game_is_ready_to_start+0x18>
	    && starting_buttons_pressed[EASY_STARTING_BUTTON_2]) {
  90:	80 91 17 3e 	lds	r24, 0x3E17	; 0x803e17 <starting_buttons_pressed+0x6>
  94:	90 91 18 3e 	lds	r25, 0x3E18	; 0x803e18 <starting_buttons_pressed+0x7>
  98:	89 2b       	or	r24, r25
  9a:	79 f4       	brne	.+30     	; 0xba <game_is_ready_to_start+0x36>
		return READY_EASY;
	} else if (starting_buttons_pressed[HARD_STARTING_BUTTON_1]
  9c:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <starting_buttons_pressed>
  a0:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <starting_buttons_pressed+0x1>
  a4:	89 2b       	or	r24, r25
  a6:	61 f0       	breq	.+24     	; 0xc0 <game_is_ready_to_start+0x3c>
			   && starting_buttons_pressed[HARD_STARTING_BUTTON_2]) {
  a8:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <starting_buttons_pressed+0x2>
  ac:	90 91 14 3e 	lds	r25, 0x3E14	; 0x803e14 <starting_buttons_pressed+0x3>
  b0:	89 2b       	or	r24, r25
  b2:	49 f0       	breq	.+18     	; 0xc6 <game_is_ready_to_start+0x42>
		return READY_HARD;			   
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
 */
int game_is_ready_to_start()
{
	if (starting_buttons_pressed[EASY_STARTING_BUTTON_1] 
	    && starting_buttons_pressed[EASY_STARTING_BUTTON_2]) {
		return READY_EASY;
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret
	} else if (starting_buttons_pressed[HARD_STARTING_BUTTON_1]
			   && starting_buttons_pressed[HARD_STARTING_BUTTON_2]) {
		return READY_HARD;			   
	}
	
	return NOT_READY;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	90 e0       	ldi	r25, 0x00	; 0
}
  ca:	08 95       	ret

000000cc <game_generate_sequence>:

/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	for (int i = 0; i < len; i++)
  d4:	16 16       	cp	r1, r22
  d6:	17 06       	cpc	r1, r23
  d8:	a4 f4       	brge	.+40     	; 0x102 <game_generate_sequence+0x36>
  da:	8c 01       	movw	r16, r24
  dc:	ec 01       	movw	r28, r24
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	06 0f       	add	r16, r22
  e4:	17 1f       	adc	r17, r23
		sequence[i] = rand() % BUTTON_COUNT;
  e6:	93 d5       	rcall	.+2854   	; 0xc0e <rand>
  e8:	83 70       	andi	r24, 0x03	; 3
  ea:	90 78       	andi	r25, 0x80	; 128
  ec:	99 23       	and	r25, r25
  ee:	24 f4       	brge	.+8      	; 0xf8 <game_generate_sequence+0x2c>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	8c 6f       	ori	r24, 0xFC	; 252
  f4:	9f 6f       	ori	r25, 0xFF	; 255
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	89 93       	st	Y+, r24
  fa:	99 93       	st	Y+, r25
/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++)
  fc:	c0 17       	cp	r28, r16
  fe:	d1 07       	cpc	r29, r17
 100:	91 f7       	brne	.-28     	; 0xe6 <game_generate_sequence+0x1a>
		sequence[i] = rand() % BUTTON_COUNT;
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <game_blink_sequence>:

/*
 * Blink the sequence out to LEDs
 */
void game_blink_sequence(int *sequence, int len)
{
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
 118:	16 16       	cp	r1, r22
 11a:	17 06       	cpc	r1, r23
 11c:	1c f5       	brge	.+70     	; 0x164 <game_blink_sequence+0x58>
 11e:	7c 01       	movw	r14, r24
 120:	ec 01       	movw	r28, r24
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	e6 0e       	add	r14, r22
 128:	f7 1e       	adc	r15, r23
 12a:	8e 01       	movw	r16, r28
		led_blinker_turn_on(sequence[i]);
 12c:	89 91       	ld	r24, Y+
 12e:	99 91       	ld	r25, Y+
 130:	fa d2       	rcall	.+1524   	; 0x726 <led_blinker_turn_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f e1       	ldi	r18, 0x1F	; 31
 134:	81 ea       	ldi	r24, 0xA1	; 161
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <game_blink_sequence+0x2c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <game_blink_sequence+0x36>
 142:	00 00       	nop
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
 144:	f8 01       	movw	r30, r16
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	0a d3       	rcall	.+1556   	; 0x760 <led_blinker_turn_off>
 14c:	ff e1       	ldi	r31, 0x1F	; 31
 14e:	21 ea       	ldi	r18, 0xA1	; 161
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	f1 50       	subi	r31, 0x01	; 1
 154:	20 40       	sbci	r18, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <game_blink_sequence+0x46>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <game_blink_sequence+0x50>
 15c:	00 00       	nop
/*
 * Blink the sequence out to LEDs
 */
void game_blink_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++) {
 15e:	ce 15       	cp	r28, r14
 160:	df 05       	cpc	r29, r15
 162:	19 f7       	brne	.-58     	; 0x12a <game_blink_sequence+0x1e>
		led_blinker_turn_on(sequence[i]);
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
		_delay_ms(750);
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	08 95       	ret

00000172 <game_next_round>:
/*
 * Generate and blink out next round
 */
void game_next_round()
{
	cli();
 172:	f8 94       	cli
 174:	2a e2       	ldi	r18, 0x2A	; 42
 176:	8c e2       	ldi	r24, 0x2C	; 44
 178:	9a e0       	ldi	r25, 0x0A	; 10
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <game_next_round+0x8>
 182:	00 00       	nop
	
	_delay_ms(1000);
	
	current_round++;
 184:	60 91 0c 3e 	lds	r22, 0x3E0C	; 0x803e0c <current_round>
 188:	70 91 0d 3e 	lds	r23, 0x3E0D	; 0x803e0d <current_round+0x1>
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	60 93 0c 3e 	sts	0x3E0C, r22	; 0x803e0c <current_round>
 194:	70 93 0d 3e 	sts	0x3E0D, r23	; 0x803e0d <current_round+0x1>
	
	game_generate_sequence(blinker_sequence, current_round);
 198:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <blinker_sequence>
 19c:	90 91 1a 3e 	lds	r25, 0x3E1A	; 0x803e1a <blinker_sequence+0x1>
 1a0:	95 df       	rcall	.-214    	; 0xcc <game_generate_sequence>
	game_blink_sequence(blinker_sequence, current_round);		
 1a2:	60 91 0c 3e 	lds	r22, 0x3E0C	; 0x803e0c <current_round>
 1a6:	70 91 0d 3e 	lds	r23, 0x3E0D	; 0x803e0d <current_round+0x1>
 1aa:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <blinker_sequence>
 1ae:	90 91 1a 3e 	lds	r25, 0x3E1A	; 0x803e1a <blinker_sequence+0x1>
 1b2:	ac df       	rcall	.-168    	; 0x10c <game_blink_sequence>
	
	// maybe some sound? or disable last delay from blinking
	speaker_generate_tone(277L, 350L);
 1b4:	2e e5       	ldi	r18, 0x5E	; 94
 1b6:	31 e0       	ldi	r19, 0x01	; 1
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	65 e1       	ldi	r22, 0x15	; 21
 1be:	71 e0       	ldi	r23, 0x01	; 1
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	f0 d2       	rcall	.+1504   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(369L, 350L);
 1c6:	2e e5       	ldi	r18, 0x5E	; 94
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	61 e7       	ldi	r22, 0x71	; 113
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	e7 d2       	rcall	.+1486   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(415L, 350L);
 1d8:	2e e5       	ldi	r18, 0x5E	; 94
 1da:	31 e0       	ldi	r19, 0x01	; 1
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	6f e9       	ldi	r22, 0x9F	; 159
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	de d2       	rcall	.+1468   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(440L, 350L);
 1ea:	2e e5       	ldi	r18, 0x5E	; 94
 1ec:	31 e0       	ldi	r19, 0x01	; 1
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	68 eb       	ldi	r22, 0xB8	; 184
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	d5 d2       	rcall	.+1450   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(415L, 350L);
 1fc:	2e e5       	ldi	r18, 0x5E	; 94
 1fe:	31 e0       	ldi	r19, 0x01	; 1
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	6f e9       	ldi	r22, 0x9F	; 159
 206:	71 e0       	ldi	r23, 0x01	; 1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	cc d2       	rcall	.+1432   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(369L, 350L);
 20e:	2e e5       	ldi	r18, 0x5E	; 94
 210:	31 e0       	ldi	r19, 0x01	; 1
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	61 e7       	ldi	r22, 0x71	; 113
 218:	71 e0       	ldi	r23, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	c3 d2       	rcall	.+1414   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(293L, 800L);
 220:	20 e2       	ldi	r18, 0x20	; 32
 222:	33 e0       	ldi	r19, 0x03	; 3
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	65 e2       	ldi	r22, 0x25	; 37
 22a:	71 e0       	ldi	r23, 0x01	; 1
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	ba d2       	rcall	.+1396   	; 0x7a6 <speaker_generate_tone>
 232:	25 e7       	ldi	r18, 0x75	; 117
 234:	8f e8       	ldi	r24, 0x8F	; 143
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <game_next_round+0xc6>
	_delay_ms(350);
	speaker_generate_tone(293L, 350L);
 240:	2e e5       	ldi	r18, 0x5E	; 94
 242:	31 e0       	ldi	r19, 0x01	; 1
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	65 e2       	ldi	r22, 0x25	; 37
 24a:	71 e0       	ldi	r23, 0x01	; 1
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	aa d2       	rcall	.+1364   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(369L, 350L);
 252:	2e e5       	ldi	r18, 0x5E	; 94
 254:	31 e0       	ldi	r19, 0x01	; 1
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	61 e7       	ldi	r22, 0x71	; 113
 25c:	71 e0       	ldi	r23, 0x01	; 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	a1 d2       	rcall	.+1346   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(415L, 350L);
 264:	2e e5       	ldi	r18, 0x5E	; 94
 266:	31 e0       	ldi	r19, 0x01	; 1
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	6f e9       	ldi	r22, 0x9F	; 159
 26e:	71 e0       	ldi	r23, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	98 d2       	rcall	.+1328   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(440L, 350L);
 276:	2e e5       	ldi	r18, 0x5E	; 94
 278:	31 e0       	ldi	r19, 0x01	; 1
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	68 eb       	ldi	r22, 0xB8	; 184
 280:	71 e0       	ldi	r23, 0x01	; 1
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	8f d2       	rcall	.+1310   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(415L, 350L);
 288:	2e e5       	ldi	r18, 0x5E	; 94
 28a:	31 e0       	ldi	r19, 0x01	; 1
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	6f e9       	ldi	r22, 0x9F	; 159
 292:	71 e0       	ldi	r23, 0x01	; 1
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	86 d2       	rcall	.+1292   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(369L, 350L);
 29a:	2e e5       	ldi	r18, 0x5E	; 94
 29c:	31 e0       	ldi	r19, 0x01	; 1
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	61 e7       	ldi	r22, 0x71	; 113
 2a4:	71 e0       	ldi	r23, 0x01	; 1
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	7d d2       	rcall	.+1274   	; 0x7a6 <speaker_generate_tone>
	speaker_generate_tone(277L, 800L);
 2ac:	20 e2       	ldi	r18, 0x20	; 32
 2ae:	33 e0       	ldi	r19, 0x03	; 3
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	65 e1       	ldi	r22, 0x15	; 21
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	74 d2       	rcall	.+1256   	; 0x7a6 <speaker_generate_tone>

	
	sei();
 2be:	78 94       	sei
 2c0:	08 95       	ret

000002c2 <game_start>:

/*
 * Start a new game
 */
void game_start(int start_status)
{
 2c2:	ec 01       	movw	r28, r24
	/* Set seed for rand session */
	srand(eeprom_get_next_seed());
 2c4:	d1 d1       	rcall	.+930    	; 0x668 <eeprom_get_next_seed>
 2c6:	a7 d4       	rcall	.+2382   	; 0xc16 <srand>
 2c8:	03 e0       	ldi	r16, 0x03	; 3
 2ca:	10 e0       	ldi	r17, 0x00	; 0
	
	/* Intro score blinking */
	for (int i = 0; i < 3; i++) {
		led_counter_set(15);
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	06 d2       	rcall	.+1036   	; 0x6dc <led_counter_set>
 2d0:	2f e7       	ldi	r18, 0x7F	; 127
 2d2:	8a e1       	ldi	r24, 0x1A	; 26
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <game_start+0x14>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <game_start+0x1e>
 2e0:	00 00       	nop
		_delay_ms(600);
		led_counter_set(0);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	fb d1       	rcall	.+1014   	; 0x6dc <led_counter_set>
 2e6:	2f e7       	ldi	r18, 0x7F	; 127
 2e8:	8a e1       	ldi	r24, 0x1A	; 26
 2ea:	96 e0       	ldi	r25, 0x06	; 6
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <game_start+0x2a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <game_start+0x34>
 2f6:	00 00       	nop
 2f8:	01 50       	subi	r16, 0x01	; 1
 2fa:	11 09       	sbc	r17, r1
{
	/* Set seed for rand session */
	srand(eeprom_get_next_seed());
	
	/* Intro score blinking */
	for (int i = 0; i < 3; i++) {
 2fc:	39 f7       	brne	.-50     	; 0x2cc <game_start+0xa>
		_delay_ms(600);
		led_counter_set(0);
		_delay_ms(600);
	}
		
	score = 0;
 2fe:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <score>
	current_round = 0;
 302:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <current_round>
 306:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <current_round+0x1>
	
	game_difficulty = start_status;
 30a:	c0 93 1b 3e 	sts	0x3E1B, r28	; 0x803e1b <game_difficulty>
 30e:	d0 93 1c 3e 	sts	0x3E1C, r29	; 0x803e1c <game_difficulty+0x1>

	switch (game_difficulty) {
 312:	20 97       	sbiw	r28, 0x00	; 0
 314:	19 f0       	breq	.+6      	; 0x31c <game_start+0x5a>
 316:	21 97       	sbiw	r28, 0x01	; 1
 318:	41 f0       	breq	.+16     	; 0x32a <game_start+0x68>
 31a:	0d c0       	rjmp	.+26     	; 0x336 <game_start+0x74>
		case EASY:
			round_count = EASY_ROUND_COUNT;
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <round_count>
 324:	90 93 10 3e 	sts	0x3E10, r25	; 0x803e10 <round_count+0x1>
			break;
 328:	06 c0       	rjmp	.+12     	; 0x336 <game_start+0x74>
		case HARD:
			round_count = HARD_ROUND_COUNT;
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <round_count>
 332:	90 93 10 3e 	sts	0x3E10, r25	; 0x803e10 <round_count+0x1>
			break;			
	}
	
	free(blinker_sequence);
 336:	80 91 19 3e 	lds	r24, 0x3E19	; 0x803e19 <blinker_sequence>
 33a:	90 91 1a 3e 	lds	r25, 0x3E1A	; 0x803e1a <blinker_sequence+0x1>
 33e:	96 d3       	rcall	.+1836   	; 0xa6c <free>
	blinker_sequence = (int *) malloc(round_count);
 340:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <round_count>
 344:	90 91 10 3e 	lds	r25, 0x3E10	; 0x803e10 <round_count+0x1>
 348:	f9 d2       	rcall	.+1522   	; 0x93c <malloc>
 34a:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <blinker_sequence>
 34e:	90 93 1a 3e 	sts	0x3E1A, r25	; 0x803e1a <blinker_sequence+0x1>
	
	led_counter_set(score);
 352:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <score>
 356:	c2 d1       	rcall	.+900    	; 0x6dc <led_counter_set>
	
	game_running = RUNNING;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <__data_end>
 360:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <__data_end+0x1>
	
	game_next_round();
 364:	06 df       	rcall	.-500    	; 0x172 <game_next_round>
 366:	ff cf       	rjmp	.-2      	; 0x366 <game_start+0xa4>

00000368 <button_pressed>:
/*
 * Automatically called handler after button pressing
 */
void button_pressed(int button)
{
	if (!game_is_running()) {
 368:	20 91 0a 3e 	lds	r18, 0x3E0A	; 0x803e0a <__data_end>
 36c:	30 91 0b 3e 	lds	r19, 0x3E0B	; 0x803e0b <__data_end+0x1>
 370:	21 30       	cpi	r18, 0x01	; 1
 372:	31 05       	cpc	r19, r1
 374:	49 f0       	breq	.+18     	; 0x388 <button_pressed+0x20>
		starting_buttons_pressed[button] = 1;		
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	fc 01       	movw	r30, r24
 37c:	ef 5e       	subi	r30, 0xEF	; 239
 37e:	f1 4c       	sbci	r31, 0xC1	; 193
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	80 83       	st	Z, r24
 386:	91 83       	std	Z+1, r25	; 0x01
 388:	08 95       	ret

0000038a <button_released>:
/*
 * Automatically called handler after button releasing
 */
void button_released(int button)
{
	if (!game_is_running()) {
 38a:	20 91 0a 3e 	lds	r18, 0x3E0A	; 0x803e0a <__data_end>
 38e:	30 91 0b 3e 	lds	r19, 0x3E0B	; 0x803e0b <__data_end+0x1>
 392:	21 30       	cpi	r18, 0x01	; 1
 394:	31 05       	cpc	r19, r1
 396:	39 f0       	breq	.+14     	; 0x3a6 <button_released+0x1c>
		starting_buttons_pressed[button] = 0;
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	fc 01       	movw	r30, r24
 39e:	ef 5e       	subi	r30, 0xEF	; 239
 3a0:	f1 4c       	sbci	r31, 0xC1	; 193
 3a2:	10 82       	st	Z, r1
 3a4:	11 82       	std	Z+1, r1	; 0x01
 3a6:	08 95       	ret

000003a8 <setup>:
/*
 * Setup hardware peripherals
 */
void setup()
{
	led_init();
 3a8:	76 d1       	rcall	.+748    	; 0x696 <led_init>
	speaker_init();
 3aa:	f7 d1       	rcall	.+1006   	; 0x79a <speaker_init>
	button_init(&button_pressed, &button_released);
 3ac:	65 ec       	ldi	r22, 0xC5	; 197
 3ae:	71 e0       	ldi	r23, 0x01	; 1
 3b0:	84 eb       	ldi	r24, 0xB4	; 180
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	19 d0       	rcall	.+50     	; 0x3e8 <button_init>
 3b6:	08 95       	ret

000003b8 <main>:
/*
 * Main function called upon reset
 */
int main(void)
{
	setup();
 3b8:	f7 df       	rcall	.-18     	; 0x3a8 <setup>

	while (1) {	
		if(game_is_running() == NOT_RUNNING) {
 3ba:	58 de       	rcall	.-848    	; 0x6c <game_is_running>
 3bc:	89 2b       	or	r24, r25
 3be:	e9 f7       	brne	.-6      	; 0x3ba <main+0x2>
			int start_status = game_is_ready_to_start();
 3c0:	61 de       	rcall	.-830    	; 0x84 <game_is_ready_to_start>
 3c2:	ec 01       	movw	r28, r24
			
			if (start_status == NOT_READY)
 3c4:	02 97       	sbiw	r24, 0x02	; 2
 3c6:	c9 f3       	breq	.-14     	; 0x3ba <main+0x2>
 3c8:	24 e5       	ldi	r18, 0x54	; 84
 3ca:	88 e5       	ldi	r24, 0x58	; 88
 3cc:	94 e1       	ldi	r25, 0x14	; 20
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x16>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x20>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x22>
				continue;
				
			_delay_ms(BUTTON_START_TIMEOUT);
			
			if (start_status == game_is_ready_to_start())
 3da:	54 de       	rcall	.-856    	; 0x84 <game_is_ready_to_start>
 3dc:	c8 17       	cp	r28, r24
 3de:	d9 07       	cpc	r29, r25
 3e0:	61 f7       	brne	.-40     	; 0x3ba <main+0x2>
				game_start(start_status);
 3e2:	ce 01       	movw	r24, r28
 3e4:	6e df       	rcall	.-292    	; 0x2c2 <game_start>
 3e6:	e9 cf       	rjmp	.-46     	; 0x3ba <main+0x2>

000003e8 <button_init>:
 */
void button_init(void (*button_event_pressed_handler)(int),
				 void (*button_event_released_handler)(int))
{
	/* Set as input pin */
	BUTTON_GREEN_PORT.DIRCLR = BUTTON_GREEN_PIN;
 3e8:	a0 e4       	ldi	r26, 0x40	; 64
 3ea:	b4 e0       	ldi	r27, 0x04	; 4
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	12 96       	adiw	r26, 0x02	; 2
 3f0:	2c 93       	st	X, r18
 3f2:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_ORANGE_PORT.DIRCLR = BUTTON_ORANGE_PIN;
 3f4:	e0 e2       	ldi	r30, 0x20	; 32
 3f6:	f4 e0       	ldi	r31, 0x04	; 4
 3f8:	24 e0       	ldi	r18, 0x04	; 4
 3fa:	22 83       	std	Z+2, r18	; 0x02
	BUTTON_YELLOW_PORT.DIRCLR = BUTTON_YELLOW_PIN;
 3fc:	22 e0       	ldi	r18, 0x02	; 2
 3fe:	12 96       	adiw	r26, 0x02	; 2
 400:	2c 93       	st	X, r18
 402:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_RED_PORT.DIRCLR = BUTTON_RED_PIN;
 404:	28 e0       	ldi	r18, 0x08	; 8
 406:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable pull-up and interrupt */
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 408:	29 e0       	ldi	r18, 0x09	; 9
 40a:	50 96       	adiw	r26, 0x10	; 16
 40c:	2c 93       	st	X, r18
 40e:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 410:	22 8b       	std	Z+18, r18	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 412:	51 96       	adiw	r26, 0x11	; 17
 414:	2c 93       	st	X, r18
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 416:	23 8b       	std	Z+19, r18	; 0x13

	button_pressed_handler = button_event_pressed_handler;
 418:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <button_pressed_handler>
 41c:	90 93 20 3e 	sts	0x3E20, r25	; 0x803e20 <button_pressed_handler+0x1>
	button_released_handler = button_event_released_handler;
 420:	60 93 1d 3e 	sts	0x3E1D, r22	; 0x803e1d <button_released_handler>
 424:	70 93 1e 3e 	sts	0x3E1E, r23	; 0x803e1e <button_released_handler+0x1>
	
	/* Enable global interrupts */
	sei();
 428:	78 94       	sei
 42a:	08 95       	ret

0000042c <button_is_pressed>:
/*
 * Return 1 if 'button' is pressed or 0 if released
 */
int button_is_pressed(int button)
{
	switch (button) {
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	91 05       	cpc	r25, r1
 430:	89 f0       	breq	.+34     	; 0x454 <button_is_pressed+0x28>
 432:	1c f4       	brge	.+6      	; 0x43a <button_is_pressed+0xe>
 434:	89 2b       	or	r24, r25
 436:	39 f0       	breq	.+14     	; 0x446 <button_is_pressed+0x1a>
 438:	28 c0       	rjmp	.+80     	; 0x48a <button_is_pressed+0x5e>
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	91 05       	cpc	r25, r1
 43e:	99 f0       	breq	.+38     	; 0x466 <button_is_pressed+0x3a>
 440:	03 97       	sbiw	r24, 0x03	; 3
 442:	c9 f0       	breq	.+50     	; 0x476 <button_is_pressed+0x4a>
 444:	22 c0       	rjmp	.+68     	; 0x48a <button_is_pressed+0x5e>
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
 446:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
				return 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	89 27       	eor	r24, r25
 44e:	81 70       	andi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	08 95       	ret
			break;
		}
		case BUTTON_ORANGE: {
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
 454:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
 458:	86 95       	lsr	r24
 45a:	86 95       	lsr	r24
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	89 27       	eor	r24, r25
 460:	81 70       	andi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	08 95       	ret
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
				return 1;
			break;
		}
		case BUTTON_YELLOW: {
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
 466:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
 46a:	86 95       	lsr	r24
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	89 27       	eor	r24, r25
 470:	81 70       	andi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	08 95       	ret
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
				return 1;
			break;
		}
		case BUTTON_RED: {
			if (!(BUTTON_RED_PORT.IN & BUTTON_RED_PIN))
 476:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
 47a:	86 95       	lsr	r24
 47c:	86 95       	lsr	r24
 47e:	86 95       	lsr	r24
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	89 27       	eor	r24, r25
 484:	81 70       	andi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	08 95       	ret
				return 1;
			break;
		}
	}
		
	return 0;
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
}
 48e:	08 95       	ret

00000490 <button_call_handler>:

/*
 * Call handler for button event
 */
void button_call_handler(int button)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
 496:	8d e8       	ldi	r24, 0x8D	; 141
 498:	90 e2       	ldi	r25, 0x20	; 32
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <button_call_handler+0xa>
 49e:	00 00       	nop
	/* Button debounce */
	_delay_ms(BUTTON_BOUNCE_MS);
	
	if (button_is_pressed(button)) {
 4a0:	ce 01       	movw	r24, r28
 4a2:	c4 df       	rcall	.-120    	; 0x42c <button_is_pressed>
 4a4:	89 2b       	or	r24, r25
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <button_call_handler+0x26>
		(*button_pressed_handler)(button);
 4a8:	e0 91 1f 3e 	lds	r30, 0x3E1F	; 0x803e1f <button_pressed_handler>
 4ac:	f0 91 20 3e 	lds	r31, 0x3E20	; 0x803e20 <button_pressed_handler+0x1>
 4b0:	ce 01       	movw	r24, r28
 4b2:	09 95       	icall
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <button_call_handler+0x32>
	} else {
		(*button_released_handler)(button);
 4b6:	e0 91 1d 3e 	lds	r30, 0x3E1D	; 0x803e1d <button_released_handler>
 4ba:	f0 91 1e 3e 	lds	r31, 0x3E1E	; 0x803e1e <button_released_handler+0x1>
 4be:	ce 01       	movw	r24, r28
 4c0:	09 95       	icall
	}
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <__vector_3>:

/*
 * Interrupt service routine for PORTA
 */
ISR(PORTA_PORT_vect)
{
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	2f 93       	push	r18
 4d4:	3f 93       	push	r19
 4d6:	4f 93       	push	r20
 4d8:	5f 93       	push	r21
 4da:	6f 93       	push	r22
 4dc:	7f 93       	push	r23
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_GREEN_PIN) {
 4ea:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 4ee:	80 ff       	sbrs	r24, 0
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <__vector_3+0x30>
		button_call_handler(BUTTON_GREEN);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	cc df       	rcall	.-104    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_ORANGE_PIN) {
 4f8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 4fc:	82 ff       	sbrs	r24, 2
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <__vector_3+0x3e>
		button_call_handler(BUTTON_ORANGE);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	c5 df       	rcall	.-118    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_YELLOW_PIN) {
 506:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 50a:	81 ff       	sbrs	r24, 1
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__vector_3+0x4c>
		button_call_handler(BUTTON_YELLOW);
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	be df       	rcall	.-132    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_RED_PIN) {
 514:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 518:	83 ff       	sbrs	r24, 3
 51a:	03 c0       	rjmp	.+6      	; 0x522 <__vector_3+0x5a>
		button_call_handler(BUTTON_RED);
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	b7 df       	rcall	.-146    	; 0x490 <button_call_handler>
	}
	#endif
	
	/* Clear interrupt flag, so the next one can occur */
	PORTA.INTFLAGS = 0xff;
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_4>:

/*
 * Interrupt service routine for PORTB 
 */
ISR(PORTB_PORT_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_GREEN_PIN) {
 56c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 570:	80 ff       	sbrs	r24, 0
 572:	03 c0       	rjmp	.+6      	; 0x57a <__vector_4+0x30>
		button_call_handler(BUTTON_GREEN);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	8b df       	rcall	.-234    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_ORANGE_PIN) {
 57a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 57e:	82 ff       	sbrs	r24, 2
 580:	03 c0       	rjmp	.+6      	; 0x588 <__vector_4+0x3e>
		button_call_handler(BUTTON_ORANGE);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	84 df       	rcall	.-248    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_YELLOW_PIN) {
 588:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 58c:	81 ff       	sbrs	r24, 1
 58e:	03 c0       	rjmp	.+6      	; 0x596 <__vector_4+0x4c>
		button_call_handler(BUTTON_YELLOW);
 590:	82 e0       	ldi	r24, 0x02	; 2
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	7d df       	rcall	.-262    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_RED_PIN) {
 596:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 59a:	83 ff       	sbrs	r24, 3
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__vector_4+0x5a>
		button_call_handler(BUTTON_RED);
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	76 df       	rcall	.-276    	; 0x490 <button_call_handler>
	}
	#endif	
	
	/* Clear interrupt flag, so the next one can occur */
	PORTB.INTFLAGS = 0xff;
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_5>:

/*
 * Interrupt service routine for PORTC
 */
ISR(PORTC_PORT_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_GREEN_PIN) {
 5ee:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 5f2:	80 ff       	sbrs	r24, 0
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <__vector_5+0x30>
		button_call_handler(BUTTON_GREEN);
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	4a df       	rcall	.-364    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_ORANGE_PIN) {
 5fc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 600:	82 ff       	sbrs	r24, 2
 602:	03 c0       	rjmp	.+6      	; 0x60a <__vector_5+0x3e>
		button_call_handler(BUTTON_ORANGE);
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	43 df       	rcall	.-378    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_YELLOW_PIN) {
 60a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 60e:	81 ff       	sbrs	r24, 1
 610:	03 c0       	rjmp	.+6      	; 0x618 <__vector_5+0x4c>
		button_call_handler(BUTTON_YELLOW);
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	3c df       	rcall	.-392    	; 0x490 <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_RED_PIN) {
 618:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 61c:	83 ff       	sbrs	r24, 3
 61e:	03 c0       	rjmp	.+6      	; 0x626 <__vector_5+0x5a>
		button_call_handler(BUTTON_RED);
 620:	83 e0       	ldi	r24, 0x03	; 3
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	35 df       	rcall	.-406    	; 0x490 <button_call_handler>
	}
	#endif

	/* Clear interrupt flag, so the next one can occur */
	PORTC.INTFLAGS = 0xff;
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <eeprom_write>:
 */
void eeprom_write(uint16_t addr, uint8_t data)
{
	uint16_t *addr_ptr = (uint16_t *) addr;
	
	*addr_ptr = data;
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	fc 01       	movw	r30, r24
 652:	60 83       	st	Z, r22
 654:	71 83       	std	Z+1, r23	; 0x01
	NVMCTRL.ADDR = addr;
 656:	e0 e0       	ldi	r30, 0x00	; 0
 658:	f0 e1       	ldi	r31, 0x10	; 16
 65a:	80 87       	std	Z+8, r24	; 0x08
 65c:	91 87       	std	Z+9, r25	; 0x09
	
	CPU_CCP = CCP_SPM_gc;
 65e:	8d e9       	ldi	r24, 0x9D	; 157
 660:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;	
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	80 83       	st	Z, r24
 666:	08 95       	ret

00000668 <eeprom_get_next_seed>:

/*
 * Read seed from EEPROM, increment, return and store it back
 */
uint16_t eeprom_get_next_seed()
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
	uint16_t seed = (eeprom_read(EEPROM_ADDR_HIGH) << 8) | eeprom_read(EEPROM_ADDR_LOW);
 66c:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x701401>
 670:	d8 2f       	mov	r29, r24
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	c8 2f       	mov	r28, r24
 676:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x701400>
 67a:	c8 2b       	or	r28, r24
	
	seed++;
 67c:	21 96       	adiw	r28, 0x01	; 1
	
	eeprom_write(EEPROM_ADDR_HIGH, seed >> 8);
 67e:	6d 2f       	mov	r22, r29
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	94 e1       	ldi	r25, 0x14	; 20
 684:	e4 df       	rcall	.-56     	; 0x64e <eeprom_write>
	eeprom_write(EEPROM_ADDR_LOW, seed & 0xFF);
 686:	6c 2f       	mov	r22, r28
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	94 e1       	ldi	r25, 0x14	; 20
 68c:	e0 df       	rcall	.-64     	; 0x64e <eeprom_write>
	
	return seed;
}
 68e:	ce 01       	movw	r24, r28
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <led_init>:
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
 696:	e0 e0       	ldi	r30, 0x00	; 0
 698:	f4 e0       	ldi	r31, 0x04	; 4
 69a:	30 e4       	ldi	r19, 0x40	; 64
 69c:	31 83       	std	Z+1, r19	; 0x01
 69e:	20 e8       	ldi	r18, 0x80	; 128
 6a0:	21 83       	std	Z+1, r18	; 0x01
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	81 83       	std	Z+1, r24	; 0x01
 6a6:	94 e0       	ldi	r25, 0x04	; 4
 6a8:	91 83       	std	Z+1, r25	; 0x01
 6aa:	36 83       	std	Z+6, r19	; 0x06
 6ac:	26 83       	std	Z+6, r18	; 0x06
 6ae:	86 83       	std	Z+6, r24	; 0x06
 6b0:	96 83       	std	Z+6, r25	; 0x06
 6b2:	38 e0       	ldi	r19, 0x08	; 8
 6b4:	31 83       	std	Z+1, r19	; 0x01
 6b6:	20 e1       	ldi	r18, 0x10	; 16
 6b8:	21 83       	std	Z+1, r18	; 0x01
 6ba:	a0 e2       	ldi	r26, 0x20	; 32
 6bc:	b4 e0       	ldi	r27, 0x04	; 4
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	11 96       	adiw	r26, 0x01	; 1
 6c2:	9c 93       	st	X, r25
 6c4:	11 97       	sbiw	r26, 0x01	; 1
 6c6:	11 96       	adiw	r26, 0x01	; 1
 6c8:	8c 93       	st	X, r24
 6ca:	11 97       	sbiw	r26, 0x01	; 1
 6cc:	36 83       	std	Z+6, r19	; 0x06
 6ce:	26 83       	std	Z+6, r18	; 0x06
 6d0:	16 96       	adiw	r26, 0x06	; 6
 6d2:	9c 93       	st	X, r25
 6d4:	16 97       	sbiw	r26, 0x06	; 6
 6d6:	16 96       	adiw	r26, 0x06	; 6
 6d8:	8c 93       	st	X, r24
 6da:	08 95       	ret

000006dc <led_counter_set>:
/*
 * Set counter LEDs to number in binary (0-15)
 */
void led_counter_set(uint8_t number)
{
	if (number & (1 << 0)) {
 6dc:	80 ff       	sbrs	r24, 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <led_counter_set+0xc>
 */
void led_counter_turn_on(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
 6e0:	90 e4       	ldi	r25, 0x40	; 64
 6e2:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <led_counter_set+0x12>
 */
void led_counter_turn_off(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
 6e8:	90 e4       	ldi	r25, 0x40	; 64
 6ea:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_1);
	} else {
		led_counter_turn_off(COUNTER_1);
	}

	if (number & (1 << 1)) {
 6ee:	81 ff       	sbrs	r24, 1
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <led_counter_set+0x1e>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
 6f2:	90 e8       	ldi	r25, 0x80	; 128
 6f4:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <led_counter_set+0x24>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
 6fa:	90 e8       	ldi	r25, 0x80	; 128
 6fc:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_2);
	} else {
		led_counter_turn_off(COUNTER_2);
	}

	if (number & (1 << 2)) {
 700:	82 ff       	sbrs	r24, 2
 702:	04 c0       	rjmp	.+8      	; 0x70c <led_counter_set+0x30>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
 704:	92 e0       	ldi	r25, 0x02	; 2
 706:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 70a:	03 c0       	rjmp	.+6      	; 0x712 <led_counter_set+0x36>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
 70c:	92 e0       	ldi	r25, 0x02	; 2
 70e:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_4);
	} else {
		led_counter_turn_off(COUNTER_4);
	}

	if (number & (1 << 3)) {
 712:	83 ff       	sbrs	r24, 3
 714:	04 c0       	rjmp	.+8      	; 0x71e <led_counter_set+0x42>
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTSET = COUNTER_8_PIN;
 716:	84 e0       	ldi	r24, 0x04	; 4
 718:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 71c:	08 95       	ret
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
 71e:	84 e0       	ldi	r24, 0x04	; 4
 720:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 724:	08 95       	ret

00000726 <led_blinker_turn_on>:
/*
 * Turn the specific 'blinker' LED on
 */
void led_blinker_turn_on(int blinker)
{
	switch (blinker) {
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	91 05       	cpc	r25, r1
 72a:	71 f0       	breq	.+28     	; 0x748 <led_blinker_turn_on+0x22>
 72c:	1c f4       	brge	.+6      	; 0x734 <led_blinker_turn_on+0xe>
 72e:	89 2b       	or	r24, r25
 730:	39 f0       	breq	.+14     	; 0x740 <led_blinker_turn_on+0x1a>
 732:	08 95       	ret
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	91 05       	cpc	r25, r1
 738:	59 f0       	breq	.+22     	; 0x750 <led_blinker_turn_on+0x2a>
 73a:	03 97       	sbiw	r24, 0x03	; 3
 73c:	69 f0       	breq	.+26     	; 0x758 <led_blinker_turn_on+0x32>
 73e:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTSET = BLINKER_GREEN_PIN;
 740:	88 e0       	ldi	r24, 0x08	; 8
 742:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
 746:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTSET = BLINKER_ORANGE_PIN;
 748:	80 e1       	ldi	r24, 0x10	; 16
 74a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
 74e:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTSET = BLINKER_YELLOW_PIN;
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
			break;				
 756:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTSET = BLINKER_RED_PIN;
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
 75e:	08 95       	ret

00000760 <led_blinker_turn_off>:
/*
 * Turn the specific 'blinker' LED off
 */
void led_blinker_turn_off(int blinker)
{
	switch (blinker) {
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	91 05       	cpc	r25, r1
 764:	71 f0       	breq	.+28     	; 0x782 <led_blinker_turn_off+0x22>
 766:	1c f4       	brge	.+6      	; 0x76e <led_blinker_turn_off+0xe>
 768:	89 2b       	or	r24, r25
 76a:	39 f0       	breq	.+14     	; 0x77a <led_blinker_turn_off+0x1a>
 76c:	08 95       	ret
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	91 05       	cpc	r25, r1
 772:	59 f0       	breq	.+22     	; 0x78a <led_blinker_turn_off+0x2a>
 774:	03 97       	sbiw	r24, 0x03	; 3
 776:	69 f0       	breq	.+26     	; 0x792 <led_blinker_turn_off+0x32>
 778:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTCLR = BLINKER_GREEN_PIN;
 77a:	88 e0       	ldi	r24, 0x08	; 8
 77c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
 780:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTCLR = BLINKER_ORANGE_PIN;
 782:	80 e1       	ldi	r24, 0x10	; 16
 784:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
 788:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTCLR = BLINKER_YELLOW_PIN;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
			break;
 790:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTCLR = BLINKER_RED_PIN;
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
 798:	08 95       	ret

0000079a <speaker_init>:
/*
 * Initialize output pins for counters and blinkers
 */
void speaker_init()
{
	SPEAKER_PORT.DIRSET = SPEAKER_PIN;
 79a:	e0 e0       	ldi	r30, 0x00	; 0
 79c:	f4 e0       	ldi	r31, 0x04	; 4
 79e:	80 e2       	ldi	r24, 0x20	; 32
 7a0:	81 83       	std	Z+1, r24	; 0x01
	SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
 7a2:	86 83       	std	Z+6, r24	; 0x06
 7a4:	08 95       	ret

000007a6 <speaker_generate_tone>:
/*
 * Play frequency at specified duration in milliseconds
 * This function is I/O blocking
 */
void speaker_generate_tone(long frequency, long duration)
{
 7a6:	4f 92       	push	r4
 7a8:	5f 92       	push	r5
 7aa:	6f 92       	push	r6
 7ac:	7f 92       	push	r7
 7ae:	8f 92       	push	r8
 7b0:	9f 92       	push	r9
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	6b 01       	movw	r12, r22
 7c8:	7c 01       	movw	r14, r24
 7ca:	29 01       	movw	r4, r18
 7cc:	3a 01       	movw	r6, r20
	long period_us = 1000000L / frequency;
 7ce:	60 e4       	ldi	r22, 0x40	; 64
 7d0:	72 e4       	ldi	r23, 0x42	; 66
 7d2:	8f e0       	ldi	r24, 0x0F	; 15
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	a7 01       	movw	r20, r14
 7d8:	96 01       	movw	r18, r12
 7da:	5c d0       	rcall	.+184    	; 0x894 <__divmodsi4>
 7dc:	49 01       	movw	r8, r18
 7de:	5a 01       	movw	r10, r20
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
 7e0:	68 e0       	ldi	r22, 0x08	; 8
 7e2:	76 e4       	ldi	r23, 0x46	; 70
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	a7 01       	movw	r20, r14
 7ea:	96 01       	movw	r18, r12
 7ec:	53 d0       	rcall	.+166    	; 0x894 <__divmodsi4>
 7ee:	69 01       	movw	r12, r18
 7f0:	7a 01       	movw	r14, r20
	
	while(elapsed_us < (duration * 1000L)) {
 7f2:	a8 ee       	ldi	r26, 0xE8	; 232
 7f4:	b3 e0       	ldi	r27, 0x03	; 3
 7f6:	a3 01       	movw	r20, r6
 7f8:	92 01       	movw	r18, r4
 7fa:	68 d0       	rcall	.+208    	; 0x8cc <__muluhisi3>
 7fc:	8b 01       	movw	r16, r22
 7fe:	9c 01       	movw	r18, r24
 800:	16 16       	cp	r1, r22
 802:	17 06       	cpc	r1, r23
 804:	18 06       	cpc	r1, r24
 806:	19 06       	cpc	r1, r25
 808:	a4 f5       	brge	.+104    	; 0x872 <speaker_generate_tone+0xcc>
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	ba 01       	movw	r22, r20
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
 810:	e0 e0       	ldi	r30, 0x00	; 0
 812:	f4 e0       	ldi	r31, 0x04	; 4
 814:	c0 e2       	ldi	r28, 0x20	; 32
 816:	dc 2f       	mov	r29, r28
 818:	d5 83       	std	Z+5, r29	; 0x05
		
		for (long i = 0L; i < half_period_wait; i++)
 81a:	1c 14       	cp	r1, r12
 81c:	1d 04       	cpc	r1, r13
 81e:	1e 04       	cpc	r1, r14
 820:	1f 04       	cpc	r1, r15
 822:	04 f5       	brge	.+64     	; 0x864 <speaker_generate_tone+0xbe>
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	dc 01       	movw	r26, r24
		{
			_NOP();
 82a:	00 00       	nop
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	a1 1d       	adc	r26, r1
 830:	b1 1d       	adc	r27, r1
 832:	c8 16       	cp	r12, r24
 834:	d9 06       	cpc	r13, r25
 836:	ea 06       	cpc	r14, r26
 838:	fb 06       	cpc	r15, r27
 83a:	b9 f7       	brne	.-18     	; 0x82a <speaker_generate_tone+0x84>
 83c:	15 c0       	rjmp	.+42     	; 0x868 <speaker_generate_tone+0xc2>
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
 83e:	00 00       	nop
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	a1 1d       	adc	r26, r1
 844:	b1 1d       	adc	r27, r1
 846:	c8 16       	cp	r12, r24
 848:	d9 06       	cpc	r13, r25
 84a:	ea 06       	cpc	r14, r26
 84c:	fb 06       	cpc	r15, r27
 84e:	b9 f7       	brne	.-18     	; 0x83e <speaker_generate_tone+0x98>
		{
			_NOP();
		}
		
		elapsed_us += period_us;
 850:	48 0d       	add	r20, r8
 852:	59 1d       	adc	r21, r9
 854:	6a 1d       	adc	r22, r10
 856:	7b 1d       	adc	r23, r11
{
	long period_us = 1000000L / frequency;
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
 858:	40 17       	cp	r20, r16
 85a:	51 07       	cpc	r21, r17
 85c:	62 07       	cpc	r22, r18
 85e:	73 07       	cpc	r23, r19
 860:	dc f2       	brlt	.-74     	; 0x818 <speaker_generate_tone+0x72>
 862:	07 c0       	rjmp	.+14     	; 0x872 <speaker_generate_tone+0xcc>
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
 864:	c6 83       	std	Z+6, r28	; 0x06
 866:	f4 cf       	rjmp	.-24     	; 0x850 <speaker_generate_tone+0xaa>
 868:	c6 83       	std	Z+6, r28	; 0x06
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	dc 01       	movw	r26, r24
 870:	e6 cf       	rjmp	.-52     	; 0x83e <speaker_generate_tone+0x98>
		}
		
		elapsed_us += period_us;
	}
	
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	0f 91       	pop	r16
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	df 90       	pop	r13
 880:	cf 90       	pop	r12
 882:	bf 90       	pop	r11
 884:	af 90       	pop	r10
 886:	9f 90       	pop	r9
 888:	8f 90       	pop	r8
 88a:	7f 90       	pop	r7
 88c:	6f 90       	pop	r6
 88e:	5f 90       	pop	r5
 890:	4f 90       	pop	r4
 892:	08 95       	ret

00000894 <__divmodsi4>:
 894:	05 2e       	mov	r0, r21
 896:	97 fb       	bst	r25, 7
 898:	16 f4       	brtc	.+4      	; 0x89e <__divmodsi4+0xa>
 89a:	00 94       	com	r0
 89c:	0f d0       	rcall	.+30     	; 0x8bc <__negsi2>
 89e:	57 fd       	sbrc	r21, 7
 8a0:	05 d0       	rcall	.+10     	; 0x8ac <__divmodsi4_neg2>
 8a2:	1e d0       	rcall	.+60     	; 0x8e0 <__udivmodsi4>
 8a4:	07 fc       	sbrc	r0, 7
 8a6:	02 d0       	rcall	.+4      	; 0x8ac <__divmodsi4_neg2>
 8a8:	46 f4       	brtc	.+16     	; 0x8ba <__divmodsi4_exit>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__negsi2>

000008ac <__divmodsi4_neg2>:
 8ac:	50 95       	com	r21
 8ae:	40 95       	com	r20
 8b0:	30 95       	com	r19
 8b2:	21 95       	neg	r18
 8b4:	3f 4f       	sbci	r19, 0xFF	; 255
 8b6:	4f 4f       	sbci	r20, 0xFF	; 255
 8b8:	5f 4f       	sbci	r21, 0xFF	; 255

000008ba <__divmodsi4_exit>:
 8ba:	08 95       	ret

000008bc <__negsi2>:
 8bc:	90 95       	com	r25
 8be:	80 95       	com	r24
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	08 95       	ret

000008cc <__muluhisi3>:
 8cc:	2b d0       	rcall	.+86     	; 0x924 <__umulhisi3>
 8ce:	a5 9f       	mul	r26, r21
 8d0:	90 0d       	add	r25, r0
 8d2:	b4 9f       	mul	r27, r20
 8d4:	90 0d       	add	r25, r0
 8d6:	a4 9f       	mul	r26, r20
 8d8:	80 0d       	add	r24, r0
 8da:	91 1d       	adc	r25, r1
 8dc:	11 24       	eor	r1, r1
 8de:	08 95       	ret

000008e0 <__udivmodsi4>:
 8e0:	a1 e2       	ldi	r26, 0x21	; 33
 8e2:	1a 2e       	mov	r1, r26
 8e4:	aa 1b       	sub	r26, r26
 8e6:	bb 1b       	sub	r27, r27
 8e8:	fd 01       	movw	r30, r26
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <__udivmodsi4_ep>

000008ec <__udivmodsi4_loop>:
 8ec:	aa 1f       	adc	r26, r26
 8ee:	bb 1f       	adc	r27, r27
 8f0:	ee 1f       	adc	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	a2 17       	cp	r26, r18
 8f6:	b3 07       	cpc	r27, r19
 8f8:	e4 07       	cpc	r30, r20
 8fa:	f5 07       	cpc	r31, r21
 8fc:	20 f0       	brcs	.+8      	; 0x906 <__udivmodsi4_ep>
 8fe:	a2 1b       	sub	r26, r18
 900:	b3 0b       	sbc	r27, r19
 902:	e4 0b       	sbc	r30, r20
 904:	f5 0b       	sbc	r31, r21

00000906 <__udivmodsi4_ep>:
 906:	66 1f       	adc	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	1a 94       	dec	r1
 910:	69 f7       	brne	.-38     	; 0x8ec <__udivmodsi4_loop>
 912:	60 95       	com	r22
 914:	70 95       	com	r23
 916:	80 95       	com	r24
 918:	90 95       	com	r25
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	bd 01       	movw	r22, r26
 920:	cf 01       	movw	r24, r30
 922:	08 95       	ret

00000924 <__umulhisi3>:
 924:	a2 9f       	mul	r26, r18
 926:	b0 01       	movw	r22, r0
 928:	b3 9f       	mul	r27, r19
 92a:	c0 01       	movw	r24, r0
 92c:	a3 9f       	mul	r26, r19
 92e:	01 d0       	rcall	.+2      	; 0x932 <__umulhisi3+0xe>
 930:	b2 9f       	mul	r27, r18
 932:	70 0d       	add	r23, r0
 934:	81 1d       	adc	r24, r1
 936:	11 24       	eor	r1, r1
 938:	91 1d       	adc	r25, r1
 93a:	08 95       	ret

0000093c <malloc>:
 93c:	0f 93       	push	r16
 93e:	1f 93       	push	r17
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	82 30       	cpi	r24, 0x02	; 2
 946:	91 05       	cpc	r25, r1
 948:	10 f4       	brcc	.+4      	; 0x94e <malloc+0x12>
 94a:	82 e0       	ldi	r24, 0x02	; 2
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	e0 91 23 3e 	lds	r30, 0x3E23	; 0x803e23 <__flp>
 952:	f0 91 24 3e 	lds	r31, 0x3E24	; 0x803e24 <__flp+0x1>
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	a0 e0       	ldi	r26, 0x00	; 0
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	30 97       	sbiw	r30, 0x00	; 0
 960:	19 f1       	breq	.+70     	; 0x9a8 <malloc+0x6c>
 962:	40 81       	ld	r20, Z
 964:	51 81       	ldd	r21, Z+1	; 0x01
 966:	02 81       	ldd	r16, Z+2	; 0x02
 968:	13 81       	ldd	r17, Z+3	; 0x03
 96a:	48 17       	cp	r20, r24
 96c:	59 07       	cpc	r21, r25
 96e:	c8 f0       	brcs	.+50     	; 0x9a2 <malloc+0x66>
 970:	84 17       	cp	r24, r20
 972:	95 07       	cpc	r25, r21
 974:	69 f4       	brne	.+26     	; 0x990 <malloc+0x54>
 976:	10 97       	sbiw	r26, 0x00	; 0
 978:	31 f0       	breq	.+12     	; 0x986 <malloc+0x4a>
 97a:	12 96       	adiw	r26, 0x02	; 2
 97c:	0c 93       	st	X, r16
 97e:	12 97       	sbiw	r26, 0x02	; 2
 980:	13 96       	adiw	r26, 0x03	; 3
 982:	1c 93       	st	X, r17
 984:	27 c0       	rjmp	.+78     	; 0x9d4 <malloc+0x98>
 986:	00 93 23 3e 	sts	0x3E23, r16	; 0x803e23 <__flp>
 98a:	10 93 24 3e 	sts	0x3E24, r17	; 0x803e24 <__flp+0x1>
 98e:	22 c0       	rjmp	.+68     	; 0x9d4 <malloc+0x98>
 990:	21 15       	cp	r18, r1
 992:	31 05       	cpc	r19, r1
 994:	19 f0       	breq	.+6      	; 0x99c <malloc+0x60>
 996:	42 17       	cp	r20, r18
 998:	53 07       	cpc	r21, r19
 99a:	18 f4       	brcc	.+6      	; 0x9a2 <malloc+0x66>
 99c:	9a 01       	movw	r18, r20
 99e:	bd 01       	movw	r22, r26
 9a0:	ef 01       	movw	r28, r30
 9a2:	df 01       	movw	r26, r30
 9a4:	f8 01       	movw	r30, r16
 9a6:	db cf       	rjmp	.-74     	; 0x95e <malloc+0x22>
 9a8:	21 15       	cp	r18, r1
 9aa:	31 05       	cpc	r19, r1
 9ac:	f9 f0       	breq	.+62     	; 0x9ec <malloc+0xb0>
 9ae:	28 1b       	sub	r18, r24
 9b0:	39 0b       	sbc	r19, r25
 9b2:	24 30       	cpi	r18, 0x04	; 4
 9b4:	31 05       	cpc	r19, r1
 9b6:	80 f4       	brcc	.+32     	; 0x9d8 <malloc+0x9c>
 9b8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ba:	9b 81       	ldd	r25, Y+3	; 0x03
 9bc:	61 15       	cp	r22, r1
 9be:	71 05       	cpc	r23, r1
 9c0:	21 f0       	breq	.+8      	; 0x9ca <malloc+0x8e>
 9c2:	fb 01       	movw	r30, r22
 9c4:	82 83       	std	Z+2, r24	; 0x02
 9c6:	93 83       	std	Z+3, r25	; 0x03
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <malloc+0x96>
 9ca:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <__flp>
 9ce:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <__flp+0x1>
 9d2:	fe 01       	movw	r30, r28
 9d4:	32 96       	adiw	r30, 0x02	; 2
 9d6:	44 c0       	rjmp	.+136    	; 0xa60 <malloc+0x124>
 9d8:	fe 01       	movw	r30, r28
 9da:	e2 0f       	add	r30, r18
 9dc:	f3 1f       	adc	r31, r19
 9de:	81 93       	st	Z+, r24
 9e0:	91 93       	st	Z+, r25
 9e2:	22 50       	subi	r18, 0x02	; 2
 9e4:	31 09       	sbc	r19, r1
 9e6:	28 83       	st	Y, r18
 9e8:	39 83       	std	Y+1, r19	; 0x01
 9ea:	3a c0       	rjmp	.+116    	; 0xa60 <malloc+0x124>
 9ec:	20 91 21 3e 	lds	r18, 0x3E21	; 0x803e21 <__brkval>
 9f0:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <__brkval+0x1>
 9f4:	23 2b       	or	r18, r19
 9f6:	41 f4       	brne	.+16     	; 0xa08 <malloc+0xcc>
 9f8:	20 91 02 3e 	lds	r18, 0x3E02	; 0x803e02 <__malloc_heap_start>
 9fc:	30 91 03 3e 	lds	r19, 0x3E03	; 0x803e03 <__malloc_heap_start+0x1>
 a00:	20 93 21 3e 	sts	0x3E21, r18	; 0x803e21 <__brkval>
 a04:	30 93 22 3e 	sts	0x3E22, r19	; 0x803e22 <__brkval+0x1>
 a08:	20 91 00 3e 	lds	r18, 0x3E00	; 0x803e00 <__data_start>
 a0c:	30 91 01 3e 	lds	r19, 0x3E01	; 0x803e01 <__data_start+0x1>
 a10:	21 15       	cp	r18, r1
 a12:	31 05       	cpc	r19, r1
 a14:	41 f4       	brne	.+16     	; 0xa26 <malloc+0xea>
 a16:	2d b7       	in	r18, 0x3d	; 61
 a18:	3e b7       	in	r19, 0x3e	; 62
 a1a:	40 91 04 3e 	lds	r20, 0x3E04	; 0x803e04 <__malloc_margin>
 a1e:	50 91 05 3e 	lds	r21, 0x3E05	; 0x803e05 <__malloc_margin+0x1>
 a22:	24 1b       	sub	r18, r20
 a24:	35 0b       	sbc	r19, r21
 a26:	e0 91 21 3e 	lds	r30, 0x3E21	; 0x803e21 <__brkval>
 a2a:	f0 91 22 3e 	lds	r31, 0x3E22	; 0x803e22 <__brkval+0x1>
 a2e:	e2 17       	cp	r30, r18
 a30:	f3 07       	cpc	r31, r19
 a32:	a0 f4       	brcc	.+40     	; 0xa5c <malloc+0x120>
 a34:	2e 1b       	sub	r18, r30
 a36:	3f 0b       	sbc	r19, r31
 a38:	28 17       	cp	r18, r24
 a3a:	39 07       	cpc	r19, r25
 a3c:	78 f0       	brcs	.+30     	; 0xa5c <malloc+0x120>
 a3e:	ac 01       	movw	r20, r24
 a40:	4e 5f       	subi	r20, 0xFE	; 254
 a42:	5f 4f       	sbci	r21, 0xFF	; 255
 a44:	24 17       	cp	r18, r20
 a46:	35 07       	cpc	r19, r21
 a48:	48 f0       	brcs	.+18     	; 0xa5c <malloc+0x120>
 a4a:	4e 0f       	add	r20, r30
 a4c:	5f 1f       	adc	r21, r31
 a4e:	40 93 21 3e 	sts	0x3E21, r20	; 0x803e21 <__brkval>
 a52:	50 93 22 3e 	sts	0x3E22, r21	; 0x803e22 <__brkval+0x1>
 a56:	81 93       	st	Z+, r24
 a58:	91 93       	st	Z+, r25
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <malloc+0x124>
 a5c:	e0 e0       	ldi	r30, 0x00	; 0
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	cf 01       	movw	r24, r30
 a62:	df 91       	pop	r29
 a64:	cf 91       	pop	r28
 a66:	1f 91       	pop	r17
 a68:	0f 91       	pop	r16
 a6a:	08 95       	ret

00000a6c <free>:
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	00 97       	sbiw	r24, 0x00	; 0
 a72:	09 f4       	brne	.+2      	; 0xa76 <free+0xa>
 a74:	81 c0       	rjmp	.+258    	; 0xb78 <free+0x10c>
 a76:	fc 01       	movw	r30, r24
 a78:	32 97       	sbiw	r30, 0x02	; 2
 a7a:	12 82       	std	Z+2, r1	; 0x02
 a7c:	13 82       	std	Z+3, r1	; 0x03
 a7e:	a0 91 23 3e 	lds	r26, 0x3E23	; 0x803e23 <__flp>
 a82:	b0 91 24 3e 	lds	r27, 0x3E24	; 0x803e24 <__flp+0x1>
 a86:	10 97       	sbiw	r26, 0x00	; 0
 a88:	81 f4       	brne	.+32     	; 0xaaa <free+0x3e>
 a8a:	20 81       	ld	r18, Z
 a8c:	31 81       	ldd	r19, Z+1	; 0x01
 a8e:	82 0f       	add	r24, r18
 a90:	93 1f       	adc	r25, r19
 a92:	20 91 21 3e 	lds	r18, 0x3E21	; 0x803e21 <__brkval>
 a96:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <__brkval+0x1>
 a9a:	28 17       	cp	r18, r24
 a9c:	39 07       	cpc	r19, r25
 a9e:	51 f5       	brne	.+84     	; 0xaf4 <free+0x88>
 aa0:	e0 93 21 3e 	sts	0x3E21, r30	; 0x803e21 <__brkval>
 aa4:	f0 93 22 3e 	sts	0x3E22, r31	; 0x803e22 <__brkval+0x1>
 aa8:	67 c0       	rjmp	.+206    	; 0xb78 <free+0x10c>
 aaa:	ed 01       	movw	r28, r26
 aac:	20 e0       	ldi	r18, 0x00	; 0
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	ce 17       	cp	r28, r30
 ab2:	df 07       	cpc	r29, r31
 ab4:	40 f4       	brcc	.+16     	; 0xac6 <free+0x5a>
 ab6:	4a 81       	ldd	r20, Y+2	; 0x02
 ab8:	5b 81       	ldd	r21, Y+3	; 0x03
 aba:	9e 01       	movw	r18, r28
 abc:	41 15       	cp	r20, r1
 abe:	51 05       	cpc	r21, r1
 ac0:	f1 f0       	breq	.+60     	; 0xafe <free+0x92>
 ac2:	ea 01       	movw	r28, r20
 ac4:	f5 cf       	rjmp	.-22     	; 0xab0 <free+0x44>
 ac6:	c2 83       	std	Z+2, r28	; 0x02
 ac8:	d3 83       	std	Z+3, r29	; 0x03
 aca:	40 81       	ld	r20, Z
 acc:	51 81       	ldd	r21, Z+1	; 0x01
 ace:	84 0f       	add	r24, r20
 ad0:	95 1f       	adc	r25, r21
 ad2:	c8 17       	cp	r28, r24
 ad4:	d9 07       	cpc	r29, r25
 ad6:	59 f4       	brne	.+22     	; 0xaee <free+0x82>
 ad8:	88 81       	ld	r24, Y
 ada:	99 81       	ldd	r25, Y+1	; 0x01
 adc:	84 0f       	add	r24, r20
 ade:	95 1f       	adc	r25, r21
 ae0:	02 96       	adiw	r24, 0x02	; 2
 ae2:	80 83       	st	Z, r24
 ae4:	91 83       	std	Z+1, r25	; 0x01
 ae6:	8a 81       	ldd	r24, Y+2	; 0x02
 ae8:	9b 81       	ldd	r25, Y+3	; 0x03
 aea:	82 83       	std	Z+2, r24	; 0x02
 aec:	93 83       	std	Z+3, r25	; 0x03
 aee:	21 15       	cp	r18, r1
 af0:	31 05       	cpc	r19, r1
 af2:	29 f4       	brne	.+10     	; 0xafe <free+0x92>
 af4:	e0 93 23 3e 	sts	0x3E23, r30	; 0x803e23 <__flp>
 af8:	f0 93 24 3e 	sts	0x3E24, r31	; 0x803e24 <__flp+0x1>
 afc:	3d c0       	rjmp	.+122    	; 0xb78 <free+0x10c>
 afe:	e9 01       	movw	r28, r18
 b00:	ea 83       	std	Y+2, r30	; 0x02
 b02:	fb 83       	std	Y+3, r31	; 0x03
 b04:	49 91       	ld	r20, Y+
 b06:	59 91       	ld	r21, Y+
 b08:	c4 0f       	add	r28, r20
 b0a:	d5 1f       	adc	r29, r21
 b0c:	ec 17       	cp	r30, r28
 b0e:	fd 07       	cpc	r31, r29
 b10:	61 f4       	brne	.+24     	; 0xb2a <free+0xbe>
 b12:	80 81       	ld	r24, Z
 b14:	91 81       	ldd	r25, Z+1	; 0x01
 b16:	84 0f       	add	r24, r20
 b18:	95 1f       	adc	r25, r21
 b1a:	02 96       	adiw	r24, 0x02	; 2
 b1c:	e9 01       	movw	r28, r18
 b1e:	88 83       	st	Y, r24
 b20:	99 83       	std	Y+1, r25	; 0x01
 b22:	82 81       	ldd	r24, Z+2	; 0x02
 b24:	93 81       	ldd	r25, Z+3	; 0x03
 b26:	8a 83       	std	Y+2, r24	; 0x02
 b28:	9b 83       	std	Y+3, r25	; 0x03
 b2a:	e0 e0       	ldi	r30, 0x00	; 0
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	12 96       	adiw	r26, 0x02	; 2
 b30:	8d 91       	ld	r24, X+
 b32:	9c 91       	ld	r25, X
 b34:	13 97       	sbiw	r26, 0x03	; 3
 b36:	00 97       	sbiw	r24, 0x00	; 0
 b38:	19 f0       	breq	.+6      	; 0xb40 <free+0xd4>
 b3a:	fd 01       	movw	r30, r26
 b3c:	dc 01       	movw	r26, r24
 b3e:	f7 cf       	rjmp	.-18     	; 0xb2e <free+0xc2>
 b40:	8d 91       	ld	r24, X+
 b42:	9c 91       	ld	r25, X
 b44:	11 97       	sbiw	r26, 0x01	; 1
 b46:	9d 01       	movw	r18, r26
 b48:	2e 5f       	subi	r18, 0xFE	; 254
 b4a:	3f 4f       	sbci	r19, 0xFF	; 255
 b4c:	82 0f       	add	r24, r18
 b4e:	93 1f       	adc	r25, r19
 b50:	20 91 21 3e 	lds	r18, 0x3E21	; 0x803e21 <__brkval>
 b54:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <__brkval+0x1>
 b58:	28 17       	cp	r18, r24
 b5a:	39 07       	cpc	r19, r25
 b5c:	69 f4       	brne	.+26     	; 0xb78 <free+0x10c>
 b5e:	30 97       	sbiw	r30, 0x00	; 0
 b60:	29 f4       	brne	.+10     	; 0xb6c <free+0x100>
 b62:	10 92 23 3e 	sts	0x3E23, r1	; 0x803e23 <__flp>
 b66:	10 92 24 3e 	sts	0x3E24, r1	; 0x803e24 <__flp+0x1>
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <free+0x104>
 b6c:	12 82       	std	Z+2, r1	; 0x02
 b6e:	13 82       	std	Z+3, r1	; 0x03
 b70:	a0 93 21 3e 	sts	0x3E21, r26	; 0x803e21 <__brkval>
 b74:	b0 93 22 3e 	sts	0x3E22, r27	; 0x803e22 <__brkval+0x1>
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	08 95       	ret

00000b7e <do_rand>:
 b7e:	8f 92       	push	r8
 b80:	9f 92       	push	r9
 b82:	af 92       	push	r10
 b84:	bf 92       	push	r11
 b86:	cf 92       	push	r12
 b88:	df 92       	push	r13
 b8a:	ef 92       	push	r14
 b8c:	ff 92       	push	r15
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	ec 01       	movw	r28, r24
 b94:	68 81       	ld	r22, Y
 b96:	79 81       	ldd	r23, Y+1	; 0x01
 b98:	8a 81       	ldd	r24, Y+2	; 0x02
 b9a:	9b 81       	ldd	r25, Y+3	; 0x03
 b9c:	61 15       	cp	r22, r1
 b9e:	71 05       	cpc	r23, r1
 ba0:	81 05       	cpc	r24, r1
 ba2:	91 05       	cpc	r25, r1
 ba4:	21 f4       	brne	.+8      	; 0xbae <do_rand+0x30>
 ba6:	64 e2       	ldi	r22, 0x24	; 36
 ba8:	79 ed       	ldi	r23, 0xD9	; 217
 baa:	8b e5       	ldi	r24, 0x5B	; 91
 bac:	97 e0       	ldi	r25, 0x07	; 7
 bae:	2d e1       	ldi	r18, 0x1D	; 29
 bb0:	33 ef       	ldi	r19, 0xF3	; 243
 bb2:	41 e0       	ldi	r20, 0x01	; 1
 bb4:	50 e0       	ldi	r21, 0x00	; 0
 bb6:	6e de       	rcall	.-804    	; 0x894 <__divmodsi4>
 bb8:	49 01       	movw	r8, r18
 bba:	5a 01       	movw	r10, r20
 bbc:	9b 01       	movw	r18, r22
 bbe:	ac 01       	movw	r20, r24
 bc0:	a7 ea       	ldi	r26, 0xA7	; 167
 bc2:	b1 e4       	ldi	r27, 0x41	; 65
 bc4:	83 de       	rcall	.-762    	; 0x8cc <__muluhisi3>
 bc6:	6b 01       	movw	r12, r22
 bc8:	7c 01       	movw	r14, r24
 bca:	ac ee       	ldi	r26, 0xEC	; 236
 bcc:	b4 ef       	ldi	r27, 0xF4	; 244
 bce:	a5 01       	movw	r20, r10
 bd0:	94 01       	movw	r18, r8
 bd2:	2e d0       	rcall	.+92     	; 0xc30 <__mulohisi3>
 bd4:	dc 01       	movw	r26, r24
 bd6:	cb 01       	movw	r24, r22
 bd8:	8c 0d       	add	r24, r12
 bda:	9d 1d       	adc	r25, r13
 bdc:	ae 1d       	adc	r26, r14
 bde:	bf 1d       	adc	r27, r15
 be0:	b7 ff       	sbrs	r27, 7
 be2:	03 c0       	rjmp	.+6      	; 0xbea <do_rand+0x6c>
 be4:	01 97       	sbiw	r24, 0x01	; 1
 be6:	a1 09       	sbc	r26, r1
 be8:	b0 48       	sbci	r27, 0x80	; 128
 bea:	88 83       	st	Y, r24
 bec:	99 83       	std	Y+1, r25	; 0x01
 bee:	aa 83       	std	Y+2, r26	; 0x02
 bf0:	bb 83       	std	Y+3, r27	; 0x03
 bf2:	9f 77       	andi	r25, 0x7F	; 127
 bf4:	df 91       	pop	r29
 bf6:	cf 91       	pop	r28
 bf8:	ff 90       	pop	r15
 bfa:	ef 90       	pop	r14
 bfc:	df 90       	pop	r13
 bfe:	cf 90       	pop	r12
 c00:	bf 90       	pop	r11
 c02:	af 90       	pop	r10
 c04:	9f 90       	pop	r9
 c06:	8f 90       	pop	r8
 c08:	08 95       	ret

00000c0a <rand_r>:
 c0a:	b9 df       	rcall	.-142    	; 0xb7e <do_rand>
 c0c:	08 95       	ret

00000c0e <rand>:
 c0e:	86 e0       	ldi	r24, 0x06	; 6
 c10:	9e e3       	ldi	r25, 0x3E	; 62
 c12:	b5 df       	rcall	.-150    	; 0xb7e <do_rand>
 c14:	08 95       	ret

00000c16 <srand>:
 c16:	a0 e0       	ldi	r26, 0x00	; 0
 c18:	b0 e0       	ldi	r27, 0x00	; 0
 c1a:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <next>
 c1e:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <next+0x1>
 c22:	a0 93 08 3e 	sts	0x3E08, r26	; 0x803e08 <next+0x2>
 c26:	b0 93 09 3e 	sts	0x3E09, r27	; 0x803e09 <next+0x3>
 c2a:	08 95       	ret

00000c2c <__mulshisi3>:
 c2c:	b7 ff       	sbrs	r27, 7
 c2e:	4e ce       	rjmp	.-868    	; 0x8cc <__muluhisi3>

00000c30 <__mulohisi3>:
 c30:	4d de       	rcall	.-870    	; 0x8cc <__muluhisi3>
 c32:	82 1b       	sub	r24, r18
 c34:	93 0b       	sbc	r25, r19
 c36:	08 95       	ret

00000c38 <_exit>:
 c38:	f8 94       	cli

00000c3a <__stop_program>:
 c3a:	ff cf       	rjmp	.-2      	; 0xc3a <__stop_program>
