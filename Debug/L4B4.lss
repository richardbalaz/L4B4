
L4B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001178  0000120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00803e04  00803e04  00001210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040f8  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022c8  00000000  00000000  000055bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001797  00000000  00000000  00007884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  0000901c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001980  00000000  00000000  000095ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001576  00000000  00000000  0000af6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000c4e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cd c1       	rjmp	.+922    	; 0x39c <__ctors_end>
       2:	e7 c1       	rjmp	.+974    	; 0x3d2 <__bad_interrupt>
       4:	e6 c1       	rjmp	.+972    	; 0x3d2 <__bad_interrupt>
       6:	d1 c4       	rjmp	.+2466   	; 0x9aa <__vector_3>
       8:	11 c5       	rjmp	.+2594   	; 0xa2c <__vector_4>
       a:	51 c5       	rjmp	.+2722   	; 0xaae <__vector_5>
       c:	7c c6       	rjmp	.+3320   	; 0xd06 <__vector_6>
       e:	e1 c1       	rjmp	.+962    	; 0x3d2 <__bad_interrupt>
      10:	e0 c1       	rjmp	.+960    	; 0x3d2 <__bad_interrupt>
      12:	df c1       	rjmp	.+958    	; 0x3d2 <__bad_interrupt>
      14:	de c1       	rjmp	.+956    	; 0x3d2 <__bad_interrupt>
      16:	dd c1       	rjmp	.+954    	; 0x3d2 <__bad_interrupt>
      18:	dc c1       	rjmp	.+952    	; 0x3d2 <__bad_interrupt>
      1a:	db c1       	rjmp	.+950    	; 0x3d2 <__bad_interrupt>
      1c:	da c1       	rjmp	.+948    	; 0x3d2 <__bad_interrupt>
      1e:	d9 c1       	rjmp	.+946    	; 0x3d2 <__bad_interrupt>
      20:	d8 c1       	rjmp	.+944    	; 0x3d2 <__bad_interrupt>
      22:	d7 c1       	rjmp	.+942    	; 0x3d2 <__bad_interrupt>
      24:	d6 c1       	rjmp	.+940    	; 0x3d2 <__bad_interrupt>
      26:	d5 c1       	rjmp	.+938    	; 0x3d2 <__bad_interrupt>
      28:	d4 c1       	rjmp	.+936    	; 0x3d2 <__bad_interrupt>
      2a:	d3 c1       	rjmp	.+934    	; 0x3d2 <__bad_interrupt>
      2c:	d2 c1       	rjmp	.+932    	; 0x3d2 <__bad_interrupt>
      2e:	d1 c1       	rjmp	.+930    	; 0x3d2 <__bad_interrupt>
      30:	d0 c1       	rjmp	.+928    	; 0x3d2 <__bad_interrupt>
      32:	cf c1       	rjmp	.+926    	; 0x3d2 <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	25 01       	movw	r4, r10
      36:	77 01       	movw	r14, r14
      38:	49 01       	movw	r8, r18
      3a:	77 01       	movw	r14, r14
      3c:	87 01       	movw	r16, r14
      3e:	77 01       	movw	r14, r14
      40:	87 01       	movw	r16, r14
      42:	65 04       	cpc	r6, r5
      44:	00 00       	nop
      46:	90 01       	movw	r18, r0
      48:	ed 01       	movw	r28, r26
      4a:	77 01       	movw	r14, r14
      4c:	b8 01       	movw	r22, r16
      4e:	77 01       	movw	r14, r14
      50:	ed 01       	movw	r28, r26
      52:	bb 00       	.word	0x00bb	; ????
      54:	b8 01       	movw	r22, r16
      56:	bb 00       	.word	0x00bb	; ????
      58:	87 01       	movw	r16, r14
      5a:	77 01       	movw	r14, r14
      5c:	b8 01       	movw	r22, r16
      5e:	77 01       	movw	r14, r14
      60:	ed 01       	movw	r28, r26
      62:	65 04       	cpc	r6, r5
      64:	00 00       	nop
      66:	90 01       	movw	r18, r0
      68:	b8 01       	movw	r22, r16
      6a:	77 01       	movw	r14, r14
      6c:	ed 01       	movw	r28, r26
      6e:	77 01       	movw	r14, r14
      70:	ed 01       	movw	r28, r26
      72:	77 01       	movw	r14, r14
      74:	ed 01       	movw	r28, r26
      76:	bb 00       	.word	0x00bb	; ????
      78:	b8 01       	movw	r22, r16
      7a:	bb 00       	.word	0x00bb	; ????
      7c:	87 01       	movw	r16, r14
      7e:	77 01       	movw	r14, r14
      80:	87 01       	movw	r16, r14
      82:	77 01       	movw	r14, r14
      84:	87 01       	movw	r16, r14
      86:	65 04       	cpc	r6, r5
      88:	00 00       	nop
      8a:	90 01       	movw	r18, r0
      8c:	25 01       	movw	r4, r10
      8e:	bb 00       	.word	0x00bb	; ????
      90:	87 01       	movw	r16, r14
      92:	77 01       	movw	r14, r14
      94:	b8 01       	movw	r22, r16
      96:	77 01       	movw	r14, r14
      98:	ed 01       	movw	r28, r26
      9a:	77 01       	movw	r14, r14
      9c:	b8 01       	movw	r22, r16
      9e:	65 04       	cpc	r6, r5
      a0:	00 00       	nop
      a2:	90 01       	movw	r18, r0
      a4:	87 01       	movw	r16, r14
      a6:	bb 00       	.word	0x00bb	; ????
      a8:	ed 01       	movw	r28, r26
      aa:	77 01       	movw	r14, r14
      ac:	b8 01       	movw	r22, r16
      ae:	77 01       	movw	r14, r14
      b0:	87 01       	movw	r16, r14
      b2:	77 01       	movw	r14, r14
      b4:	ed 01       	movw	r28, r26
      b6:	32 02       	muls	r19, r18
      b8:	b8 01       	movw	r22, r16
      ba:	bb 00       	.word	0x00bb	; ????
      bc:	87 01       	movw	r16, r14
      be:	77 01       	movw	r14, r14
      c0:	00 00       	nop
      c2:	90 01       	movw	r18, r0
      c4:	4b 02       	muls	r20, r27
      c6:	ee 02       	muls	r30, r30
      c8:	ed 01       	movw	r28, r26
      ca:	77 01       	movw	r14, r14
      cc:	b8 01       	movw	r22, r16
      ce:	77 01       	movw	r14, r14
      d0:	87 01       	movw	r16, r14
      d2:	ee 02       	muls	r30, r30
      d4:	87 01       	movw	r16, r14
      d6:	65 04       	cpc	r6, r5

000000d8 <song_city_of_stars>:
      d8:	25 01 49 00 49 01 49 00 5d 01 49 00 87 01 49 00     %.I.I.I.].I...I.
      e8:	b8 01 26 01 4b 02 4c 02 4b 02 4c 02 4b 02 26 01     ..&.K.L.K.L.K.&.
      f8:	0b 02 26 01 4b 02 26 01 93 02 72 03 00 00 26 01     ..&.K.&...r...&.
     108:	93 02 26 01 93 02 26 01 4b 02 26 01 93 02 26 01     ..&...&.K.&...&.
     118:	93 02 72 03 00 00 26 01 93 02 26 01 93 02 26 01     ..r...&...&...&.
     128:	4b 02 26 01 93 02 26 01 ba 02 4c 02 ba 02 26 01     K.&...&...L...&.
     138:	93 02 26 01 93 02 26 01 4b 02 26 01 b8 01 72 03     ..&...&.K.&...r.
     148:	00 00 26 01 b8 01 26 01 4b 02 4c 02 4b 02 4c 02     ..&...&.K.L.K.L.
     158:	4b 02 26 01 0b 02 26 01 4b 02 26 01 93 02 72 03     K.&...&.K.&...r.

00000168 <song_hallelujah>:
     168:	49 01 4a 01 87 01 94 02 87 01 4a 01 87 01 94 02     I.J.......J.....
     178:	87 01 4a 01 b8 01 4a 01 b8 01 4a 01 b8 01 de 03     ..J...J...J.....
     188:	49 01 4a 01 87 01 94 02 87 01 4a 01 87 01 94 02     I.J.......J.....
     198:	87 01 4a 01 b8 01 4a 01 b8 01 4a 01 b8 01 de 03     ..J...J...J.....
     1a8:	87 01 4a 01 b8 01 94 02 b8 01 94 02 b8 01 4a 01     ..J...........J.
     1b8:	b8 01 4a 01 b8 01 94 02 87 01 4a 01 87 01 94 02     ..J.......J.....
     1c8:	5d 01 4a 01 87 01 de 03 87 01 de 03                 ].J.........

000001d4 <song_havana>:
     1d4:	e9 00 21 02 25 01 10 01 25 01 10 01 e9 00 10 01     ..!.%...%.......
     1e4:	e9 00 10 01 c3 00 42 04 00 00 10 01 25 01 10 01     ......B.....%...
     1f4:	05 01 10 01 25 01 10 01 37 01 10 01 25 01 10 01     ....%...7...%...
     204:	05 01 10 01 e9 00 10 01 25 01 10 01 25 01 10 01     ........%...%...
     214:	e9 00 10 01 e9 00 10 01 c3 00 42 04 00 00 10 01     ..........B.....
     224:	25 01 10 01 05 01 10 01 25 01 10 01 37 01 10 01     %.......%...7...
     234:	25 01 10 01 05 01 10 01 e9 00 10 01 25 01 10 01     %...........%...
     244:	e9 00 10 01 00 00 10 01 25 01 10 01 05 01 10 01     ........%.......
     254:	25 01 10 01 05 01 10 01 e9 00 10 01 25 01 10 01     %...........%...
     264:	dc 00 10 01 00 00 10 01 e9 00 10 01 dc 00 10 01     ................
     274:	e9 00 10 01 dc 00 10 01 e9 00 10 01 c3 00 42 04     ..............B.

00000284 <song_another_day_of_sun>:
     284:	cf 00 f0 00 05 01 f0 00 37 01 f0 00 37 01 78 00     ........7...7.x.
     294:	cf 00 78 00 00 00 78 00 cf 00 78 00 05 01 f0 00     ..x...x...x.....
     2a4:	37 01 f0 00 37 01 f0 00 cf 00 f0 00 25 01 f0 00     7...7.......%...
     2b4:	5d 01 f0 00 5d 01 78 00 e9 00 78 00 00 00 78 00     ]...].x...x...x.
     2c4:	25 01 78 00 5d 01 f0 00 d2 01 f0 00 9f 01 f0 00     %.x.]...........
     2d4:	87 01 f0 00 37 01 f0 00 05 01 f0 00 05 01 78 00     ....7.........x.
     2e4:	87 01 78 00 00 00 78 00 87 01 78 00 37 01 f0 00     ..x...x...x.7...
     2f4:	05 01 f0 00 05 01 f0 00 25 01 f0 00 e9 00 f0 00     ........%.......
     304:	c3 00 f0 00 c3 00 78 00 25 01 78 00 00 00 78 00     ......x.%.x...x.
     314:	25 01 78 00 e9 00 f0 00 c3 00 f0 00 c3 00 f0 00     %.x.............

00000324 <song_la_la_land>:
     324:	15 01 5e 01 71 01 5e 01 9f 01 5e 01 b8 01 5e 01     ..^.q.^...^...^.
     334:	9f 01 5e 01 71 01 5e 01 25 01 20 03 00 00 5e 01     ..^.q.^.%. ...^.
     344:	25 01 5e 01 71 01 5e 01 9f 01 5e 01 b8 01 5e 01     %.^.q.^...^...^.
     354:	9f 01 5e 01 71 01 5e 01 15 01 20 03                 ..^.q.^... .

00000360 <song_game_over>:
     360:	e9 00 f4 01 b8 00 f4 01 9b 00 f4 01 74 00 b0 04     ............t...

00000370 <song_sequence_correct>:
     370:	ba 02 7d 00 70 03 7d 00 16 04 f4 01                 ..}.p.}.....

0000037c <song_new_round>:
     37c:	05 01 fa 00 5d 01 7d 00 b8 01 7d 00 0b 02 7d 00     ....].}...}...}.
     38c:	00 00 7d 00 b8 01 7d 00 00 00 7d 00 0b 02 7d 00     ..}...}...}...}.

0000039c <__ctors_end>:
     39c:	11 24       	eor	r1, r1
     39e:	1f be       	out	0x3f, r1	; 63
     3a0:	cf ef       	ldi	r28, 0xFF	; 255
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df e3       	ldi	r29, 0x3F	; 63
     3a6:	de bf       	out	0x3e, r29	; 62

000003a8 <__do_clear_bss>:
     3a8:	2e e3       	ldi	r18, 0x3E	; 62
     3aa:	a4 e0       	ldi	r26, 0x04	; 4
     3ac:	be e3       	ldi	r27, 0x3E	; 62
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a0 36       	cpi	r26, 0x60	; 96
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>

000003b8 <__do_copy_data>:
     3b8:	1e e3       	ldi	r17, 0x3E	; 62
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	be e3       	ldi	r27, 0x3E	; 62
     3be:	e8 e7       	ldi	r30, 0x78	; 120
     3c0:	f1 e1       	ldi	r31, 0x11	; 17
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <__do_copy_data+0x10>
     3c4:	05 90       	lpm	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	a4 30       	cpi	r26, 0x04	; 4
     3ca:	b1 07       	cpc	r27, r17
     3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__do_copy_data+0xc>
     3ce:	20 d2       	rcall	.+1088   	; 0x810 <main>
     3d0:	d1 c6       	rjmp	.+3490   	; 0x1174 <_exit>

000003d2 <__bad_interrupt>:
     3d2:	16 ce       	rjmp	.-980    	; 0x0 <__vectors>

000003d4 <game_is_running>:
/*
 * Return whether the game is running
 */
int game_is_running()
{
	return (game_running == RUNNING);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <__data_end>
     3dc:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <__data_end+0x1>
     3e0:	21 30       	cpi	r18, 0x01	; 1
     3e2:	31 05       	cpc	r19, r1
     3e4:	11 f0       	breq	.+4      	; 0x3ea <game_is_running+0x16>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
}
     3ea:	08 95       	ret

000003ec <game_is_ready_to_start>:
/*
 * Return whether the game is ready to start
 */
int game_is_ready_to_start()
{
	if (starting_buttons_state[EASY_STARTING_BUTTON_1] 
     3ec:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <starting_buttons_state+0x4>
     3f0:	90 91 33 3e 	lds	r25, 0x3E33	; 0x803e33 <starting_buttons_state+0x5>
     3f4:	89 2b       	or	r24, r25
     3f6:	31 f0       	breq	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	    && starting_buttons_state[EASY_STARTING_BUTTON_2]) {
     3f8:	80 91 34 3e 	lds	r24, 0x3E34	; 0x803e34 <starting_buttons_state+0x6>
     3fc:	90 91 35 3e 	lds	r25, 0x3E35	; 0x803e35 <starting_buttons_state+0x7>
     400:	89 2b       	or	r24, r25
     402:	79 f4       	brne	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		return READY_EASY;
	} else if (starting_buttons_state[HARD_STARTING_BUTTON_1]
     404:	80 91 2e 3e 	lds	r24, 0x3E2E	; 0x803e2e <starting_buttons_state>
     408:	90 91 2f 3e 	lds	r25, 0x3E2F	; 0x803e2f <starting_buttons_state+0x1>
     40c:	89 2b       	or	r24, r25
     40e:	61 f0       	breq	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			   && starting_buttons_state[HARD_STARTING_BUTTON_2]) {
     410:	80 91 30 3e 	lds	r24, 0x3E30	; 0x803e30 <starting_buttons_state+0x2>
     414:	90 91 31 3e 	lds	r25, 0x3E31	; 0x803e31 <starting_buttons_state+0x3>
     418:	89 2b       	or	r24, r25
     41a:	49 f0       	breq	.+18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		return READY_HARD;			   
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	08 95       	ret
 */
int game_is_ready_to_start()
{
	if (starting_buttons_state[EASY_STARTING_BUTTON_1] 
	    && starting_buttons_state[EASY_STARTING_BUTTON_2]) {
		return READY_EASY;
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	08 95       	ret
	} else if (starting_buttons_state[HARD_STARTING_BUTTON_1]
			   && starting_buttons_state[HARD_STARTING_BUTTON_2]) {
		return READY_HARD;			   
	}
	
	return NOT_READY;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	90 e0       	ldi	r25, 0x00	; 0
}
     432:	08 95       	ret

00000434 <game_end_over>:
/*
 * End the game as loss
 */
void game_end_over()
{
	game_running = GAME_OVER;
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
     43c:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x1>
	
	util_music_play(song_game_over, SONG_GAME_OVER_LEN);
     440:	64 e0       	ldi	r22, 0x04	; 4
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e6       	ldi	r24, 0x60	; 96
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	16 d5       	rcall	.+2604   	; 0xe76 <util_music_play>
	
	wdt_mcu_reset();
     44a:	04 d5       	rcall	.+2568   	; 0xe54 <wdt_mcu_reset>
     44c:	08 95       	ret

0000044e <game_generate_sequence>:

/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
	for (int i = 0; i < len; i++)
     456:	16 16       	cp	r1, r22
     458:	17 06       	cpc	r1, r23
     45a:	a4 f4       	brge	.+40     	; 0x484 <game_generate_sequence+0x36>
     45c:	8c 01       	movw	r16, r24
     45e:	ec 01       	movw	r28, r24
     460:	66 0f       	add	r22, r22
     462:	77 1f       	adc	r23, r23
     464:	06 0f       	add	r16, r22
     466:	17 1f       	adc	r17, r23
		sequence[i] = rand() % BUTTON_COUNT;
     468:	70 d6       	rcall	.+3296   	; 0x114a <rand>
     46a:	83 70       	andi	r24, 0x03	; 3
     46c:	90 78       	andi	r25, 0x80	; 128
     46e:	99 23       	and	r25, r25
     470:	24 f4       	brge	.+8      	; 0x47a <game_generate_sequence+0x2c>
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	8c 6f       	ori	r24, 0xFC	; 252
     476:	9f 6f       	ori	r25, 0xFF	; 255
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	89 93       	st	Y+, r24
     47c:	99 93       	st	Y+, r25
/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++)
     47e:	c0 17       	cp	r28, r16
     480:	d1 07       	cpc	r29, r17
     482:	91 f7       	brne	.-28     	; 0x468 <game_generate_sequence+0x1a>
		sequence[i] = rand() % BUTTON_COUNT;
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <game_blink_sequence>:

/*
 * Blink the LED sequence
 */
void game_blink_sequence(int *sequence, int len)
{
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
     4a2:	16 16       	cp	r1, r22
     4a4:	17 06       	cpc	r1, r23
     4a6:	64 f5       	brge	.+88     	; 0x500 <game_blink_sequence+0x72>
     4a8:	6b 01       	movw	r12, r22
     4aa:	08 2f       	mov	r16, r24
     4ac:	19 2f       	mov	r17, r25
     4ae:	c0 e0       	ldi	r28, 0x00	; 0
     4b0:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
		//_delay_ms(750);
		
		/* Don't do the delay after the last LED */
		if (i < (len - 1))
     4b2:	5b 01       	movw	r10, r22
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	a2 1a       	sub	r10, r18
     4b8:	b1 08       	sbc	r11, r1
     4ba:	78 01       	movw	r14, r16
 * Blink the LED sequence
 */
void game_blink_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++) {
		led_blinker_turn_on(sequence[i]);
     4bc:	f8 01       	movw	r30, r16
     4be:	81 91       	ld	r24, Z+
     4c0:	91 91       	ld	r25, Z+
     4c2:	8f 01       	movw	r16, r30
     4c4:	a1 d3       	rcall	.+1858   	; 0xc08 <led_blinker_turn_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c6:	ff e1       	ldi	r31, 0x1F	; 31
     4c8:	21 ea       	ldi	r18, 0xA1	; 161
     4ca:	87 e0       	ldi	r24, 0x07	; 7
     4cc:	f1 50       	subi	r31, 0x01	; 1
     4ce:	20 40       	sbci	r18, 0x00	; 0
     4d0:	80 40       	sbci	r24, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <game_blink_sequence+0x3e>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <game_blink_sequence+0x48>
     4d6:	00 00       	nop
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
     4d8:	f7 01       	movw	r30, r14
     4da:	80 81       	ld	r24, Z
     4dc:	91 81       	ldd	r25, Z+1	; 0x01
     4de:	b1 d3       	rcall	.+1890   	; 0xc42 <led_blinker_turn_off>
		//_delay_ms(750);
		
		/* Don't do the delay after the last LED */
		if (i < (len - 1))
     4e0:	ca 15       	cp	r28, r10
     4e2:	db 05       	cpc	r29, r11
     4e4:	4c f4       	brge	.+18     	; 0x4f8 <game_blink_sequence+0x6a>
     4e6:	ff e1       	ldi	r31, 0x1F	; 31
     4e8:	21 ea       	ldi	r18, 0xA1	; 161
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	f1 50       	subi	r31, 0x01	; 1
     4ee:	20 40       	sbci	r18, 0x00	; 0
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <game_blink_sequence+0x5e>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <game_blink_sequence+0x68>
     4f6:	00 00       	nop
/*
 * Blink the LED sequence
 */
void game_blink_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++) {
     4f8:	21 96       	adiw	r28, 0x01	; 1
     4fa:	cc 16       	cp	r12, r28
     4fc:	dd 06       	cpc	r13, r29
     4fe:	e9 f6       	brne	.-70     	; 0x4ba <game_blink_sequence+0x2c>
		/* Don't do the delay after the last LED */
		if (i < (len - 1))
			_delay_ms(750);
	}
	
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	bf 90       	pop	r11
     512:	af 90       	pop	r10
     514:	08 95       	ret

00000516 <game_next_round>:
/*
 * Generate and blink out next round
 */
void game_next_round()
{
	button_interrupts_disable();
     516:	e3 d1       	rcall	.+966    	; 0x8de <button_interrupts_disable>
     518:	2a e2       	ldi	r18, 0x2A	; 42
     51a:	8c e2       	ldi	r24, 0x2C	; 44
     51c:	9a e0       	ldi	r25, 0x0A	; 10
     51e:	21 50       	subi	r18, 0x01	; 1
     520:	80 40       	sbci	r24, 0x00	; 0
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <game_next_round+0x8>
     526:	00 00       	nop
	
	_delay_ms(1000);
	
	round_current++;
     528:	60 91 36 3e 	lds	r22, 0x3E36	; 0x803e36 <round_current>
     52c:	70 91 37 3e 	lds	r23, 0x3E37	; 0x803e37 <round_current+0x1>
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	60 93 36 3e 	sts	0x3E36, r22	; 0x803e36 <round_current>
     538:	70 93 37 3e 	sts	0x3E37, r23	; 0x803e37 <round_current+0x1>

	sequence_ptr = 0;
     53c:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <sequence_ptr>
     540:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <sequence_ptr+0x1>

	game_blink_sequence(blinker_sequence, round_current);
     544:	8c e0       	ldi	r24, 0x0C	; 12
     546:	9e e3       	ldi	r25, 0x3E	; 62
     548:	a2 df       	rcall	.-188    	; 0x48e <game_blink_sequence>
     54a:	2a e6       	ldi	r18, 0x6A	; 106
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	21 50       	subi	r18, 0x01	; 1
     552:	80 40       	sbci	r24, 0x00	; 0
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	e1 f7       	brne	.-8      	; 0x550 <game_next_round+0x3a>
     558:	00 c0       	rjmp	.+0      	; 0x55a <game_next_round+0x44>
			
	_delay_ms(100);
	util_music_play(song_new_round, SONG_NEW_ROUND_LEN);
     55a:	68 e0       	ldi	r22, 0x08	; 8
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	8c e7       	ldi	r24, 0x7C	; 124
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	89 d4       	rcall	.+2322   	; 0xe76 <util_music_play>
	
	util_led_sequence_end();
     564:	0d d5       	rcall	.+2586   	; 0xf80 <util_led_sequence_end>

	button_interrupts_enable();
     566:	a3 d1       	rcall	.+838    	; 0x8ae <button_interrupts_enable>
     568:	08 95       	ret

0000056a <game_start>:

/*
 * Start a new game
 */
void game_start(int difficulty)
{	
     56a:	ec 01       	movw	r28, r24
	button_interrupts_disable();
     56c:	b8 d1       	rcall	.+880    	; 0x8de <button_interrupts_disable>
	
	/* Set seed for rand session */
	srand(eeprom_get_next_seed());
     56e:	ed d2       	rcall	.+1498   	; 0xb4a <eeprom_get_next_seed>
     570:	f0 d5       	rcall	.+3040   	; 0x1152 <srand>
	
	/* Intro score blinking */
	util_led_intro();
     572:	e7 d4       	rcall	.+2510   	; 0xf42 <util_led_intro>
	
	/* Reset variables */
	game_running = RUNNING;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
     57c:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x1>
	game_score = 0;
     580:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <game_score>
     584:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <game_score+0x1>
	round_current = 0;
     588:	10 92 36 3e 	sts	0x3E36, r1	; 0x803e36 <round_current>
     58c:	10 92 37 3e 	sts	0x3E37, r1	; 0x803e37 <round_current+0x1>
	effect_state = 0;
     590:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <effect_state>
     594:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <effect_state+0x1>
	
	game_difficulty = difficulty;
     598:	c0 93 2c 3e 	sts	0x3E2C, r28	; 0x803e2c <game_difficulty>
     59c:	d0 93 2d 3e 	sts	0x3E2D, r29	; 0x803e2d <game_difficulty+0x1>

	switch (difficulty) {
     5a0:	20 97       	sbiw	r28, 0x00	; 0
     5a2:	19 f0       	breq	.+6      	; 0x5aa <game_start+0x40>
     5a4:	21 97       	sbiw	r28, 0x01	; 1
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <game_start+0x4e>
     5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <game_start+0x5a>
		case EASY:
			round_count = EASY_ROUND_COUNT;
     5aa:	88 e0       	ldi	r24, 0x08	; 8
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <round_count>
     5b2:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <round_count+0x1>
			break;
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <game_start+0x5a>
		case HARD:
			round_count = HARD_ROUND_COUNT;
     5b8:	80 e1       	ldi	r24, 0x10	; 16
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <round_count>
     5c0:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <round_count+0x1>
			break;			
	}
	
	led_counter_set(game_score);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	fb d2       	rcall	.+1526   	; 0xbbe <led_counter_set>
	
	game_generate_sequence(blinker_sequence, round_count);
     5c8:	60 91 06 3e 	lds	r22, 0x3E06	; 0x803e06 <round_count>
     5cc:	70 91 07 3e 	lds	r23, 0x3E07	; 0x803e07 <round_count+0x1>
     5d0:	8c e0       	ldi	r24, 0x0C	; 12
     5d2:	9e e3       	ldi	r25, 0x3E	; 62
     5d4:	3c df       	rcall	.-392    	; 0x44e <game_generate_sequence>
	
	game_next_round();
     5d6:	9f df       	rcall	.-194    	; 0x516 <game_next_round>
	
	/* Go in sleep and set reset timeout after each round */
	while(1) {
		wdt_on();
		sleep_mode();
     5d8:	c0 e5       	ldi	r28, 0x50	; 80
     5da:	d0 e0       	ldi	r29, 0x00	; 0
	
	game_next_round();
	
	/* Go in sleep and set reset timeout after each round */
	while(1) {
		wdt_on();
     5dc:	41 d4       	rcall	.+2178   	; 0xe60 <wdt_on>
		sleep_mode();
     5de:	88 81       	ld	r24, Y
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	88 83       	st	Y, r24
     5e4:	88 95       	sleep
     5e6:	88 81       	ld	r24, Y
     5e8:	8e 7f       	andi	r24, 0xFE	; 254
     5ea:	88 83       	st	Y, r24
     5ec:	f7 cf       	rjmp	.-18     	; 0x5dc <game_start+0x72>

000005ee <game_led_effect_update>:
/*
 * Automatically called handler after timeout, after the game ended
 */
void game_led_effect_update()
{
	switch (game_difficulty) {
     5ee:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <game_difficulty>
     5f2:	90 91 2d 3e 	lds	r25, 0x3E2D	; 0x803e2d <game_difficulty+0x1>
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	19 f0       	breq	.+6      	; 0x600 <game_led_effect_update+0x12>
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	a9 f0       	breq	.+42     	; 0x628 <game_led_effect_update+0x3a>
     5fe:	21 c0       	rjmp	.+66     	; 0x642 <game_led_effect_update+0x54>
		case EASY:
			if (effect_state == 0)
     600:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <effect_state>
     604:	90 91 59 3e 	lds	r25, 0x3E59	; 0x803e59 <effect_state+0x1>
     608:	00 97       	sbiw	r24, 0x00	; 0
     60a:	39 f4       	brne	.+14     	; 0x61a <game_led_effect_update+0x2c>
				effect_state = 8;
     60c:	88 e0       	ldi	r24, 0x08	; 8
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <effect_state>
     614:	90 93 59 3e 	sts	0x3E59, r25	; 0x803e59 <effect_state+0x1>
     618:	14 c0       	rjmp	.+40     	; 0x642 <game_led_effect_update+0x54>
			else
				effect_state >>= 1;
     61a:	95 95       	asr	r25
     61c:	87 95       	ror	r24
     61e:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <effect_state>
     622:	90 93 59 3e 	sts	0x3E59, r25	; 0x803e59 <effect_state+0x1>
     626:	0d c0       	rjmp	.+26     	; 0x642 <game_led_effect_update+0x54>
			break;
		
		case HARD:
			effect_state = rand() % 16;
     628:	90 d5       	rcall	.+2848   	; 0x114a <rand>
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	90 78       	andi	r25, 0x80	; 128
     62e:	99 23       	and	r25, r25
     630:	24 f4       	brge	.+8      	; 0x63a <game_led_effect_update+0x4c>
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	80 6f       	ori	r24, 0xF0	; 240
     636:	9f 6f       	ori	r25, 0xFF	; 255
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <effect_state>
     63e:	90 93 59 3e 	sts	0x3E59, r25	; 0x803e59 <effect_state+0x1>
			break;
	}
	
	led_counter_set(effect_state);
     642:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <effect_state>
     646:	bb d2       	rcall	.+1398   	; 0xbbe <led_counter_set>
     648:	08 95       	ret

0000064a <game_end_win>:
/*
 * End the game as winning
 */
void game_end_win()
{
	game_running = WON;
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <__data_end>
     652:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <__data_end+0x1>
	
	/* Keep the LED effect running while playing song - not possible yet */
	/* Experiencing glitches with sound, no way to solve it now... */
	game_led_effect_update();	
     656:	cb df       	rcall	.-106    	; 0x5ee <game_led_effect_update>
	rtc_enable();	
     658:	11 d3       	rcall	.+1570   	; 0xc7c <rtc_enable>
     65a:	2a e6       	ldi	r18, 0x6A	; 106
     65c:	8e e6       	ldi	r24, 0x6E	; 110
     65e:	99 e1       	ldi	r25, 0x19	; 25
     660:	21 50       	subi	r18, 0x01	; 1
     662:	80 40       	sbci	r24, 0x00	; 0
     664:	90 40       	sbci	r25, 0x00	; 0
     666:	e1 f7       	brne	.-8      	; 0x660 <game_end_win+0x16>
     668:	00 00       	nop
	_delay_ms(2500);	
	rtc_disable();
     66a:	12 d3       	rcall	.+1572   	; 0xc90 <rtc_disable>
	led_counter_set(15);
     66c:	8f e0       	ldi	r24, 0x0F	; 15
     66e:	a7 d2       	rcall	.+1358   	; 0xbbe <led_counter_set>
	
	/* Play final song */
	switch ((rand() % SONGS_COUNT)) {
     670:	6c d5       	rcall	.+2776   	; 0x114a <rand>
     672:	66 e0       	ldi	r22, 0x06	; 6
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	a6 d4       	rcall	.+2380   	; 0xfc4 <__divmodhi4>
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	91 05       	cpc	r25, r1
     67c:	c9 f0       	breq	.+50     	; 0x6b0 <game_end_win+0x66>
     67e:	2c f4       	brge	.+10     	; 0x68a <game_end_win+0x40>
     680:	00 97       	sbiw	r24, 0x00	; 0
     682:	51 f0       	breq	.+20     	; 0x698 <game_end_win+0x4e>
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	71 f0       	breq	.+28     	; 0x6a4 <game_end_win+0x5a>
     688:	2a c0       	rjmp	.+84     	; 0x6de <game_end_win+0x94>
     68a:	84 30       	cpi	r24, 0x04	; 4
     68c:	91 05       	cpc	r25, r1
     68e:	e1 f0       	breq	.+56     	; 0x6c8 <game_end_win+0x7e>
     690:	ac f0       	brlt	.+42     	; 0x6bc <game_end_win+0x72>
     692:	05 97       	sbiw	r24, 0x05	; 5
     694:	f9 f0       	breq	.+62     	; 0x6d4 <game_end_win+0x8a>
     696:	23 c0       	rjmp	.+70     	; 0x6de <game_end_win+0x94>
		case SONG_LA_LA_LAND:
			util_music_play(song_la_la_land, SONG_LA_LA_LAND_LEN);
     698:	6f e0       	ldi	r22, 0x0F	; 15
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	84 e2       	ldi	r24, 0x24	; 36
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	ea d3       	rcall	.+2004   	; 0xe76 <util_music_play>
			break;
     6a2:	1d c0       	rjmp	.+58     	; 0x6de <game_end_win+0x94>
		case SONG_ANOTHER_DAY_OF_SUN:
			util_music_play(song_another_day_of_sun, SONG_ANOTHER_DAY_OF_SUN_LEN);
     6a4:	68 e2       	ldi	r22, 0x28	; 40
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	84 e8       	ldi	r24, 0x84	; 132
     6aa:	92 e0       	ldi	r25, 0x02	; 2
     6ac:	e4 d3       	rcall	.+1992   	; 0xe76 <util_music_play>
			break;	
     6ae:	17 c0       	rjmp	.+46     	; 0x6de <game_end_win+0x94>
		case SONG_HAVANA:
			util_music_play(song_havana, SONG_HAVANA_LEN);
     6b0:	6c e2       	ldi	r22, 0x2C	; 44
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	84 ed       	ldi	r24, 0xD4	; 212
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	de d3       	rcall	.+1980   	; 0xe76 <util_music_play>
			break;	
     6ba:	11 c0       	rjmp	.+34     	; 0x6de <game_end_win+0x94>
		case SONG_HALLELUJAH:
			util_music_play(song_hallelujah, SONG_HALLELUJAH_LEN);
     6bc:	6b e1       	ldi	r22, 0x1B	; 27
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	88 e6       	ldi	r24, 0x68	; 104
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	d8 d3       	rcall	.+1968   	; 0xe76 <util_music_play>
			break;
     6c6:	0b c0       	rjmp	.+22     	; 0x6de <game_end_win+0x94>
		case SONG_CITY_OF_STARS:
			util_music_play(song_city_of_stars, SONG_CITY_OF_STARS_LEN);
     6c8:	64 e2       	ldi	r22, 0x24	; 36
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	88 ed       	ldi	r24, 0xD8	; 216
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	d2 d3       	rcall	.+1956   	; 0xe76 <util_music_play>
			break;
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <game_end_win+0x94>
		case SONG_PERFECT:
			util_music_play(song_perfect, SONG_PERFECT_LEN);
     6d4:	69 e2       	ldi	r22, 0x29	; 41
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 e3       	ldi	r24, 0x34	; 52
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	cc d3       	rcall	.+1944   	; 0xe76 <util_music_play>
			break;				
	}
	
	wdt_mcu_reset();
     6de:	ba d3       	rcall	.+1908   	; 0xe54 <wdt_mcu_reset>
     6e0:	08 95       	ret

000006e2 <button_pressed>:

/*
 * Automatically called handler after button pressing
 */
void button_pressed(int button)
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
	wdt_off();
     6e8:	c1 d3       	rcall	.+1922   	; 0xe6c <wdt_off>

	if (!game_is_running()) {
     6ea:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
     6ee:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <__data_end+0x1>
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	49 f0       	breq	.+18     	; 0x708 <button_pressed+0x26>
		starting_buttons_state[button] = 1;		
     6f6:	cc 0f       	add	r28, r28
     6f8:	dd 1f       	adc	r29, r29
     6fa:	c2 5d       	subi	r28, 0xD2	; 210
     6fc:	d1 4c       	sbci	r29, 0xC1	; 193
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	88 83       	st	Y, r24
     704:	99 83       	std	Y+1, r25	; 0x01
		return;
     706:	03 c0       	rjmp	.+6      	; 0x70e <button_pressed+0x2c>
	}

	led_blinker_turn_on(util_button_to_blinker(button));
     708:	ce 01       	movw	r24, r28
     70a:	07 d4       	rcall	.+2062   	; 0xf1a <util_button_to_blinker>
     70c:	7d d2       	rcall	.+1274   	; 0xc08 <led_blinker_turn_on>
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <button_released>:

/*
 * Automatically called handler after button releasing
 */
void button_released(int button)
{
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	ec 01       	movw	r28, r24
	wdt_off();
     71a:	a8 d3       	rcall	.+1872   	; 0xe6c <wdt_off>
	
	if (!game_is_running()) {
     71c:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
     720:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <__data_end+0x1>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	39 f0       	breq	.+14     	; 0x736 <button_released+0x22>
		starting_buttons_state[button] = 0;
     728:	cc 0f       	add	r28, r28
     72a:	dd 1f       	adc	r29, r29
     72c:	c2 5d       	subi	r28, 0xD2	; 210
     72e:	d1 4c       	sbci	r29, 0xC1	; 193
     730:	18 82       	st	Y, r1
     732:	19 82       	std	Y+1, r1	; 0x01
		return;
     734:	55 c0       	rjmp	.+170    	; 0x7e0 <button_released+0xcc>
	}

	led_blinker_turn_off(util_button_to_blinker(button));
     736:	ce 01       	movw	r24, r28
     738:	f0 d3       	rcall	.+2016   	; 0xf1a <util_button_to_blinker>
     73a:	83 d2       	rcall	.+1286   	; 0xc42 <led_blinker_turn_off>
	
	/* Add button to sequence */
	button_sequence[sequence_ptr] = button;
     73c:	20 91 08 3e 	lds	r18, 0x3E08	; 0x803e08 <sequence_ptr>
     740:	30 91 09 3e 	lds	r19, 0x3E09	; 0x803e09 <sequence_ptr+0x1>
     744:	c9 01       	movw	r24, r18
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	fc 01       	movw	r30, r24
     74c:	e8 5c       	subi	r30, 0xC8	; 200
     74e:	f1 4c       	sbci	r31, 0xC1	; 193
     750:	c0 83       	st	Z, r28
     752:	d1 83       	std	Z+1, r29	; 0x01

	/* Check if correct button was released */
	if (button_sequence[sequence_ptr] == blinker_sequence[sequence_ptr]) {
     754:	fc 01       	movw	r30, r24
     756:	e4 5f       	subi	r30, 0xF4	; 244
     758:	f1 4c       	sbci	r31, 0xC1	; 193
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	c8 17       	cp	r28, r24
     760:	d9 07       	cpc	r29, r25
     762:	e9 f5       	brne	.+122    	; 0x7de <button_released+0xca>
		sequence_ptr++;
     764:	2f 5f       	subi	r18, 0xFF	; 255
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	20 93 08 3e 	sts	0x3E08, r18	; 0x803e08 <sequence_ptr>
     76c:	30 93 09 3e 	sts	0x3E09, r19	; 0x803e09 <sequence_ptr+0x1>
				
		/* Check if all buttons were pressed and released in this round */
		if (sequence_ptr == round_current) {
     770:	80 91 36 3e 	lds	r24, 0x3E36	; 0x803e36 <round_current>
     774:	90 91 37 3e 	lds	r25, 0x3E37	; 0x803e37 <round_current+0x1>
     778:	28 17       	cp	r18, r24
     77a:	39 07       	cpc	r19, r25
     77c:	89 f5       	brne	.+98     	; 0x7e0 <button_released+0xcc>
			game_score++;
     77e:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <game_score>
     782:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <game_score+0x1>
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <game_score>
     78c:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <game_score+0x1>
			led_counter_set(game_score);
     790:	16 d2       	rcall	.+1068   	; 0xbbe <led_counter_set>
			
			/* Check if all rounds were passed */
			if (round_current == round_count) {
     792:	20 91 36 3e 	lds	r18, 0x3E36	; 0x803e36 <round_current>
     796:	30 91 37 3e 	lds	r19, 0x3E37	; 0x803e37 <round_current+0x1>
     79a:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <round_count>
     79e:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <round_count+0x1>
     7a2:	28 17       	cp	r18, r24
     7a4:	39 07       	cpc	r19, r25
     7a6:	59 f4       	brne	.+22     	; 0x7be <button_released+0xaa>
     7a8:	2f e3       	ldi	r18, 0x3F	; 63
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	21 50       	subi	r18, 0x01	; 1
     7b0:	80 40       	sbci	r24, 0x00	; 0
     7b2:	90 40       	sbci	r25, 0x00	; 0
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <button_released+0x9a>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <button_released+0xa4>
     7b8:	00 00       	nop
				//button_interrupts_disable();
				_delay_ms(300);
				game_end_win();
     7ba:	47 df       	rcall	.-370    	; 0x64a <game_end_win>
				return;
     7bc:	11 c0       	rjmp	.+34     	; 0x7e0 <button_released+0xcc>
     7be:	2f e3       	ldi	r18, 0x3F	; 63
     7c0:	8d e0       	ldi	r24, 0x0D	; 13
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <button_released+0xb0>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <button_released+0xba>
     7ce:	00 00       	nop
			} else {
				_delay_ms(300);
				util_music_play(song_sequence_correct, SONG_SEQUENCE_CORRECT_LEN);
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 e7       	ldi	r24, 0x70	; 112
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	4e d3       	rcall	.+1692   	; 0xe76 <util_music_play>
				
				game_next_round();
     7da:	9d de       	rcall	.-710    	; 0x516 <game_next_round>
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <button_released+0xcc>
			}
		} else
			return;		
	} else {
		/* Released button doesn't match the blinker sequence - game over */
		game_end_over();
     7de:	2a de       	rcall	.-940    	; 0x434 <game_end_over>
	}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <setup>:
/*
 * Setup hardware peripherals
 */
void setup()
{
	led_init();
     7e6:	c8 d1       	rcall	.+912    	; 0xb78 <led_init>
	speaker_init();
     7e8:	b8 d2       	rcall	.+1392   	; 0xd5a <speaker_init>
	
	/* Register handler functions for buttons */
	button_init(&button_pressed, &button_released);
     7ea:	6a e8       	ldi	r22, 0x8A	; 138
     7ec:	73 e0       	ldi	r23, 0x03	; 3
     7ee:	81 e7       	ldi	r24, 0x71	; 113
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	3b d0       	rcall	.+118    	; 0x86a <button_init>
	
	/* Register handler function for RTC effects */
	rtc_init(&game_led_effect_update);
     7f4:	87 ef       	ldi	r24, 0xF7	; 247
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	5d d2       	rcall	.+1210   	; 0xcb4 <rtc_init>
	rtc_set_timeout(LED_EFFECT_TIMEOUT);
     7fa:	84 eb       	ldi	r24, 0xB4	; 180
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	73 d2       	rcall	.+1254   	; 0xce6 <rtc_set_timeout>
	
	sei();
     800:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_STANDBY);	
     802:	e0 e5       	ldi	r30, 0x50	; 80
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	89 7f       	andi	r24, 0xF9	; 249
     80a:	82 60       	ori	r24, 0x02	; 2
     80c:	80 83       	st	Z, r24
     80e:	08 95       	ret

00000810 <main>:
/*
 * Main function called upon reset
 */
int main(void)
{
	setup();
     810:	ea df       	rcall	.-44     	; 0x7e6 <setup>
	
	while (1) {
		/* Put CPU in sleep immediately, awake by button depressing */
		sleep_mode();
     812:	c0 e5       	ldi	r28, 0x50	; 80
     814:	d0 e0       	ldi	r29, 0x00	; 0
     816:	88 81       	ld	r24, Y
     818:	81 60       	ori	r24, 0x01	; 1
     81a:	88 83       	st	Y, r24
     81c:	88 95       	sleep
     81e:	88 81       	ld	r24, Y
     820:	8e 7f       	andi	r24, 0xFE	; 254
     822:	88 83       	st	Y, r24
		
		if(!game_is_running()) {
     824:	d7 dd       	rcall	.-1106   	; 0x3d4 <game_is_running>
     826:	89 2b       	or	r24, r25
     828:	b1 f7       	brne	.-20     	; 0x816 <main+0x6>
			int start_status = game_is_ready_to_start();
     82a:	e0 dd       	rcall	.-1088   	; 0x3ec <game_is_ready_to_start>
     82c:	8c 01       	movw	r16, r24
			
			/* Both starting buttons are not pressed */
			if (start_status == NOT_READY)
     82e:	02 97       	sbiw	r24, 0x02	; 2
     830:	91 f3       	breq	.-28     	; 0x816 <main+0x6>
     832:	24 e5       	ldi	r18, 0x54	; 84
     834:	88 e5       	ldi	r24, 0x58	; 88
     836:	94 e1       	ldi	r25, 0x14	; 20
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	90 40       	sbci	r25, 0x00	; 0
     83e:	e1 f7       	brne	.-8      	; 0x838 <main+0x28>
     840:	00 c0       	rjmp	.+0      	; 0x842 <main+0x32>
     842:	00 c0       	rjmp	.+0      	; 0x844 <main+0x34>
				continue;
				
			_delay_ms(BUTTON_START_TIMEOUT);
			
			/* Check if buttons are still pressed after timeout */
			if (start_status == game_is_ready_to_start()) {
     844:	d3 dd       	rcall	.-1114   	; 0x3ec <game_is_ready_to_start>
     846:	08 17       	cp	r16, r24
     848:	19 07       	cpc	r17, r25
     84a:	29 f7       	brne	.-54     	; 0x816 <main+0x6>
				switch (start_status) {
     84c:	01 15       	cp	r16, r1
     84e:	11 05       	cpc	r17, r1
     850:	21 f0       	breq	.+8      	; 0x85a <main+0x4a>
     852:	01 30       	cpi	r16, 0x01	; 1
     854:	11 05       	cpc	r17, r1
     856:	29 f0       	breq	.+10     	; 0x862 <main+0x52>
     858:	de cf       	rjmp	.-68     	; 0x816 <main+0x6>
					case READY_EASY:
						game_start(EASY);
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	85 de       	rcall	.-758    	; 0x56a <game_start>
						break;
     860:	da cf       	rjmp	.-76     	; 0x816 <main+0x6>
					case READY_HARD:
						game_start(HARD);
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	81 de       	rcall	.-766    	; 0x56a <game_start>
						break;
     868:	d6 cf       	rjmp	.-84     	; 0x816 <main+0x6>

0000086a <button_init>:
 */
void button_init(void (*button_event_pressed_handler)(int),
				 void (*button_event_released_handler)(int))
{
	/* Set as input pin */
	BUTTON_GREEN_PORT.DIRCLR = BUTTON_GREEN_PIN;
     86a:	a0 e4       	ldi	r26, 0x40	; 64
     86c:	b4 e0       	ldi	r27, 0x04	; 4
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	12 96       	adiw	r26, 0x02	; 2
     872:	2c 93       	st	X, r18
     874:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_ORANGE_PORT.DIRCLR = BUTTON_ORANGE_PIN;
     876:	e0 e2       	ldi	r30, 0x20	; 32
     878:	f4 e0       	ldi	r31, 0x04	; 4
     87a:	24 e0       	ldi	r18, 0x04	; 4
     87c:	22 83       	std	Z+2, r18	; 0x02
	BUTTON_YELLOW_PORT.DIRCLR = BUTTON_YELLOW_PIN;
     87e:	22 e0       	ldi	r18, 0x02	; 2
     880:	12 96       	adiw	r26, 0x02	; 2
     882:	2c 93       	st	X, r18
     884:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_RED_PORT.DIRCLR = BUTTON_RED_PIN;
     886:	28 e0       	ldi	r18, 0x08	; 8
     888:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable pull-up and interrupt */
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     88a:	29 e0       	ldi	r18, 0x09	; 9
     88c:	50 96       	adiw	r26, 0x10	; 16
     88e:	2c 93       	st	X, r18
     890:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     892:	22 8b       	std	Z+18, r18	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     894:	51 96       	adiw	r26, 0x11	; 17
     896:	2c 93       	st	X, r18
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
     898:	23 8b       	std	Z+19, r18	; 0x13

	button_pressed_handler = button_event_pressed_handler;
     89a:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <button_pressed_handler>
     89e:	90 93 5d 3e 	sts	0x3E5D, r25	; 0x803e5d <button_pressed_handler+0x1>
	button_released_handler = button_event_released_handler;
     8a2:	60 93 5a 3e 	sts	0x3E5A, r22	; 0x803e5a <button_released_handler>
     8a6:	70 93 5b 3e 	sts	0x3E5B, r23	; 0x803e5b <button_released_handler+0x1>
	
	/* Enable global interrupts */
	sei();
     8aa:	78 94       	sei
     8ac:	08 95       	ret

000008ae <button_interrupts_enable>:
/*
 * Enable hardware interrupts for buttons
 */
void button_interrupts_enable()
{
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;
     8ae:	a0 e4       	ldi	r26, 0x40	; 64
     8b0:	b4 e0       	ldi	r27, 0x04	; 4
     8b2:	50 96       	adiw	r26, 0x10	; 16
     8b4:	8c 91       	ld	r24, X
     8b6:	50 97       	sbiw	r26, 0x10	; 16
     8b8:	81 60       	ori	r24, 0x01	; 1
     8ba:	50 96       	adiw	r26, 0x10	; 16
     8bc:	8c 93       	st	X, r24
     8be:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;
     8c0:	e0 e2       	ldi	r30, 0x20	; 32
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	82 89       	ldd	r24, Z+18	; 0x12
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	82 8b       	std	Z+18, r24	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;
     8ca:	51 96       	adiw	r26, 0x11	; 17
     8cc:	8c 91       	ld	r24, X
     8ce:	51 97       	sbiw	r26, 0x11	; 17
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	51 96       	adiw	r26, 0x11	; 17
     8d4:	8c 93       	st	X, r24
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL |= PORT_ISC_BOTHEDGES_gc;	
     8d6:	83 89       	ldd	r24, Z+19	; 0x13
     8d8:	81 60       	ori	r24, 0x01	; 1
     8da:	83 8b       	std	Z+19, r24	; 0x13
     8dc:	08 95       	ret

000008de <button_interrupts_disable>:
/*
 * Disable hardware interrupts for buttons
 */
void button_interrupts_disable()
{
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8de:	a0 e4       	ldi	r26, 0x40	; 64
     8e0:	b4 e0       	ldi	r27, 0x04	; 4
     8e2:	50 96       	adiw	r26, 0x10	; 16
     8e4:	8c 91       	ld	r24, X
     8e6:	50 97       	sbiw	r26, 0x10	; 16
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	50 96       	adiw	r26, 0x10	; 16
     8ec:	8c 93       	st	X, r24
     8ee:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8f0:	e0 e2       	ldi	r30, 0x20	; 32
     8f2:	f4 e0       	ldi	r31, 0x04	; 4
     8f4:	82 89       	ldd	r24, Z+18	; 0x12
     8f6:	8e 7f       	andi	r24, 0xFE	; 254
     8f8:	82 8b       	std	Z+18, r24	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     8fa:	51 96       	adiw	r26, 0x11	; 17
     8fc:	8c 91       	ld	r24, X
     8fe:	51 97       	sbiw	r26, 0x11	; 17
     900:	8e 7f       	andi	r24, 0xFE	; 254
     902:	51 96       	adiw	r26, 0x11	; 17
     904:	8c 93       	st	X, r24
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL &= ~(PORT_ISC_BOTHEDGES_gc);
     906:	83 89       	ldd	r24, Z+19	; 0x13
     908:	8e 7f       	andi	r24, 0xFE	; 254
     90a:	83 8b       	std	Z+19, r24	; 0x13
     90c:	08 95       	ret

0000090e <button_is_pressed>:
/*
 * Return 1 if 'button' is pressed or 0 if released
 */
int button_is_pressed(int button)
{
	switch (button) {
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	91 05       	cpc	r25, r1
     912:	89 f0       	breq	.+34     	; 0x936 <button_is_pressed+0x28>
     914:	1c f4       	brge	.+6      	; 0x91c <button_is_pressed+0xe>
     916:	89 2b       	or	r24, r25
     918:	39 f0       	breq	.+14     	; 0x928 <button_is_pressed+0x1a>
     91a:	28 c0       	rjmp	.+80     	; 0x96c <button_is_pressed+0x5e>
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	91 05       	cpc	r25, r1
     920:	99 f0       	breq	.+38     	; 0x948 <button_is_pressed+0x3a>
     922:	03 97       	sbiw	r24, 0x03	; 3
     924:	c9 f0       	breq	.+50     	; 0x958 <button_is_pressed+0x4a>
     926:	22 c0       	rjmp	.+68     	; 0x96c <button_is_pressed+0x5e>
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
     928:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
				return 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	89 27       	eor	r24, r25
     930:	81 70       	andi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	08 95       	ret
			break;
		}
		case BUTTON_ORANGE: {
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
     936:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
     93a:	86 95       	lsr	r24
     93c:	86 95       	lsr	r24
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	89 27       	eor	r24, r25
     942:	81 70       	andi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	08 95       	ret
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
				return 1;
			break;
		}
		case BUTTON_YELLOW: {
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
     948:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
     94c:	86 95       	lsr	r24
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	89 27       	eor	r24, r25
     952:	81 70       	andi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	08 95       	ret
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
				return 1;
			break;
		}
		case BUTTON_RED: {
			if (!(BUTTON_RED_PORT.IN & BUTTON_RED_PIN))
     958:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
     95c:	86 95       	lsr	r24
     95e:	86 95       	lsr	r24
     960:	86 95       	lsr	r24
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	89 27       	eor	r24, r25
     966:	81 70       	andi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	08 95       	ret
				return 1;
			break;
		}
	}
		
	return 0;
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
}
     970:	08 95       	ret

00000972 <button_call_handler>:

/*
 * Call handler for button event
 */
void button_call_handler(int button)
{
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24
     978:	8d e8       	ldi	r24, 0x8D	; 141
     97a:	90 e2       	ldi	r25, 0x20	; 32
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <button_call_handler+0xa>
     980:	00 00       	nop
	/* Button debounce */
	_delay_ms(BUTTON_BOUNCE_MS);
	
	if (button_is_pressed(button)) {
     982:	ce 01       	movw	r24, r28
     984:	c4 df       	rcall	.-120    	; 0x90e <button_is_pressed>
     986:	89 2b       	or	r24, r25
     988:	39 f0       	breq	.+14     	; 0x998 <button_call_handler+0x26>
		(*button_pressed_handler)(button);
     98a:	e0 91 5c 3e 	lds	r30, 0x3E5C	; 0x803e5c <button_pressed_handler>
     98e:	f0 91 5d 3e 	lds	r31, 0x3E5D	; 0x803e5d <button_pressed_handler+0x1>
     992:	ce 01       	movw	r24, r28
     994:	09 95       	icall
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <button_call_handler+0x32>
	} else {
		(*button_released_handler)(button);
     998:	e0 91 5a 3e 	lds	r30, 0x3E5A	; 0x803e5a <button_released_handler>
     99c:	f0 91 5b 3e 	lds	r31, 0x3E5B	; 0x803e5b <button_released_handler+0x1>
     9a0:	ce 01       	movw	r24, r28
     9a2:	09 95       	icall
	}
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <__vector_3>:

/*
 * Interrupt service routine for PORTA
 */
ISR(PORTA_PORT_vect)
{
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	2f 93       	push	r18
     9b6:	3f 93       	push	r19
     9b8:	4f 93       	push	r20
     9ba:	5f 93       	push	r21
     9bc:	6f 93       	push	r22
     9be:	7f 93       	push	r23
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	ef 93       	push	r30
     9ca:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_GREEN_PIN) {
     9cc:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9d0:	80 ff       	sbrs	r24, 0
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <__vector_3+0x30>
		button_call_handler(BUTTON_GREEN);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	cc df       	rcall	.-104    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_ORANGE_PIN) {
     9da:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9de:	82 ff       	sbrs	r24, 2
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <__vector_3+0x3e>
		button_call_handler(BUTTON_ORANGE);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	c5 df       	rcall	.-118    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_YELLOW_PIN) {
     9e8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9ec:	81 ff       	sbrs	r24, 1
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <__vector_3+0x4c>
		button_call_handler(BUTTON_YELLOW);
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	be df       	rcall	.-132    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_RED_PIN) {
     9f6:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     9fa:	83 ff       	sbrs	r24, 3
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <__vector_3+0x5a>
		button_call_handler(BUTTON_RED);
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	b7 df       	rcall	.-146    	; 0x972 <button_call_handler>
	}
	#endif
	
	/* Clear interrupt flag, so the next one can occur */
	PORTA.INTFLAGS = 0xff;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_4>:

/*
 * Interrupt service routine for PORTB 
 */
ISR(PORTB_PORT_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_GREEN_PIN) {
     a4e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a52:	80 ff       	sbrs	r24, 0
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <__vector_4+0x30>
		button_call_handler(BUTTON_GREEN);
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	8b df       	rcall	.-234    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_ORANGE_PIN) {
     a5c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a60:	82 ff       	sbrs	r24, 2
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <__vector_4+0x3e>
		button_call_handler(BUTTON_ORANGE);
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	84 df       	rcall	.-248    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_YELLOW_PIN) {
     a6a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a6e:	81 ff       	sbrs	r24, 1
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <__vector_4+0x4c>
		button_call_handler(BUTTON_YELLOW);
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	7d df       	rcall	.-262    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_RED_PIN) {
     a78:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
     a7c:	83 ff       	sbrs	r24, 3
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__vector_4+0x5a>
		button_call_handler(BUTTON_RED);
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	76 df       	rcall	.-276    	; 0x972 <button_call_handler>
	}
	#endif	
	
	/* Clear interrupt flag, so the next one can occur */
	PORTB.INTFLAGS = 0xff;
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
}
     a8c:	ff 91       	pop	r31
     a8e:	ef 91       	pop	r30
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	7f 91       	pop	r23
     a9a:	6f 91       	pop	r22
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <__vector_5>:

/*
 * Interrupt service routine for PORTC
 */
ISR(PORTC_PORT_vect)
{
     aae:	1f 92       	push	r1
     ab0:	0f 92       	push	r0
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	0f 92       	push	r0
     ab6:	11 24       	eor	r1, r1
     ab8:	2f 93       	push	r18
     aba:	3f 93       	push	r19
     abc:	4f 93       	push	r20
     abe:	5f 93       	push	r21
     ac0:	6f 93       	push	r22
     ac2:	7f 93       	push	r23
     ac4:	8f 93       	push	r24
     ac6:	9f 93       	push	r25
     ac8:	af 93       	push	r26
     aca:	bf 93       	push	r27
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_GREEN_PIN) {
     ad0:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	03 c0       	rjmp	.+6      	; 0xade <__vector_5+0x30>
		button_call_handler(BUTTON_GREEN);
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	4a df       	rcall	.-364    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_ORANGE_PIN) {
     ade:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     ae2:	82 ff       	sbrs	r24, 2
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <__vector_5+0x3e>
		button_call_handler(BUTTON_ORANGE);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	43 df       	rcall	.-378    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_YELLOW_PIN) {
     aec:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     af0:	81 ff       	sbrs	r24, 1
     af2:	03 c0       	rjmp	.+6      	; 0xafa <__vector_5+0x4c>
		button_call_handler(BUTTON_YELLOW);
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	3c df       	rcall	.-392    	; 0x972 <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_RED_PIN) {
     afa:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     afe:	83 ff       	sbrs	r24, 3
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <__vector_5+0x5a>
		button_call_handler(BUTTON_RED);
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	35 df       	rcall	.-406    	; 0x972 <button_call_handler>
	}
	#endif

	/* Clear interrupt flag, so the next one can occur */
	PORTC.INTFLAGS = 0xff;
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	bf 91       	pop	r27
     b14:	af 91       	pop	r26
     b16:	9f 91       	pop	r25
     b18:	8f 91       	pop	r24
     b1a:	7f 91       	pop	r23
     b1c:	6f 91       	pop	r22
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <eeprom_write>:
 */
void eeprom_write(uint16_t addr, uint8_t data)
{
	uint16_t *addr_ptr = (uint16_t *) addr;
	
	*addr_ptr = data;
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	fc 01       	movw	r30, r24
     b34:	60 83       	st	Z, r22
     b36:	71 83       	std	Z+1, r23	; 0x01
	NVMCTRL.ADDR = addr;
     b38:	e0 e0       	ldi	r30, 0x00	; 0
     b3a:	f0 e1       	ldi	r31, 0x10	; 16
     b3c:	80 87       	std	Z+8, r24	; 0x08
     b3e:	91 87       	std	Z+9, r25	; 0x09
	
	CPU_CCP = CCP_SPM_gc;
     b40:	8d e9       	ldi	r24, 0x9D	; 157
     b42:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;	
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	80 83       	st	Z, r24
     b48:	08 95       	ret

00000b4a <eeprom_get_next_seed>:

/*
 * Read seed from EEPROM, increment, return and store it back
 */
uint16_t eeprom_get_next_seed()
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
	uint16_t seed = (eeprom_read(EEPROM_ADDR_HIGH) << 8) | eeprom_read(EEPROM_ADDR_LOW);
     b4e:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x701401>
     b52:	d8 2f       	mov	r29, r24
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	c8 2f       	mov	r28, r24
     b58:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x701400>
     b5c:	c8 2b       	or	r28, r24
	
	seed++;
     b5e:	21 96       	adiw	r28, 0x01	; 1
	
	eeprom_write(EEPROM_ADDR_HIGH, seed >> 8);
     b60:	6d 2f       	mov	r22, r29
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	94 e1       	ldi	r25, 0x14	; 20
     b66:	e4 df       	rcall	.-56     	; 0xb30 <eeprom_write>
	eeprom_write(EEPROM_ADDR_LOW, seed & 0xFF);
     b68:	6c 2f       	mov	r22, r28
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	94 e1       	ldi	r25, 0x14	; 20
     b6e:	e0 df       	rcall	.-64     	; 0xb30 <eeprom_write>
	
	return seed;
}
     b70:	ce 01       	movw	r24, r28
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <led_init>:
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f4 e0       	ldi	r31, 0x04	; 4
     b7c:	30 e4       	ldi	r19, 0x40	; 64
     b7e:	31 83       	std	Z+1, r19	; 0x01
     b80:	20 e8       	ldi	r18, 0x80	; 128
     b82:	21 83       	std	Z+1, r18	; 0x01
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	81 83       	std	Z+1, r24	; 0x01
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	36 83       	std	Z+6, r19	; 0x06
     b8e:	26 83       	std	Z+6, r18	; 0x06
     b90:	86 83       	std	Z+6, r24	; 0x06
     b92:	96 83       	std	Z+6, r25	; 0x06
     b94:	38 e0       	ldi	r19, 0x08	; 8
     b96:	31 83       	std	Z+1, r19	; 0x01
     b98:	20 e1       	ldi	r18, 0x10	; 16
     b9a:	21 83       	std	Z+1, r18	; 0x01
     b9c:	a0 e2       	ldi	r26, 0x20	; 32
     b9e:	b4 e0       	ldi	r27, 0x04	; 4
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	9c 93       	st	X, r25
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	8c 93       	st	X, r24
     bac:	11 97       	sbiw	r26, 0x01	; 1
     bae:	36 83       	std	Z+6, r19	; 0x06
     bb0:	26 83       	std	Z+6, r18	; 0x06
     bb2:	16 96       	adiw	r26, 0x06	; 6
     bb4:	9c 93       	st	X, r25
     bb6:	16 97       	sbiw	r26, 0x06	; 6
     bb8:	16 96       	adiw	r26, 0x06	; 6
     bba:	8c 93       	st	X, r24
     bbc:	08 95       	ret

00000bbe <led_counter_set>:
/*
 * Set counter LEDs to number in binary (0-15)
 */
void led_counter_set(uint8_t number)
{
	if (number & (1 << 0)) {
     bbe:	80 ff       	sbrs	r24, 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <led_counter_set+0xc>
 */
void led_counter_turn_on(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
     bc2:	90 e4       	ldi	r25, 0x40	; 64
     bc4:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <led_counter_set+0x12>
 */
void led_counter_turn_off(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
     bca:	90 e4       	ldi	r25, 0x40	; 64
     bcc:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_1);
	} else {
		led_counter_turn_off(COUNTER_1);
	}

	if (number & (1 << 1)) {
     bd0:	81 ff       	sbrs	r24, 1
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <led_counter_set+0x1e>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
     bd4:	90 e8       	ldi	r25, 0x80	; 128
     bd6:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <led_counter_set+0x24>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
     bdc:	90 e8       	ldi	r25, 0x80	; 128
     bde:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_2);
	} else {
		led_counter_turn_off(COUNTER_2);
	}

	if (number & (1 << 2)) {
     be2:	82 ff       	sbrs	r24, 2
     be4:	04 c0       	rjmp	.+8      	; 0xbee <led_counter_set+0x30>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <led_counter_set+0x36>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_4);
	} else {
		led_counter_turn_off(COUNTER_4);
	}

	if (number & (1 << 3)) {
     bf4:	83 ff       	sbrs	r24, 3
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <led_counter_set+0x42>
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTSET = COUNTER_8_PIN;
     bf8:	84 e0       	ldi	r24, 0x04	; 4
     bfa:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     bfe:	08 95       	ret
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     c06:	08 95       	ret

00000c08 <led_blinker_turn_on>:
/*
 * Turn the specific 'blinker' LED on
 */
void led_blinker_turn_on(int blinker)
{
	switch (blinker) {
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	91 05       	cpc	r25, r1
     c0c:	71 f0       	breq	.+28     	; 0xc2a <led_blinker_turn_on+0x22>
     c0e:	1c f4       	brge	.+6      	; 0xc16 <led_blinker_turn_on+0xe>
     c10:	89 2b       	or	r24, r25
     c12:	39 f0       	breq	.+14     	; 0xc22 <led_blinker_turn_on+0x1a>
     c14:	08 95       	ret
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	91 05       	cpc	r25, r1
     c1a:	59 f0       	breq	.+22     	; 0xc32 <led_blinker_turn_on+0x2a>
     c1c:	03 97       	sbiw	r24, 0x03	; 3
     c1e:	69 f0       	breq	.+26     	; 0xc3a <led_blinker_turn_on+0x32>
     c20:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTSET = BLINKER_GREEN_PIN;
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
     c28:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTSET = BLINKER_ORANGE_PIN;
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
     c30:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTSET = BLINKER_YELLOW_PIN;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
			break;				
     c38:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTSET = BLINKER_RED_PIN;
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
     c40:	08 95       	ret

00000c42 <led_blinker_turn_off>:
/*
 * Turn the specific 'blinker' LED off
 */
void led_blinker_turn_off(int blinker)
{
	switch (blinker) {
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	91 05       	cpc	r25, r1
     c46:	71 f0       	breq	.+28     	; 0xc64 <led_blinker_turn_off+0x22>
     c48:	1c f4       	brge	.+6      	; 0xc50 <led_blinker_turn_off+0xe>
     c4a:	89 2b       	or	r24, r25
     c4c:	39 f0       	breq	.+14     	; 0xc5c <led_blinker_turn_off+0x1a>
     c4e:	08 95       	ret
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	91 05       	cpc	r25, r1
     c54:	59 f0       	breq	.+22     	; 0xc6c <led_blinker_turn_off+0x2a>
     c56:	03 97       	sbiw	r24, 0x03	; 3
     c58:	69 f0       	breq	.+26     	; 0xc74 <led_blinker_turn_off+0x32>
     c5a:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTCLR = BLINKER_GREEN_PIN;
     c5c:	88 e0       	ldi	r24, 0x08	; 8
     c5e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
     c62:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTCLR = BLINKER_ORANGE_PIN;
     c64:	80 e1       	ldi	r24, 0x10	; 16
     c66:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
     c6a:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTCLR = BLINKER_YELLOW_PIN;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
			break;
     c72:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTCLR = BLINKER_RED_PIN;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     c7a:	08 95       	ret

00000c7c <rtc_enable>:
 */
void rtc_enable()
{
	/* Reset counter */
	//rtc_synchronise(RTC_CNTBUSY_bm);
	RTC.CNT = 0;
     c7c:	e0 e4       	ldi	r30, 0x40	; 64
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	10 86       	std	Z+8, r1	; 0x08
     c82:	11 86       	std	Z+9, r1	; 0x09
	//rtc_synchronise(RTC_CNTBUSY_bm);
	
	/* Enable overflow interrupt */
	RTC.INTCTRL = RTC_OVF_bm;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	82 83       	std	Z+2, r24	; 0x02
	
	/* Enable counter */
	RTC.CTRLA |= RTC_RTCEN_bm;
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	80 83       	st	Z, r24
     c8e:	08 95       	ret

00000c90 <rtc_disable>:
 * Disable RTC and stop counting
 */
void rtc_disable()
{
	/* Disable overflow interrupt */
	RTC.INTCTRL &= ~RTC_OVF_bm;
     c90:	e0 e4       	ldi	r30, 0x40	; 64
     c92:	f1 e0       	ldi	r31, 0x01	; 1
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	82 83       	std	Z+2, r24	; 0x02
	
	/* Disable counter */
	RTC.CTRLA &= ~RTC_RTCEN_bm;
     c9a:	80 81       	ld	r24, Z
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	80 83       	st	Z, r24
     ca0:	08 95       	ret

00000ca2 <rtc_synchronise>:
/*
 * Wait for register synchronization of bit masked register from status
 */
void rtc_synchronise(int bitmask)
{
	while (RTC.STATUS & bitmask)
     ca2:	e0 e4       	ldi	r30, 0x40	; 64
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	21 81       	ldd	r18, Z+1	; 0x01
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	28 23       	and	r18, r24
     cac:	39 23       	and	r19, r25
     cae:	23 2b       	or	r18, r19
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <rtc_synchronise+0x4>
		continue;
}
     cb2:	08 95       	ret

00000cb4 <rtc_init>:

/*
 * Initialize RTC - Real Time Counter
 */
void rtc_init(void (*rtc_event_overflow_handler)())
{
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	8c 01       	movw	r16, r24
	/* Set RTC speed to 1KHz */
	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; 
     cbe:	c0 e4       	ldi	r28, 0x40	; 64
     cc0:	d1 e0       	ldi	r29, 0x01	; 1
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	8f 83       	std	Y+7, r24	; 0x07
	
	/* Set RTC prescaler to /1 (no division) */
	rtc_synchronise(RTC_CTRLABUSY_bm);
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	eb df       	rcall	.-42     	; 0xca2 <rtc_synchronise>
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc;
     ccc:	18 82       	st	Y, r1
	rtc_synchronise(RTC_CTRLABUSY_bm);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	e7 df       	rcall	.-50     	; 0xca2 <rtc_synchronise>

	rtc_overflow_handler = rtc_event_overflow_handler;
     cd4:	00 93 5e 3e 	sts	0x3E5E, r16	; 0x803e5e <rtc_overflow_handler>
     cd8:	10 93 5f 3e 	sts	0x3E5F, r17	; 0x803e5f <rtc_overflow_handler+0x1>
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <rtc_set_timeout>:

/*
 * Set overflow timeout in milliseconds
 */
void rtc_set_timeout(int millis)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
	rtc_synchronise(RTC_PERBUSY_bm);
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	d8 df       	rcall	.-80     	; 0xca2 <rtc_synchronise>
	RTC.PER = millis;
     cf2:	c0 93 4a 01 	sts	0x014A, r28	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cf6:	d0 93 4b 01 	sts	0x014B, r29	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
	rtc_synchronise(RTC_PERBUSY_bm);
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	d1 df       	rcall	.-94     	; 0xca2 <rtc_synchronise>
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <__vector_6>:

/*
 * Interrupt service routine for RTC counter
 */
ISR(RTC_CNT_vect)
{
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
	/* Call handler */
	(*rtc_overflow_handler)();
     d28:	e0 91 5e 3e 	lds	r30, 0x3E5E	; 0x803e5e <rtc_overflow_handler>
     d2c:	f0 91 5f 3e 	lds	r31, 0x3E5F	; 0x803e5f <rtc_overflow_handler+0x1>
     d30:	09 95       	icall
	
	/* Clear interrupt flag, so the next one can occur */
	RTC.INTFLAGS = 0xff;
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d38:	ff 91       	pop	r31
     d3a:	ef 91       	pop	r30
     d3c:	bf 91       	pop	r27
     d3e:	af 91       	pop	r26
     d40:	9f 91       	pop	r25
     d42:	8f 91       	pop	r24
     d44:	7f 91       	pop	r23
     d46:	6f 91       	pop	r22
     d48:	5f 91       	pop	r21
     d4a:	4f 91       	pop	r20
     d4c:	3f 91       	pop	r19
     d4e:	2f 91       	pop	r18
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <speaker_init>:
/*
 * Initialize output pins for counters and blinkers
 */
void speaker_init()
{
	SPEAKER_PORT.DIRSET = SPEAKER_PIN;
     d5a:	e0 e0       	ldi	r30, 0x00	; 0
     d5c:	f4 e0       	ldi	r31, 0x04	; 4
     d5e:	80 e2       	ldi	r24, 0x20	; 32
     d60:	81 83       	std	Z+1, r24	; 0x01
	SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
     d62:	86 83       	std	Z+6, r24	; 0x06
     d64:	08 95       	ret

00000d66 <speaker_generate_tone>:
/*
 * Play frequency at specified duration in milliseconds
 * This function is I/O blocking
 */
void speaker_generate_tone(long frequency, long duration)
{
     d66:	4f 92       	push	r4
     d68:	5f 92       	push	r5
     d6a:	6f 92       	push	r6
     d6c:	7f 92       	push	r7
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
     d8a:	29 01       	movw	r4, r18
     d8c:	3a 01       	movw	r6, r20
	long period_us = 1000000L / frequency;
     d8e:	60 e4       	ldi	r22, 0x40	; 64
     d90:	72 e4       	ldi	r23, 0x42	; 66
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a7 01       	movw	r20, r14
     d98:	96 01       	movw	r18, r12
     d9a:	27 d1       	rcall	.+590    	; 0xfea <__divmodsi4>
     d9c:	49 01       	movw	r8, r18
     d9e:	5a 01       	movw	r10, r20
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
     da0:	68 e0       	ldi	r22, 0x08	; 8
     da2:	76 e4       	ldi	r23, 0x46	; 70
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a7 01       	movw	r20, r14
     daa:	96 01       	movw	r18, r12
     dac:	1e d1       	rcall	.+572    	; 0xfea <__divmodsi4>
     dae:	69 01       	movw	r12, r18
     db0:	7a 01       	movw	r14, r20
	
	while(elapsed_us < (duration * 1000L)) {
     db2:	a8 ee       	ldi	r26, 0xE8	; 232
     db4:	b3 e0       	ldi	r27, 0x03	; 3
     db6:	a3 01       	movw	r20, r6
     db8:	92 01       	movw	r18, r4
     dba:	33 d1       	rcall	.+614    	; 0x1022 <__muluhisi3>
     dbc:	8b 01       	movw	r16, r22
     dbe:	9c 01       	movw	r18, r24
     dc0:	16 16       	cp	r1, r22
     dc2:	17 06       	cpc	r1, r23
     dc4:	18 06       	cpc	r1, r24
     dc6:	19 06       	cpc	r1, r25
     dc8:	a4 f5       	brge	.+104    	; 0xe32 <speaker_generate_tone+0xcc>
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	ba 01       	movw	r22, r20
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
     dd0:	e0 e0       	ldi	r30, 0x00	; 0
     dd2:	f4 e0       	ldi	r31, 0x04	; 4
     dd4:	c0 e2       	ldi	r28, 0x20	; 32
     dd6:	dc 2f       	mov	r29, r28
     dd8:	d5 83       	std	Z+5, r29	; 0x05
		
		for (long i = 0L; i < half_period_wait; i++)
     dda:	1c 14       	cp	r1, r12
     ddc:	1d 04       	cpc	r1, r13
     dde:	1e 04       	cpc	r1, r14
     de0:	1f 04       	cpc	r1, r15
     de2:	04 f5       	brge	.+64     	; 0xe24 <speaker_generate_tone+0xbe>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	dc 01       	movw	r26, r24
		{
			_NOP();
     dea:	00 00       	nop
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	a1 1d       	adc	r26, r1
     df0:	b1 1d       	adc	r27, r1
     df2:	c8 16       	cp	r12, r24
     df4:	d9 06       	cpc	r13, r25
     df6:	ea 06       	cpc	r14, r26
     df8:	fb 06       	cpc	r15, r27
     dfa:	b9 f7       	brne	.-18     	; 0xdea <speaker_generate_tone+0x84>
     dfc:	15 c0       	rjmp	.+42     	; 0xe28 <speaker_generate_tone+0xc2>
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
     dfe:	00 00       	nop
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	a1 1d       	adc	r26, r1
     e04:	b1 1d       	adc	r27, r1
     e06:	c8 16       	cp	r12, r24
     e08:	d9 06       	cpc	r13, r25
     e0a:	ea 06       	cpc	r14, r26
     e0c:	fb 06       	cpc	r15, r27
     e0e:	b9 f7       	brne	.-18     	; 0xdfe <speaker_generate_tone+0x98>
		{
			_NOP();
		}
		
		elapsed_us += period_us;
     e10:	48 0d       	add	r20, r8
     e12:	59 1d       	adc	r21, r9
     e14:	6a 1d       	adc	r22, r10
     e16:	7b 1d       	adc	r23, r11
{
	long period_us = 1000000L / frequency;
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
     e18:	40 17       	cp	r20, r16
     e1a:	51 07       	cpc	r21, r17
     e1c:	62 07       	cpc	r22, r18
     e1e:	73 07       	cpc	r23, r19
     e20:	dc f2       	brlt	.-74     	; 0xdd8 <speaker_generate_tone+0x72>
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <speaker_generate_tone+0xcc>
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
     e24:	c6 83       	std	Z+6, r28	; 0x06
     e26:	f4 cf       	rjmp	.-24     	; 0xe10 <speaker_generate_tone+0xaa>
     e28:	c6 83       	std	Z+6, r28	; 0x06
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	dc 01       	movw	r26, r24
     e30:	e6 cf       	rjmp	.-52     	; 0xdfe <speaker_generate_tone+0x98>
		}
		
		elapsed_us += period_us;
	}
	
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	5f 90       	pop	r5
     e50:	4f 90       	pop	r4
     e52:	08 95       	ret

00000e54 <wdt_mcu_reset>:
 * Reset the MCU after 8ms
 */
void wdt_mcu_reset()
{
	/* Request the access for protected I/O */
	CPU_CCP = CCP_IOREG_gc;
     e54:	88 ed       	ldi	r24, 0xD8	; 216
     e56:	84 bf       	out	0x34, r24	; 52
	
	/* Set timer to 8ms */
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e5e:	ff cf       	rjmp	.-2      	; 0xe5e <wdt_mcu_reset+0xa>

00000e60 <wdt_on>:
 * Set watchdog timer to 8 seconds
 */
void wdt_on()
{
	/* Request the access for protected I/O */
	CPU_CCP = CCP_IOREG_gc;
     e60:	88 ed       	ldi	r24, 0xD8	; 216
     e62:	84 bf       	out	0x34, r24	; 52
	/* Set timer to 8s */
	WDT.CTRLA = WDT_PERIOD_8KCLK_gc;	
     e64:	8b e0       	ldi	r24, 0x0B	; 11
     e66:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e6a:	08 95       	ret

00000e6c <wdt_off>:
 * Turn the ticking watchdog timer off
 */
void wdt_off()
{
	/* Request the access for protected I/O */
	CPU_CCP = CCP_IOREG_gc;
     e6c:	88 ed       	ldi	r24, 0xD8	; 216
     e6e:	84 bf       	out	0x34, r24	; 52
	/* Disable WDT */
	WDT.CTRLA = WDT_PERIOD_OFF_gc;	
     e70:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e74:	08 95       	ret

00000e76 <util_music_play>:

/*
 * Play frequency durations out from speaker
 */
void util_music_play(const int music[][2], int len)
{
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
     e86:	16 16       	cp	r1, r22
     e88:	17 06       	cpc	r1, r23
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <util_music_play+0x18>
     e8c:	3d c0       	rjmp	.+122    	; 0xf08 <util_music_play+0x92>
     e8e:	7b 01       	movw	r14, r22
     e90:	c8 2f       	mov	r28, r24
     e92:	d9 2f       	mov	r29, r25
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	10 e0       	ldi	r17, 0x00	; 0
		
		if (freq > 0) {
			_delay_ms(15);
			speaker_generate_tone(freq, dur);
		} else {
			for (int j = 0; j < (dur / 10); j++)
     e98:	0f 2e       	mov	r0, r31
     e9a:	fa e0       	ldi	r31, 0x0A	; 10
     e9c:	cf 2e       	mov	r12, r31
     e9e:	d1 2c       	mov	r13, r1
     ea0:	f0 2d       	mov	r31, r0
 * Play frequency durations out from speaker
 */
void util_music_play(const int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
		int freq = pgm_read_word(&(music[i][FREQUENCY]));
     ea2:	fe 01       	movw	r30, r28
     ea4:	65 91       	lpm	r22, Z+
     ea6:	74 91       	lpm	r23, Z
		int dur = pgm_read_word(&(music[i][DURATION]));
     ea8:	fe 01       	movw	r30, r28
     eaa:	32 96       	adiw	r30, 0x02	; 2
     eac:	25 91       	lpm	r18, Z+
     eae:	34 91       	lpm	r19, Z
     eb0:	82 2f       	mov	r24, r18
     eb2:	93 2f       	mov	r25, r19
		
		if (freq > 0) {
     eb4:	16 16       	cp	r1, r22
     eb6:	17 06       	cpc	r1, r23
     eb8:	34 f0       	brlt	.+12     	; 0xec6 <util_music_play+0x50>
			_delay_ms(15);
			speaker_generate_tone(freq, dur);
		} else {
			for (int j = 0; j < (dur / 10); j++)
     eba:	b6 01       	movw	r22, r12
     ebc:	83 d0       	rcall	.+262    	; 0xfc4 <__divmodhi4>
     ebe:	16 16       	cp	r1, r22
     ec0:	17 06       	cpc	r1, r23
     ec2:	8c f0       	brlt	.+34     	; 0xee6 <util_music_play+0x70>
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <util_music_play+0x86>
     ec6:	83 ed       	ldi	r24, 0xD3	; 211
     ec8:	90 e3       	ldi	r25, 0x30	; 48
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <util_music_play+0x54>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <util_music_play+0x5a>
     ed0:	00 00       	nop
		int freq = pgm_read_word(&(music[i][FREQUENCY]));
		int dur = pgm_read_word(&(music[i][DURATION]));
		
		if (freq > 0) {
			_delay_ms(15);
			speaker_generate_tone(freq, dur);
     ed2:	03 2e       	mov	r0, r19
     ed4:	00 0c       	add	r0, r0
     ed6:	44 0b       	sbc	r20, r20
     ed8:	55 0b       	sbc	r21, r21
     eda:	07 2e       	mov	r0, r23
     edc:	00 0c       	add	r0, r0
     ede:	88 0b       	sbc	r24, r24
     ee0:	99 0b       	sbc	r25, r25
     ee2:	41 df       	rcall	.-382    	; 0xd66 <speaker_generate_tone>
     ee4:	0b c0       	rjmp	.+22     	; 0xefc <util_music_play+0x86>
		} else {
			for (int j = 0; j < (dur / 10); j++)
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	ed e8       	ldi	r30, 0x8D	; 141
     eec:	f0 e2       	ldi	r31, 0x20	; 32
     eee:	31 97       	sbiw	r30, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <util_music_play+0x78>
     ef2:	00 00       	nop
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	86 17       	cp	r24, r22
     ef8:	97 07       	cpc	r25, r23
     efa:	b9 f7       	brne	.-18     	; 0xeea <util_music_play+0x74>
/*
 * Play frequency durations out from speaker
 */
void util_music_play(const int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
     efc:	0f 5f       	subi	r16, 0xFF	; 255
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	24 96       	adiw	r28, 0x04	; 4
     f02:	e0 16       	cp	r14, r16
     f04:	f1 06       	cpc	r15, r17
     f06:	69 f6       	brne	.-102    	; 0xea2 <util_music_play+0x2c>
		} else {
			for (int j = 0; j < (dur / 10); j++)
			_delay_ms(10);
		}
	}
}
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	08 95       	ret

00000f1a <util_button_to_blinker>:
/*
 * Convert button to it's blinker
 */
int util_button_to_blinker(int button)
{
	switch (button) {
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	91 05       	cpc	r25, r1
     f1e:	41 f0       	breq	.+16     	; 0xf30 <util_button_to_blinker+0x16>
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	91 05       	cpc	r25, r1
     f24:	41 f0       	breq	.+16     	; 0xf36 <util_button_to_blinker+0x1c>
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	49 f4       	brne	.+18     	; 0xf3c <util_button_to_blinker+0x22>
		case BUTTON_GREEN:
			return BLINKER_GREEN;
		case BUTTON_ORANGE:
			return BLINKER_ORANGE;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	08 95       	ret
		case BUTTON_YELLOW:
			return BLINKER_YELLOW;
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	08 95       	ret
		case BUTTON_RED:
			return BLINKER_RED;
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	08 95       	ret
 */
int util_button_to_blinker(int button)
{
	switch (button) {
		case BUTTON_GREEN:
			return BLINKER_GREEN;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
		case BUTTON_RED:
			return BLINKER_RED;
	}
	
	return 0;
}
     f40:	08 95       	ret

00000f42 <util_led_intro>:

/*
 * Blink all score LEDs three times
 */
void util_led_intro()
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	c3 e0       	ldi	r28, 0x03	; 3
     f48:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 3; i++) {
		led_counter_set(15);
     f4a:	8f e0       	ldi	r24, 0x0F	; 15
     f4c:	38 de       	rcall	.-912    	; 0xbbe <led_counter_set>
     f4e:	2f e7       	ldi	r18, 0x7F	; 127
     f50:	8a e1       	ldi	r24, 0x1A	; 26
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	21 50       	subi	r18, 0x01	; 1
     f56:	80 40       	sbci	r24, 0x00	; 0
     f58:	90 40       	sbci	r25, 0x00	; 0
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <util_led_intro+0x12>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <util_led_intro+0x1c>
     f5e:	00 00       	nop
		_delay_ms(600);
		led_counter_set(0);
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	2d de       	rcall	.-934    	; 0xbbe <led_counter_set>
     f64:	2f e7       	ldi	r18, 0x7F	; 127
     f66:	8a e1       	ldi	r24, 0x1A	; 26
     f68:	96 e0       	ldi	r25, 0x06	; 6
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	80 40       	sbci	r24, 0x00	; 0
     f6e:	90 40       	sbci	r25, 0x00	; 0
     f70:	e1 f7       	brne	.-8      	; 0xf6a <util_led_intro+0x28>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <util_led_intro+0x32>
     f74:	00 00       	nop
     f76:	21 97       	sbiw	r28, 0x01	; 1
/*
 * Blink all score LEDs three times
 */
void util_led_intro()
{
	for (int i = 0; i < 3; i++) {
     f78:	41 f7       	brne	.-48     	; 0xf4a <util_led_intro+0x8>
		led_counter_set(15);
		_delay_ms(600);
		led_counter_set(0);
		_delay_ms(600);
	}
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <util_led_sequence_end>:
/*
 * Blink all blinker LEDs
 */
void util_led_sequence_end()
{
	led_blinker_turn_on(BLINKER_GREEN);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	41 de       	rcall	.-894    	; 0xc08 <led_blinker_turn_on>
	led_blinker_turn_on(BLINKER_RED);
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	3e de       	rcall	.-900    	; 0xc08 <led_blinker_turn_on>
	led_blinker_turn_on(BLINKER_YELLOW);
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	3b de       	rcall	.-906    	; 0xc08 <led_blinker_turn_on>
	led_blinker_turn_on(BLINKER_ORANGE);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	38 de       	rcall	.-912    	; 0xc08 <led_blinker_turn_on>
     f98:	2f e3       	ldi	r18, 0x3F	; 63
     f9a:	8d e0       	ldi	r24, 0x0D	; 13
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	80 40       	sbci	r24, 0x00	; 0
     fa2:	90 40       	sbci	r25, 0x00	; 0
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <util_led_sequence_end+0x1e>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <util_led_sequence_end+0x28>
     fa8:	00 00       	nop

	_delay_ms(300);

	led_blinker_turn_off(BLINKER_GREEN);
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	49 de       	rcall	.-878    	; 0xc42 <led_blinker_turn_off>
	led_blinker_turn_off(BLINKER_RED);
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	46 de       	rcall	.-884    	; 0xc42 <led_blinker_turn_off>
	led_blinker_turn_off(BLINKER_YELLOW);
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	43 de       	rcall	.-890    	; 0xc42 <led_blinker_turn_off>
	led_blinker_turn_off(BLINKER_ORANGE);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	40 de       	rcall	.-896    	; 0xc42 <led_blinker_turn_off>
     fc2:	08 95       	ret

00000fc4 <__divmodhi4>:
     fc4:	97 fb       	bst	r25, 7
     fc6:	07 2e       	mov	r0, r23
     fc8:	16 f4       	brtc	.+4      	; 0xfce <__divmodhi4+0xa>
     fca:	00 94       	com	r0
     fcc:	06 d0       	rcall	.+12     	; 0xfda <__divmodhi4_neg1>
     fce:	77 fd       	sbrc	r23, 7
     fd0:	08 d0       	rcall	.+16     	; 0xfe2 <__divmodhi4_neg2>
     fd2:	31 d0       	rcall	.+98     	; 0x1036 <__udivmodhi4>
     fd4:	07 fc       	sbrc	r0, 7
     fd6:	05 d0       	rcall	.+10     	; 0xfe2 <__divmodhi4_neg2>
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__divmodhi4_exit>

00000fda <__divmodhi4_neg1>:
     fda:	90 95       	com	r25
     fdc:	81 95       	neg	r24
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	08 95       	ret

00000fe2 <__divmodhi4_neg2>:
     fe2:	70 95       	com	r23
     fe4:	61 95       	neg	r22
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255

00000fe8 <__divmodhi4_exit>:
     fe8:	08 95       	ret

00000fea <__divmodsi4>:
     fea:	05 2e       	mov	r0, r21
     fec:	97 fb       	bst	r25, 7
     fee:	16 f4       	brtc	.+4      	; 0xff4 <__divmodsi4+0xa>
     ff0:	00 94       	com	r0
     ff2:	0f d0       	rcall	.+30     	; 0x1012 <__negsi2>
     ff4:	57 fd       	sbrc	r21, 7
     ff6:	05 d0       	rcall	.+10     	; 0x1002 <__divmodsi4_neg2>
     ff8:	32 d0       	rcall	.+100    	; 0x105e <__udivmodsi4>
     ffa:	07 fc       	sbrc	r0, 7
     ffc:	02 d0       	rcall	.+4      	; 0x1002 <__divmodsi4_neg2>
     ffe:	46 f4       	brtc	.+16     	; 0x1010 <__divmodsi4_exit>
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <__negsi2>

00001002 <__divmodsi4_neg2>:
    1002:	50 95       	com	r21
    1004:	40 95       	com	r20
    1006:	30 95       	com	r19
    1008:	21 95       	neg	r18
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	4f 4f       	sbci	r20, 0xFF	; 255
    100e:	5f 4f       	sbci	r21, 0xFF	; 255

00001010 <__divmodsi4_exit>:
    1010:	08 95       	ret

00001012 <__negsi2>:
    1012:	90 95       	com	r25
    1014:	80 95       	com	r24
    1016:	70 95       	com	r23
    1018:	61 95       	neg	r22
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	08 95       	ret

00001022 <__muluhisi3>:
    1022:	3f d0       	rcall	.+126    	; 0x10a2 <__umulhisi3>
    1024:	a5 9f       	mul	r26, r21
    1026:	90 0d       	add	r25, r0
    1028:	b4 9f       	mul	r27, r20
    102a:	90 0d       	add	r25, r0
    102c:	a4 9f       	mul	r26, r20
    102e:	80 0d       	add	r24, r0
    1030:	91 1d       	adc	r25, r1
    1032:	11 24       	eor	r1, r1
    1034:	08 95       	ret

00001036 <__udivmodhi4>:
    1036:	aa 1b       	sub	r26, r26
    1038:	bb 1b       	sub	r27, r27
    103a:	51 e1       	ldi	r21, 0x11	; 17
    103c:	07 c0       	rjmp	.+14     	; 0x104c <__udivmodhi4_ep>

0000103e <__udivmodhi4_loop>:
    103e:	aa 1f       	adc	r26, r26
    1040:	bb 1f       	adc	r27, r27
    1042:	a6 17       	cp	r26, r22
    1044:	b7 07       	cpc	r27, r23
    1046:	10 f0       	brcs	.+4      	; 0x104c <__udivmodhi4_ep>
    1048:	a6 1b       	sub	r26, r22
    104a:	b7 0b       	sbc	r27, r23

0000104c <__udivmodhi4_ep>:
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	5a 95       	dec	r21
    1052:	a9 f7       	brne	.-22     	; 0x103e <__udivmodhi4_loop>
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	08 95       	ret

0000105e <__udivmodsi4>:
    105e:	a1 e2       	ldi	r26, 0x21	; 33
    1060:	1a 2e       	mov	r1, r26
    1062:	aa 1b       	sub	r26, r26
    1064:	bb 1b       	sub	r27, r27
    1066:	fd 01       	movw	r30, r26
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <__udivmodsi4_ep>

0000106a <__udivmodsi4_loop>:
    106a:	aa 1f       	adc	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	ee 1f       	adc	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	a2 17       	cp	r26, r18
    1074:	b3 07       	cpc	r27, r19
    1076:	e4 07       	cpc	r30, r20
    1078:	f5 07       	cpc	r31, r21
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__udivmodsi4_ep>
    107c:	a2 1b       	sub	r26, r18
    107e:	b3 0b       	sbc	r27, r19
    1080:	e4 0b       	sbc	r30, r20
    1082:	f5 0b       	sbc	r31, r21

00001084 <__udivmodsi4_ep>:
    1084:	66 1f       	adc	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	1a 94       	dec	r1
    108e:	69 f7       	brne	.-38     	; 0x106a <__udivmodsi4_loop>
    1090:	60 95       	com	r22
    1092:	70 95       	com	r23
    1094:	80 95       	com	r24
    1096:	90 95       	com	r25
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	bd 01       	movw	r22, r26
    109e:	cf 01       	movw	r24, r30
    10a0:	08 95       	ret

000010a2 <__umulhisi3>:
    10a2:	a2 9f       	mul	r26, r18
    10a4:	b0 01       	movw	r22, r0
    10a6:	b3 9f       	mul	r27, r19
    10a8:	c0 01       	movw	r24, r0
    10aa:	a3 9f       	mul	r26, r19
    10ac:	01 d0       	rcall	.+2      	; 0x10b0 <__umulhisi3+0xe>
    10ae:	b2 9f       	mul	r27, r18
    10b0:	70 0d       	add	r23, r0
    10b2:	81 1d       	adc	r24, r1
    10b4:	11 24       	eor	r1, r1
    10b6:	91 1d       	adc	r25, r1
    10b8:	08 95       	ret

000010ba <do_rand>:
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
    10d0:	68 81       	ld	r22, Y
    10d2:	79 81       	ldd	r23, Y+1	; 0x01
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	9b 81       	ldd	r25, Y+3	; 0x03
    10d8:	61 15       	cp	r22, r1
    10da:	71 05       	cpc	r23, r1
    10dc:	81 05       	cpc	r24, r1
    10de:	91 05       	cpc	r25, r1
    10e0:	21 f4       	brne	.+8      	; 0x10ea <do_rand+0x30>
    10e2:	64 e2       	ldi	r22, 0x24	; 36
    10e4:	79 ed       	ldi	r23, 0xD9	; 217
    10e6:	8b e5       	ldi	r24, 0x5B	; 91
    10e8:	97 e0       	ldi	r25, 0x07	; 7
    10ea:	2d e1       	ldi	r18, 0x1D	; 29
    10ec:	33 ef       	ldi	r19, 0xF3	; 243
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	7b df       	rcall	.-266    	; 0xfea <__divmodsi4>
    10f4:	49 01       	movw	r8, r18
    10f6:	5a 01       	movw	r10, r20
    10f8:	9b 01       	movw	r18, r22
    10fa:	ac 01       	movw	r20, r24
    10fc:	a7 ea       	ldi	r26, 0xA7	; 167
    10fe:	b1 e4       	ldi	r27, 0x41	; 65
    1100:	90 df       	rcall	.-224    	; 0x1022 <__muluhisi3>
    1102:	6b 01       	movw	r12, r22
    1104:	7c 01       	movw	r14, r24
    1106:	ac ee       	ldi	r26, 0xEC	; 236
    1108:	b4 ef       	ldi	r27, 0xF4	; 244
    110a:	a5 01       	movw	r20, r10
    110c:	94 01       	movw	r18, r8
    110e:	2e d0       	rcall	.+92     	; 0x116c <__mulohisi3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	8c 0d       	add	r24, r12
    1116:	9d 1d       	adc	r25, r13
    1118:	ae 1d       	adc	r26, r14
    111a:	bf 1d       	adc	r27, r15
    111c:	b7 ff       	sbrs	r27, 7
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <do_rand+0x6c>
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	a1 09       	sbc	r26, r1
    1124:	b0 48       	sbci	r27, 0x80	; 128
    1126:	88 83       	st	Y, r24
    1128:	99 83       	std	Y+1, r25	; 0x01
    112a:	aa 83       	std	Y+2, r26	; 0x02
    112c:	bb 83       	std	Y+3, r27	; 0x03
    112e:	9f 77       	andi	r25, 0x7F	; 127
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	08 95       	ret

00001146 <rand_r>:
    1146:	b9 df       	rcall	.-142    	; 0x10ba <do_rand>
    1148:	08 95       	ret

0000114a <rand>:
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	9e e3       	ldi	r25, 0x3E	; 62
    114e:	b5 df       	rcall	.-150    	; 0x10ba <do_rand>
    1150:	08 95       	ret

00001152 <srand>:
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
    115a:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__data_start+0x1>
    115e:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__data_start+0x2>
    1162:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__data_start+0x3>
    1166:	08 95       	ret

00001168 <__mulshisi3>:
    1168:	b7 ff       	sbrs	r27, 7
    116a:	5b cf       	rjmp	.-330    	; 0x1022 <__muluhisi3>

0000116c <__mulohisi3>:
    116c:	5a df       	rcall	.-332    	; 0x1022 <__muluhisi3>
    116e:	82 1b       	sub	r24, r18
    1170:	93 0b       	sbc	r25, r19
    1172:	08 95       	ret

00001174 <_exit>:
    1174:	f8 94       	cli

00001176 <__stop_program>:
    1176:	ff cf       	rjmp	.-2      	; 0x1176 <__stop_program>
