
L4B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00803e00  00000c58  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00803e6a  00803e6a  00000d56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003252  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fe6  00000000  00000000  000041a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001189  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00007318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001373  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fce  00000000  00000000  00008a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00009a51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	47 c2       	rjmp	.+1166   	; 0x496 <__vector_3>
   8:	87 c2       	rjmp	.+1294   	; 0x518 <__vector_4>
   a:	c7 c2       	rjmp	.+1422   	; 0x59a <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e8 e5       	ldi	r30, 0x58	; 88
  48:	fc e0       	ldi	r31, 0x0C	; 12
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 36       	cpi	r26, 0x6A	; 106
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	aa e6       	ldi	r26, 0x6A	; 106
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 38       	cpi	r26, 0x88	; 136
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	3c d1       	rcall	.+632    	; 0x2e0 <main>
  68:	f5 c5       	rjmp	.+3050   	; 0xc54 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <game_is_running>:
/*
 * Return whether the game is running
 */
int game_is_running()
{
	return (game_running == RUNNING);
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	20 91 6a 3e 	lds	r18, 0x3E6A	; 0x803e6a <__data_end>
  74:	30 91 6b 3e 	lds	r19, 0x3E6B	; 0x803e6b <__data_end+0x1>
  78:	21 30       	cpi	r18, 0x01	; 1
  7a:	31 05       	cpc	r19, r1
  7c:	11 f0       	breq	.+4      	; 0x82 <game_is_running+0x16>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
}
  82:	08 95       	ret

00000084 <game_is_ready_to_start>:
/*
 * Return whether the game is ready to start
 */
int game_is_ready_to_start()
{
	if (starting_buttons_state[EASY_STARTING_BUTTON_1] 
  84:	80 91 78 3e 	lds	r24, 0x3E78	; 0x803e78 <starting_buttons_state+0x4>
  88:	90 91 79 3e 	lds	r25, 0x3E79	; 0x803e79 <starting_buttons_state+0x5>
  8c:	89 2b       	or	r24, r25
  8e:	31 f0       	breq	.+12     	; 0x9c <game_is_ready_to_start+0x18>
	    && starting_buttons_state[EASY_STARTING_BUTTON_2]) {
  90:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <starting_buttons_state+0x6>
  94:	90 91 7b 3e 	lds	r25, 0x3E7B	; 0x803e7b <starting_buttons_state+0x7>
  98:	89 2b       	or	r24, r25
  9a:	79 f4       	brne	.+30     	; 0xba <game_is_ready_to_start+0x36>
		return READY_EASY;
	} else if (starting_buttons_state[HARD_STARTING_BUTTON_1]
  9c:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <starting_buttons_state>
  a0:	90 91 75 3e 	lds	r25, 0x3E75	; 0x803e75 <starting_buttons_state+0x1>
  a4:	89 2b       	or	r24, r25
  a6:	61 f0       	breq	.+24     	; 0xc0 <game_is_ready_to_start+0x3c>
			   && starting_buttons_state[HARD_STARTING_BUTTON_2]) {
  a8:	80 91 76 3e 	lds	r24, 0x3E76	; 0x803e76 <starting_buttons_state+0x2>
  ac:	90 91 77 3e 	lds	r25, 0x3E77	; 0x803e77 <starting_buttons_state+0x3>
  b0:	89 2b       	or	r24, r25
  b2:	49 f0       	breq	.+18     	; 0xc6 <game_is_ready_to_start+0x42>
		return READY_HARD;			   
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret
 */
int game_is_ready_to_start()
{
	if (starting_buttons_state[EASY_STARTING_BUTTON_1] 
	    && starting_buttons_state[EASY_STARTING_BUTTON_2]) {
		return READY_EASY;
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret
	} else if (starting_buttons_state[HARD_STARTING_BUTTON_1]
			   && starting_buttons_state[HARD_STARTING_BUTTON_2]) {
		return READY_HARD;			   
	}
	
	return NOT_READY;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	90 e0       	ldi	r25, 0x00	; 0
}
  ca:	08 95       	ret

000000cc <game_generate_sequence>:

/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	for (int i = 0; i < len; i++)
  d4:	16 16       	cp	r1, r22
  d6:	17 06       	cpc	r1, r23
  d8:	a4 f4       	brge	.+40     	; 0x102 <game_generate_sequence+0x36>
  da:	8c 01       	movw	r16, r24
  dc:	ec 01       	movw	r28, r24
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	06 0f       	add	r16, r22
  e4:	17 1f       	adc	r17, r23
		sequence[i] = rand() % BUTTON_COUNT;
  e6:	a1 d5       	rcall	.+2882   	; 0xc2a <rand>
  e8:	83 70       	andi	r24, 0x03	; 3
  ea:	90 78       	andi	r25, 0x80	; 128
  ec:	99 23       	and	r25, r25
  ee:	24 f4       	brge	.+8      	; 0xf8 <game_generate_sequence+0x2c>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	8c 6f       	ori	r24, 0xFC	; 252
  f4:	9f 6f       	ori	r25, 0xFF	; 255
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	89 93       	st	Y+, r24
  fa:	99 93       	st	Y+, r25
/*
 * Generates random sequence of buttons to sequence array
 */
void game_generate_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++)
  fc:	c0 17       	cp	r28, r16
  fe:	d1 07       	cpc	r29, r17
 100:	91 f7       	brne	.-28     	; 0xe6 <game_generate_sequence+0x1a>
		sequence[i] = rand() % BUTTON_COUNT;
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

0000010c <game_blink_sequence>:

/*
 * Blink the sequence out to LEDs
 */
void game_blink_sequence(int *sequence, int len)
{
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
 118:	16 16       	cp	r1, r22
 11a:	17 06       	cpc	r1, r23
 11c:	1c f5       	brge	.+70     	; 0x164 <game_blink_sequence+0x58>
 11e:	7c 01       	movw	r14, r24
 120:	ec 01       	movw	r28, r24
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	e6 0e       	add	r14, r22
 128:	f7 1e       	adc	r15, r23
 12a:	8e 01       	movw	r16, r28
		led_blinker_turn_on(sequence[i]);
 12c:	89 91       	ld	r24, Y+
 12e:	99 91       	ld	r25, Y+
 130:	e1 d2       	rcall	.+1474   	; 0x6f4 <led_blinker_turn_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f e1       	ldi	r18, 0x1F	; 31
 134:	81 ea       	ldi	r24, 0xA1	; 161
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <game_blink_sequence+0x2c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <game_blink_sequence+0x36>
 142:	00 00       	nop
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
 144:	f8 01       	movw	r30, r16
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	f1 d2       	rcall	.+1506   	; 0x72e <led_blinker_turn_off>
 14c:	ff e1       	ldi	r31, 0x1F	; 31
 14e:	21 ea       	ldi	r18, 0xA1	; 161
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	f1 50       	subi	r31, 0x01	; 1
 154:	20 40       	sbci	r18, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <game_blink_sequence+0x46>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <game_blink_sequence+0x50>
 15c:	00 00       	nop
/*
 * Blink the sequence out to LEDs
 */
void game_blink_sequence(int *sequence, int len)
{
	for (int i = 0; i < len; i++) {
 15e:	ce 15       	cp	r28, r14
 160:	df 05       	cpc	r29, r15
 162:	19 f7       	brne	.-58     	; 0x12a <game_blink_sequence+0x1e>
		led_blinker_turn_on(sequence[i]);
		_delay_ms(750);
		led_blinker_turn_off(sequence[i]);
		_delay_ms(750);
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	08 95       	ret

00000172 <game_next_round>:
/*
 * Generate and blink out next round
 */
void game_next_round()
{
	cli();
 172:	f8 94       	cli
 174:	2a e2       	ldi	r18, 0x2A	; 42
 176:	8c e2       	ldi	r24, 0x2C	; 44
 178:	9a e0       	ldi	r25, 0x0A	; 10
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <game_next_round+0x8>
 182:	00 00       	nop
	
	_delay_ms(1000);
	
	round_current++;
 184:	60 91 7c 3e 	lds	r22, 0x3E7C	; 0x803e7c <round_current>
 188:	70 91 7d 3e 	lds	r23, 0x3E7D	; 0x803e7d <round_current+0x1>
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	60 93 7c 3e 	sts	0x3E7C, r22	; 0x803e7c <round_current>
 194:	70 93 7d 3e 	sts	0x3E7D, r23	; 0x803e7d <round_current+0x1>
	
	game_generate_sequence(led_sequence, round_current);
 198:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <led_sequence>
 19c:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <led_sequence+0x1>
 1a0:	95 df       	rcall	.-214    	; 0xcc <game_generate_sequence>
	game_blink_sequence(led_sequence, round_current);		
 1a2:	60 91 7c 3e 	lds	r22, 0x3E7C	; 0x803e7c <round_current>
 1a6:	70 91 7d 3e 	lds	r23, 0x3E7D	; 0x803e7d <round_current+0x1>
 1aa:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <led_sequence>
 1ae:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <led_sequence+0x1>
 1b2:	ac df       	rcall	.-168    	; 0x10c <game_blink_sequence>
		
	music_play(music_new_game, MUSIC_NEW_GAME_LEN);
 1b4:	69 e0       	ldi	r22, 0x09	; 9
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	86 e4       	ldi	r24, 0x46	; 70
 1ba:	9e e3       	ldi	r25, 0x3E	; 62
 1bc:	b3 d0       	rcall	.+358    	; 0x324 <music_play>
	music_play(music_la_la_land, MUSIC_LA_LA_LAND_LEN);
 1be:	6f e0       	ldi	r22, 0x0F	; 15
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	9e e3       	ldi	r25, 0x3E	; 62
 1c6:	ae d0       	rcall	.+348    	; 0x324 <music_play>
	
	sei();
 1c8:	78 94       	sei
 1ca:	08 95       	ret

000001cc <game_start>:

/*
 * Start a new game
 */
void game_start(int difficulty)
{
 1cc:	ec 01       	movw	r28, r24
	cli();
 1ce:	f8 94       	cli
	
	/* Set seed for rand session */
	srand(eeprom_get_next_seed());
 1d0:	32 d2       	rcall	.+1124   	; 0x636 <eeprom_get_next_seed>
 1d2:	2f d5       	rcall	.+2654   	; 0xc32 <srand>
 1d4:	03 e0       	ldi	r16, 0x03	; 3
 1d6:	10 e0       	ldi	r17, 0x00	; 0
	
	/* Intro score blinking */
	for (int i = 0; i < 3; i++) {
		led_counter_set(15);
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	67 d2       	rcall	.+1230   	; 0x6aa <led_counter_set>
 1dc:	2f e7       	ldi	r18, 0x7F	; 127
 1de:	8a e1       	ldi	r24, 0x1A	; 26
 1e0:	96 e0       	ldi	r25, 0x06	; 6
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <game_start+0x16>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <game_start+0x20>
 1ec:	00 00       	nop
		_delay_ms(600);
		led_counter_set(0);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	5c d2       	rcall	.+1208   	; 0x6aa <led_counter_set>
 1f2:	2f e7       	ldi	r18, 0x7F	; 127
 1f4:	8a e1       	ldi	r24, 0x1A	; 26
 1f6:	96 e0       	ldi	r25, 0x06	; 6
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <game_start+0x2c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <game_start+0x36>
 202:	00 00       	nop
 204:	01 50       	subi	r16, 0x01	; 1
 206:	11 09       	sbc	r17, r1
	
	/* Set seed for rand session */
	srand(eeprom_get_next_seed());
	
	/* Intro score blinking */
	for (int i = 0; i < 3; i++) {
 208:	39 f7       	brne	.-50     	; 0x1d8 <game_start+0xc>
		led_counter_set(0);
		_delay_ms(600);
	}
	
	/* Reset variables */
	game_score = 0;
 20a:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <game_score>
 20e:	10 92 6f 3e 	sts	0x3E6F, r1	; 0x803e6f <game_score+0x1>
	round_current = 0;
 212:	10 92 7c 3e 	sts	0x3E7C, r1	; 0x803e7c <round_current>
 216:	10 92 7d 3e 	sts	0x3E7D, r1	; 0x803e7d <round_current+0x1>
	
	game_difficulty = difficulty;
 21a:	c0 93 72 3e 	sts	0x3E72, r28	; 0x803e72 <game_difficulty>
 21e:	d0 93 73 3e 	sts	0x3E73, r29	; 0x803e73 <game_difficulty+0x1>

	switch (difficulty) {
 222:	20 97       	sbiw	r28, 0x00	; 0
 224:	19 f0       	breq	.+6      	; 0x22c <game_start+0x60>
 226:	21 97       	sbiw	r28, 0x01	; 1
 228:	41 f0       	breq	.+16     	; 0x23a <game_start+0x6e>
 22a:	0d c0       	rjmp	.+26     	; 0x246 <game_start+0x7a>
		case EASY:
			round_count = EASY_ROUND_COUNT;
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <round_count>
 234:	90 93 6d 3e 	sts	0x3E6D, r25	; 0x803e6d <round_count+0x1>
			break;
 238:	06 c0       	rjmp	.+12     	; 0x246 <game_start+0x7a>
		case HARD:
			round_count = HARD_ROUND_COUNT;
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <round_count>
 242:	90 93 6d 3e 	sts	0x3E6D, r25	; 0x803e6d <round_count+0x1>
			break;			
	}
	
	free(led_sequence);
 246:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <led_sequence>
 24a:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <led_sequence+0x1>
 24e:	1c d4       	rcall	.+2104   	; 0xa88 <free>
	free(button_sequence);
 250:	80 91 7e 3e 	lds	r24, 0x3E7E	; 0x803e7e <button_sequence>
 254:	90 91 7f 3e 	lds	r25, 0x3E7F	; 0x803e7f <button_sequence+0x1>
 258:	17 d4       	rcall	.+2094   	; 0xa88 <free>
	
	led_sequence = (int *) malloc(round_count);
 25a:	c0 91 6c 3e 	lds	r28, 0x3E6C	; 0x803e6c <round_count>
 25e:	d0 91 6d 3e 	lds	r29, 0x3E6D	; 0x803e6d <round_count+0x1>
 262:	ce 01       	movw	r24, r28
 264:	79 d3       	rcall	.+1778   	; 0x958 <malloc>
 266:	80 93 70 3e 	sts	0x3E70, r24	; 0x803e70 <led_sequence>
 26a:	90 93 71 3e 	sts	0x3E71, r25	; 0x803e71 <led_sequence+0x1>
	button_sequence = (int *) malloc(round_count);
 26e:	ce 01       	movw	r24, r28
 270:	73 d3       	rcall	.+1766   	; 0x958 <malloc>
 272:	80 93 7e 3e 	sts	0x3E7E, r24	; 0x803e7e <button_sequence>
 276:	90 93 7f 3e 	sts	0x3E7F, r25	; 0x803e7f <button_sequence+0x1>
	
	led_counter_set(game_score);
 27a:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <game_score>
 27e:	15 d2       	rcall	.+1066   	; 0x6aa <led_counter_set>
	
	game_running = RUNNING;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <__data_end>
 288:	90 93 6b 3e 	sts	0x3E6B, r25	; 0x803e6b <__data_end+0x1>
	
	game_next_round();
 28c:	72 df       	rcall	.-284    	; 0x172 <game_next_round>
 28e:	ff cf       	rjmp	.-2      	; 0x28e <game_start+0xc2>

00000290 <button_pressed>:
/*
 * Automatically called handler after button pressing
 */
void button_pressed(int button)
{
	if (!game_is_running()) {
 290:	20 91 6a 3e 	lds	r18, 0x3E6A	; 0x803e6a <__data_end>
 294:	30 91 6b 3e 	lds	r19, 0x3E6B	; 0x803e6b <__data_end+0x1>
 298:	21 30       	cpi	r18, 0x01	; 1
 29a:	31 05       	cpc	r19, r1
 29c:	49 f0       	breq	.+18     	; 0x2b0 <button_pressed+0x20>
		starting_buttons_state[button] = 1;		
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	fc 01       	movw	r30, r24
 2a4:	ec 58       	subi	r30, 0x8C	; 140
 2a6:	f1 4c       	sbci	r31, 0xC1	; 193
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	80 83       	st	Z, r24
 2ae:	91 83       	std	Z+1, r25	; 0x01
 2b0:	08 95       	ret

000002b2 <button_released>:
/*
 * Automatically called handler after button releasing
 */
void button_released(int button)
{
	if (!game_is_running()) {
 2b2:	20 91 6a 3e 	lds	r18, 0x3E6A	; 0x803e6a <__data_end>
 2b6:	30 91 6b 3e 	lds	r19, 0x3E6B	; 0x803e6b <__data_end+0x1>
 2ba:	21 30       	cpi	r18, 0x01	; 1
 2bc:	31 05       	cpc	r19, r1
 2be:	39 f0       	breq	.+14     	; 0x2ce <button_released+0x1c>
		starting_buttons_state[button] = 0;
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	fc 01       	movw	r30, r24
 2c6:	ec 58       	subi	r30, 0x8C	; 140
 2c8:	f1 4c       	sbci	r31, 0xC1	; 193
 2ca:	10 82       	st	Z, r1
 2cc:	11 82       	std	Z+1, r1	; 0x01
 2ce:	08 95       	ret

000002d0 <setup>:
/*
 * Setup hardware peripherals
 */
void setup()
{
	led_init();
 2d0:	c9 d1       	rcall	.+914    	; 0x664 <led_init>
	speaker_init();
 2d2:	4a d2       	rcall	.+1172   	; 0x768 <speaker_init>
	button_init(&button_pressed, &button_released);
 2d4:	69 e5       	ldi	r22, 0x59	; 89
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	88 e4       	ldi	r24, 0x48	; 72
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	6c d0       	rcall	.+216    	; 0x3b6 <button_init>
 2de:	08 95       	ret

000002e0 <main>:
/*
 * Main function called upon reset
 */
int main(void)
{
	setup();
 2e0:	f7 df       	rcall	.-18     	; 0x2d0 <setup>

	while (1) {	
		if(game_is_running() == NOT_RUNNING) {
 2e2:	c4 de       	rcall	.-632    	; 0x6c <game_is_running>
 2e4:	89 2b       	or	r24, r25
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <main+0x2>
			int start_status = game_is_ready_to_start();
 2e8:	cd de       	rcall	.-614    	; 0x84 <game_is_ready_to_start>
 2ea:	ec 01       	movw	r28, r24
			
			if (start_status == NOT_READY)
 2ec:	02 97       	sbiw	r24, 0x02	; 2
 2ee:	c9 f3       	breq	.-14     	; 0x2e2 <main+0x2>
 2f0:	24 e5       	ldi	r18, 0x54	; 84
 2f2:	88 e5       	ldi	r24, 0x58	; 88
 2f4:	94 e1       	ldi	r25, 0x14	; 20
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x16>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x20>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x22>
				continue;
				
			_delay_ms(BUTTON_START_TIMEOUT);
			
			/* Check if start status is ready even after timeout */
			if (start_status == game_is_ready_to_start()) {
 302:	c0 de       	rcall	.-640    	; 0x84 <game_is_ready_to_start>
 304:	c8 17       	cp	r28, r24
 306:	d9 07       	cpc	r29, r25
 308:	61 f7       	brne	.-40     	; 0x2e2 <main+0x2>
				switch (start_status) {
 30a:	20 97       	sbiw	r28, 0x00	; 0
 30c:	19 f0       	breq	.+6      	; 0x314 <main+0x34>
 30e:	21 97       	sbiw	r28, 0x01	; 1
 310:	29 f0       	breq	.+10     	; 0x31c <main+0x3c>
 312:	e7 cf       	rjmp	.-50     	; 0x2e2 <main+0x2>
					case READY_EASY:
						game_start(EASY);
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	59 df       	rcall	.-334    	; 0x1cc <game_start>
						break;
 31a:	e3 cf       	rjmp	.-58     	; 0x2e2 <main+0x2>
					case READY_HARD:
						game_start(HARD);
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	55 df       	rcall	.-342    	; 0x1cc <game_start>
						break;
 322:	df cf       	rjmp	.-66     	; 0x2e2 <main+0x2>

00000324 <music_play>:
#include <util/delay.h>

#include "peripherals/include/speaker.h"

void music_play(int music[][2], int len)
{
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
	for (int i = 0; i < len; i++) {
 334:	16 16       	cp	r1, r22
 336:	17 06       	cpc	r1, r23
 338:	ac f5       	brge	.+106    	; 0x3a4 <music_play+0x80>
 33a:	6b 01       	movw	r12, r22
 33c:	c8 2f       	mov	r28, r24
 33e:	d9 2f       	mov	r29, r25
 340:	e1 2c       	mov	r14, r1
 342:	f1 2c       	mov	r15, r1
		if (music[i][FREQUENCY] > 0) {
			speaker_generate_tone(music[i][FREQUENCY], music[i][DURATION]);
		} else {
			for (int j = 0; j < (music[i][DURATION] / 10); j++) 
 344:	0a e0       	ldi	r16, 0x0A	; 10
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	fe 01       	movw	r30, r28
#include "peripherals/include/speaker.h"

void music_play(int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
		if (music[i][FREQUENCY] > 0) {
 34a:	68 81       	ld	r22, Y
 34c:	79 81       	ldd	r23, Y+1	; 0x01
 34e:	16 16       	cp	r1, r22
 350:	17 06       	cpc	r1, r23
 352:	2c f0       	brlt	.+10     	; 0x35e <music_play+0x3a>
			speaker_generate_tone(music[i][FREQUENCY], music[i][DURATION]);
		} else {
			for (int j = 0; j < (music[i][DURATION] / 10); j++) 
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	9b 81       	ldd	r25, Y+3	; 0x03
 358:	0a 97       	sbiw	r24, 0x0a	; 10
 35a:	6c f4       	brge	.+26     	; 0x376 <music_play+0x52>
 35c:	1c c0       	rjmp	.+56     	; 0x396 <music_play+0x72>

void music_play(int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
		if (music[i][FREQUENCY] > 0) {
			speaker_generate_tone(music[i][FREQUENCY], music[i][DURATION]);
 35e:	2a 81       	ldd	r18, Y+2	; 0x02
 360:	3b 81       	ldd	r19, Y+3	; 0x03
 362:	03 2e       	mov	r0, r19
 364:	00 0c       	add	r0, r0
 366:	44 0b       	sbc	r20, r20
 368:	55 0b       	sbc	r21, r21
 36a:	07 2e       	mov	r0, r23
 36c:	00 0c       	add	r0, r0
 36e:	88 0b       	sbc	r24, r24
 370:	99 0b       	sbc	r25, r25
 372:	00 d2       	rcall	.+1024   	; 0x774 <speaker_generate_tone>
 374:	10 c0       	rjmp	.+32     	; 0x396 <music_play+0x72>
		} else {
			for (int j = 0; j < (music[i][DURATION] / 10); j++) 
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	8d e8       	ldi	r24, 0x8D	; 141
 37c:	90 e2       	ldi	r25, 0x20	; 32
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <music_play+0x5a>
 382:	00 00       	nop
 384:	2f 5f       	subi	r18, 0xFF	; 255
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	93 81       	ldd	r25, Z+3	; 0x03
 38c:	b8 01       	movw	r22, r16
 38e:	69 d2       	rcall	.+1234   	; 0x862 <__divmodhi4>
 390:	26 17       	cp	r18, r22
 392:	37 07       	cpc	r19, r23
 394:	94 f3       	brlt	.-28     	; 0x37a <music_play+0x56>

#include "peripherals/include/speaker.h"

void music_play(int music[][2], int len)
{
	for (int i = 0; i < len; i++) {
 396:	9f ef       	ldi	r25, 0xFF	; 255
 398:	e9 1a       	sub	r14, r25
 39a:	f9 0a       	sbc	r15, r25
 39c:	24 96       	adiw	r28, 0x04	; 4
 39e:	ce 14       	cp	r12, r14
 3a0:	df 04       	cpc	r13, r15
 3a2:	91 f6       	brne	.-92     	; 0x348 <music_play+0x24>
		} else {
			for (int j = 0; j < (music[i][DURATION] / 10); j++) 
				_delay_ms(10);
		}
	}
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	08 95       	ret

000003b6 <button_init>:
 */
void button_init(void (*button_event_pressed_handler)(int),
				 void (*button_event_released_handler)(int))
{
	/* Set as input pin */
	BUTTON_GREEN_PORT.DIRCLR = BUTTON_GREEN_PIN;
 3b6:	a0 e4       	ldi	r26, 0x40	; 64
 3b8:	b4 e0       	ldi	r27, 0x04	; 4
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	12 96       	adiw	r26, 0x02	; 2
 3be:	2c 93       	st	X, r18
 3c0:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_ORANGE_PORT.DIRCLR = BUTTON_ORANGE_PIN;
 3c2:	e0 e2       	ldi	r30, 0x20	; 32
 3c4:	f4 e0       	ldi	r31, 0x04	; 4
 3c6:	24 e0       	ldi	r18, 0x04	; 4
 3c8:	22 83       	std	Z+2, r18	; 0x02
	BUTTON_YELLOW_PORT.DIRCLR = BUTTON_YELLOW_PIN;
 3ca:	22 e0       	ldi	r18, 0x02	; 2
 3cc:	12 96       	adiw	r26, 0x02	; 2
 3ce:	2c 93       	st	X, r18
 3d0:	12 97       	sbiw	r26, 0x02	; 2
	BUTTON_RED_PORT.DIRCLR = BUTTON_RED_PIN;
 3d2:	28 e0       	ldi	r18, 0x08	; 8
 3d4:	22 83       	std	Z+2, r18	; 0x02
	
	/* Enable pull-up and interrupt */
	BUTTON_GREEN_PORT.BUTTON_GREEN_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 3d6:	29 e0       	ldi	r18, 0x09	; 9
 3d8:	50 96       	adiw	r26, 0x10	; 16
 3da:	2c 93       	st	X, r18
 3dc:	50 97       	sbiw	r26, 0x10	; 16
	BUTTON_ORANGE_PORT.BUTTON_ORANGE_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 3de:	22 8b       	std	Z+18, r18	; 0x12
	BUTTON_YELLOW_PORT.BUTTON_YELLOW_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 3e0:	51 96       	adiw	r26, 0x11	; 17
 3e2:	2c 93       	st	X, r18
	BUTTON_RED_PORT.BUTTON_RED_PIN_CTRL = PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm;
 3e4:	23 8b       	std	Z+19, r18	; 0x13

	button_pressed_handler = button_event_pressed_handler;
 3e6:	80 93 82 3e 	sts	0x3E82, r24	; 0x803e82 <button_pressed_handler>
 3ea:	90 93 83 3e 	sts	0x3E83, r25	; 0x803e83 <button_pressed_handler+0x1>
	button_released_handler = button_event_released_handler;
 3ee:	60 93 80 3e 	sts	0x3E80, r22	; 0x803e80 <button_released_handler>
 3f2:	70 93 81 3e 	sts	0x3E81, r23	; 0x803e81 <button_released_handler+0x1>
	
	/* Enable global interrupts */
	sei();
 3f6:	78 94       	sei
 3f8:	08 95       	ret

000003fa <button_is_pressed>:
/*
 * Return 1 if 'button' is pressed or 0 if released
 */
int button_is_pressed(int button)
{
	switch (button) {
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	91 05       	cpc	r25, r1
 3fe:	89 f0       	breq	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 400:	1c f4       	brge	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	89 2b       	or	r24, r25
 404:	39 f0       	breq	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 406:	28 c0       	rjmp	.+80     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	91 05       	cpc	r25, r1
 40c:	99 f0       	breq	.+38     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 40e:	03 97       	sbiw	r24, 0x03	; 3
 410:	c9 f0       	breq	.+50     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 412:	22 c0       	rjmp	.+68     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
 414:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
				return 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	89 27       	eor	r24, r25
 41c:	81 70       	andi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	08 95       	ret
			break;
		}
		case BUTTON_ORANGE: {
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
 422:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
 426:	86 95       	lsr	r24
 428:	86 95       	lsr	r24
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	89 27       	eor	r24, r25
 42e:	81 70       	andi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	08 95       	ret
			if (!(BUTTON_ORANGE_PORT.IN & BUTTON_ORANGE_PIN))
				return 1;
			break;
		}
		case BUTTON_YELLOW: {
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
 434:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
 438:	86 95       	lsr	r24
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	89 27       	eor	r24, r25
 43e:	81 70       	andi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	08 95       	ret
			if (!(BUTTON_YELLOW_PORT.IN & BUTTON_YELLOW_PIN))
				return 1;
			break;
		}
		case BUTTON_RED: {
			if (!(BUTTON_RED_PORT.IN & BUTTON_RED_PIN))
 444:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
int button_is_pressed(int button)
{
	switch (button) {
		case BUTTON_GREEN: {
			if (!(BUTTON_GREEN_PORT.IN & BUTTON_GREEN_PIN))
				return 1;
 448:	86 95       	lsr	r24
 44a:	86 95       	lsr	r24
 44c:	86 95       	lsr	r24
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	89 27       	eor	r24, r25
 452:	81 70       	andi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	08 95       	ret
				return 1;
			break;
		}
	}
		
	return 0;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
}
 45c:	08 95       	ret

0000045e <button_call_handler>:

/*
 * Call handler for button event
 */
void button_call_handler(int button)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
 464:	8d e8       	ldi	r24, 0x8D	; 141
 466:	90 e2       	ldi	r25, 0x20	; 32
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <button_call_handler+0xa>
 46c:	00 00       	nop
	/* Button debounce */
	_delay_ms(BUTTON_BOUNCE_MS);
	
	if (button_is_pressed(button)) {
 46e:	ce 01       	movw	r24, r28
 470:	c4 df       	rcall	.-120    	; 0x3fa <button_is_pressed>
 472:	89 2b       	or	r24, r25
 474:	39 f0       	breq	.+14     	; 0x484 <button_call_handler+0x26>
		(*button_pressed_handler)(button);
 476:	e0 91 82 3e 	lds	r30, 0x3E82	; 0x803e82 <button_pressed_handler>
 47a:	f0 91 83 3e 	lds	r31, 0x3E83	; 0x803e83 <button_pressed_handler+0x1>
 47e:	ce 01       	movw	r24, r28
 480:	09 95       	icall
 482:	06 c0       	rjmp	.+12     	; 0x490 <button_call_handler+0x32>
	} else {
		(*button_released_handler)(button);
 484:	e0 91 80 3e 	lds	r30, 0x3E80	; 0x803e80 <button_released_handler>
 488:	f0 91 81 3e 	lds	r31, 0x3E81	; 0x803e81 <button_released_handler+0x1>
 48c:	ce 01       	movw	r24, r28
 48e:	09 95       	icall
	}
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <__vector_3>:

/*
 * Interrupt service routine for PORTA
 */
ISR(PORTA_PORT_vect)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_GREEN_PIN) {
 4b8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 4bc:	80 ff       	sbrs	r24, 0
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__vector_3+0x30>
		button_call_handler(BUTTON_GREEN);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	cc df       	rcall	.-104    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_ORANGE_PIN) {
 4c6:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 4ca:	82 ff       	sbrs	r24, 2
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <__vector_3+0x3e>
		button_call_handler(BUTTON_ORANGE);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	c5 df       	rcall	.-118    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_YELLOW_PIN) {
 4d4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 4d8:	81 ff       	sbrs	r24, 1
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__vector_3+0x4c>
		button_call_handler(BUTTON_YELLOW);
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	be df       	rcall	.-132    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTA
	if (PORTA.INTFLAGS & BUTTON_RED_PIN) {
 4e2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
 4e6:	83 ff       	sbrs	r24, 3
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__vector_3+0x5a>
		button_call_handler(BUTTON_RED);
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	b7 df       	rcall	.-146    	; 0x45e <button_call_handler>
	}
	#endif
	
	/* Clear interrupt flag, so the next one can occur */
	PORTA.INTFLAGS = 0xff;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_4>:

/*
 * Interrupt service routine for PORTB 
 */
ISR(PORTB_PORT_vect)
{
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_GREEN_PIN) {
 53a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 53e:	80 ff       	sbrs	r24, 0
 540:	03 c0       	rjmp	.+6      	; 0x548 <__vector_4+0x30>
		button_call_handler(BUTTON_GREEN);
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	8b df       	rcall	.-234    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_ORANGE_PIN) {
 548:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 54c:	82 ff       	sbrs	r24, 2
 54e:	03 c0       	rjmp	.+6      	; 0x556 <__vector_4+0x3e>
		button_call_handler(BUTTON_ORANGE);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	84 df       	rcall	.-248    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_YELLOW_PIN) {
 556:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 55a:	81 ff       	sbrs	r24, 1
 55c:	03 c0       	rjmp	.+6      	; 0x564 <__vector_4+0x4c>
		button_call_handler(BUTTON_YELLOW);
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	7d df       	rcall	.-262    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTB
	if (PORTB.INTFLAGS & BUTTON_RED_PIN) {
 564:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
 568:	83 ff       	sbrs	r24, 3
 56a:	03 c0       	rjmp	.+6      	; 0x572 <__vector_4+0x5a>
		button_call_handler(BUTTON_RED);
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	76 df       	rcall	.-276    	; 0x45e <button_call_handler>
	}
	#endif	
	
	/* Clear interrupt flag, so the next one can occur */
	PORTB.INTFLAGS = 0xff;
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
}
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <__vector_5>:

/*
 * Interrupt service routine for PORTC
 */
ISR(PORTC_PORT_vect)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
	#if BUTTON_GREEN_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_GREEN_PIN) {
 5bc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 5c0:	80 ff       	sbrs	r24, 0
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <__vector_5+0x30>
		button_call_handler(BUTTON_GREEN);
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	4a df       	rcall	.-364    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_ORANGE_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_ORANGE_PIN) {
 5ca:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 5ce:	82 ff       	sbrs	r24, 2
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <__vector_5+0x3e>
		button_call_handler(BUTTON_ORANGE);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	43 df       	rcall	.-378    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_YELLOW_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_YELLOW_PIN) {
 5d8:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 5dc:	81 ff       	sbrs	r24, 1
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <__vector_5+0x4c>
		button_call_handler(BUTTON_YELLOW);
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	3c df       	rcall	.-392    	; 0x45e <button_call_handler>
	}
	#endif
	#if BUTTON_RED_INT_PORT == INT_PORTC
	if (PORTC.INTFLAGS & BUTTON_RED_PIN) {
 5e6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 5ea:	83 ff       	sbrs	r24, 3
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <__vector_5+0x5a>
		button_call_handler(BUTTON_RED);
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	35 df       	rcall	.-406    	; 0x45e <button_call_handler>
	}
	#endif

	/* Clear interrupt flag, so the next one can occur */
	PORTC.INTFLAGS = 0xff;
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x700449>
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <eeprom_write>:
 */
void eeprom_write(uint16_t addr, uint8_t data)
{
	uint16_t *addr_ptr = (uint16_t *) addr;
	
	*addr_ptr = data;
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	fc 01       	movw	r30, r24
 620:	60 83       	st	Z, r22
 622:	71 83       	std	Z+1, r23	; 0x01
	NVMCTRL.ADDR = addr;
 624:	e0 e0       	ldi	r30, 0x00	; 0
 626:	f0 e1       	ldi	r31, 0x10	; 16
 628:	80 87       	std	Z+8, r24	; 0x08
 62a:	91 87       	std	Z+9, r25	; 0x09
	
	CPU_CCP = CCP_SPM_gc;
 62c:	8d e9       	ldi	r24, 0x9D	; 157
 62e:	84 bf       	out	0x34, r24	; 52
	NVMCTRL.CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;	
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	80 83       	st	Z, r24
 634:	08 95       	ret

00000636 <eeprom_get_next_seed>:

/*
 * Read seed from EEPROM, increment, return and store it back
 */
uint16_t eeprom_get_next_seed()
{
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
	uint16_t seed = (eeprom_read(EEPROM_ADDR_HIGH) << 8) | eeprom_read(EEPROM_ADDR_LOW);
 63a:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x701401>
 63e:	d8 2f       	mov	r29, r24
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	c8 2f       	mov	r28, r24
 644:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x701400>
 648:	c8 2b       	or	r28, r24
	
	seed++;
 64a:	21 96       	adiw	r28, 0x01	; 1
	
	eeprom_write(EEPROM_ADDR_HIGH, seed >> 8);
 64c:	6d 2f       	mov	r22, r29
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	94 e1       	ldi	r25, 0x14	; 20
 652:	e4 df       	rcall	.-56     	; 0x61c <eeprom_write>
	eeprom_write(EEPROM_ADDR_LOW, seed & 0xFF);
 654:	6c 2f       	mov	r22, r28
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	94 e1       	ldi	r25, 0x14	; 20
 65a:	e0 df       	rcall	.-64     	; 0x61c <eeprom_write>
	
	return seed;
}
 65c:	ce 01       	movw	r24, r28
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <led_init>:
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
 664:	e0 e0       	ldi	r30, 0x00	; 0
 666:	f4 e0       	ldi	r31, 0x04	; 4
 668:	30 e4       	ldi	r19, 0x40	; 64
 66a:	31 83       	std	Z+1, r19	; 0x01
 66c:	20 e8       	ldi	r18, 0x80	; 128
 66e:	21 83       	std	Z+1, r18	; 0x01
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	81 83       	std	Z+1, r24	; 0x01
 674:	94 e0       	ldi	r25, 0x04	; 4
 676:	91 83       	std	Z+1, r25	; 0x01
 678:	36 83       	std	Z+6, r19	; 0x06
 67a:	26 83       	std	Z+6, r18	; 0x06
 67c:	86 83       	std	Z+6, r24	; 0x06
 67e:	96 83       	std	Z+6, r25	; 0x06
 680:	38 e0       	ldi	r19, 0x08	; 8
 682:	31 83       	std	Z+1, r19	; 0x01
 684:	20 e1       	ldi	r18, 0x10	; 16
 686:	21 83       	std	Z+1, r18	; 0x01
 688:	a0 e2       	ldi	r26, 0x20	; 32
 68a:	b4 e0       	ldi	r27, 0x04	; 4
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	11 96       	adiw	r26, 0x01	; 1
 690:	9c 93       	st	X, r25
 692:	11 97       	sbiw	r26, 0x01	; 1
 694:	11 96       	adiw	r26, 0x01	; 1
 696:	8c 93       	st	X, r24
 698:	11 97       	sbiw	r26, 0x01	; 1
 69a:	36 83       	std	Z+6, r19	; 0x06
 69c:	26 83       	std	Z+6, r18	; 0x06
 69e:	16 96       	adiw	r26, 0x06	; 6
 6a0:	9c 93       	st	X, r25
 6a2:	16 97       	sbiw	r26, 0x06	; 6
 6a4:	16 96       	adiw	r26, 0x06	; 6
 6a6:	8c 93       	st	X, r24
 6a8:	08 95       	ret

000006aa <led_counter_set>:
/*
 * Set counter LEDs to number in binary (0-15)
 */
void led_counter_set(uint8_t number)
{
	if (number & (1 << 0)) {
 6aa:	80 ff       	sbrs	r24, 0
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <led_counter_set+0xc>
 */
void led_counter_turn_on(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
 6ae:	90 e4       	ldi	r25, 0x40	; 64
 6b0:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <led_counter_set+0x12>
 */
void led_counter_turn_off(int counter)
{
	switch (counter) {
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
 6b6:	90 e4       	ldi	r25, 0x40	; 64
 6b8:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_1);
	} else {
		led_counter_turn_off(COUNTER_1);
	}

	if (number & (1 << 1)) {
 6bc:	81 ff       	sbrs	r24, 1
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <led_counter_set+0x1e>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTSET = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
 6c0:	90 e8       	ldi	r25, 0x80	; 128
 6c2:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 6c6:	03 c0       	rjmp	.+6      	; 0x6ce <led_counter_set+0x24>
		case COUNTER_1: {
			COUNTER_1_PORT.OUTCLR = COUNTER_1_PIN;
			break;
		}
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
 6c8:	90 e8       	ldi	r25, 0x80	; 128
 6ca:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_2);
	} else {
		led_counter_turn_off(COUNTER_2);
	}

	if (number & (1 << 2)) {
 6ce:	82 ff       	sbrs	r24, 2
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <led_counter_set+0x30>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTSET = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
 6d2:	92 e0       	ldi	r25, 0x02	; 2
 6d4:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <led_counter_set+0x36>
		case COUNTER_2: {
			COUNTER_2_PORT.OUTCLR = COUNTER_2_PIN;
			break;
		}
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
 6da:	92 e0       	ldi	r25, 0x02	; 2
 6dc:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
		led_counter_turn_on(COUNTER_4);
	} else {
		led_counter_turn_off(COUNTER_4);
	}

	if (number & (1 << 3)) {
 6e0:	83 ff       	sbrs	r24, 3
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <led_counter_set+0x42>
		case COUNTER_4: {
			COUNTER_4_PORT.OUTSET = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTSET = COUNTER_8_PIN;
 6e4:	84 e0       	ldi	r24, 0x04	; 4
 6e6:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 6ea:	08 95       	ret
		case COUNTER_4: {
			COUNTER_4_PORT.OUTCLR = COUNTER_4_PIN;
			break;				
		}
		case COUNTER_8: {
			COUNTER_8_PORT.OUTCLR = COUNTER_8_PIN;
 6ec:	84 e0       	ldi	r24, 0x04	; 4
 6ee:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 6f2:	08 95       	ret

000006f4 <led_blinker_turn_on>:
/*
 * Turn the specific 'blinker' LED on
 */
void led_blinker_turn_on(int blinker)
{
	switch (blinker) {
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	91 05       	cpc	r25, r1
 6f8:	71 f0       	breq	.+28     	; 0x716 <led_blinker_turn_on+0x22>
 6fa:	1c f4       	brge	.+6      	; 0x702 <led_blinker_turn_on+0xe>
 6fc:	89 2b       	or	r24, r25
 6fe:	39 f0       	breq	.+14     	; 0x70e <led_blinker_turn_on+0x1a>
 700:	08 95       	ret
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	91 05       	cpc	r25, r1
 706:	59 f0       	breq	.+22     	; 0x71e <led_blinker_turn_on+0x2a>
 708:	03 97       	sbiw	r24, 0x03	; 3
 70a:	69 f0       	breq	.+26     	; 0x726 <led_blinker_turn_on+0x32>
 70c:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTSET = BLINKER_GREEN_PIN;
 70e:	88 e0       	ldi	r24, 0x08	; 8
 710:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
 714:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTSET = BLINKER_ORANGE_PIN;
 716:	80 e1       	ldi	r24, 0x10	; 16
 718:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
			break;
 71c:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTSET = BLINKER_YELLOW_PIN;
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
			break;				
 724:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTSET = BLINKER_RED_PIN;
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
 72c:	08 95       	ret

0000072e <led_blinker_turn_off>:
/*
 * Turn the specific 'blinker' LED off
 */
void led_blinker_turn_off(int blinker)
{
	switch (blinker) {
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	91 05       	cpc	r25, r1
 732:	71 f0       	breq	.+28     	; 0x750 <led_blinker_turn_off+0x22>
 734:	1c f4       	brge	.+6      	; 0x73c <led_blinker_turn_off+0xe>
 736:	89 2b       	or	r24, r25
 738:	39 f0       	breq	.+14     	; 0x748 <led_blinker_turn_off+0x1a>
 73a:	08 95       	ret
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	91 05       	cpc	r25, r1
 740:	59 f0       	breq	.+22     	; 0x758 <led_blinker_turn_off+0x2a>
 742:	03 97       	sbiw	r24, 0x03	; 3
 744:	69 f0       	breq	.+26     	; 0x760 <led_blinker_turn_off+0x32>
 746:	08 95       	ret
		case BLINKER_GREEN: {
			BLINKER_GREEN_PORT.OUTCLR = BLINKER_GREEN_PIN;
 748:	88 e0       	ldi	r24, 0x08	; 8
 74a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
 74e:	08 95       	ret
		}
		case BLINKER_ORANGE: {
			BLINKER_ORANGE_PORT.OUTCLR = BLINKER_ORANGE_PIN;
 750:	80 e1       	ldi	r24, 0x10	; 16
 752:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
			break;
 756:	08 95       	ret
		}
		case BLINKER_YELLOW: {
			BLINKER_YELLOW_PORT.OUTCLR = BLINKER_YELLOW_PIN;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
			break;
 75e:	08 95       	ret
		}
		case BLINKER_RED: {
			BLINKER_RED_PORT.OUTCLR = BLINKER_RED_PIN;
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
 766:	08 95       	ret

00000768 <speaker_init>:
/*
 * Initialize output pins for counters and blinkers
 */
void speaker_init()
{
	SPEAKER_PORT.DIRSET = SPEAKER_PIN;
 768:	e0 e0       	ldi	r30, 0x00	; 0
 76a:	f4 e0       	ldi	r31, 0x04	; 4
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	81 83       	std	Z+1, r24	; 0x01
	SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
 770:	86 83       	std	Z+6, r24	; 0x06
 772:	08 95       	ret

00000774 <speaker_generate_tone>:
/*
 * Play frequency at specified duration in milliseconds
 * This function is I/O blocking
 */
void speaker_generate_tone(long frequency, long duration)
{
 774:	4f 92       	push	r4
 776:	5f 92       	push	r5
 778:	6f 92       	push	r6
 77a:	7f 92       	push	r7
 77c:	8f 92       	push	r8
 77e:	9f 92       	push	r9
 780:	af 92       	push	r10
 782:	bf 92       	push	r11
 784:	cf 92       	push	r12
 786:	df 92       	push	r13
 788:	ef 92       	push	r14
 78a:	ff 92       	push	r15
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	6b 01       	movw	r12, r22
 796:	7c 01       	movw	r14, r24
 798:	29 01       	movw	r4, r18
 79a:	3a 01       	movw	r6, r20
	long period_us = 1000000L / frequency;
 79c:	60 e4       	ldi	r22, 0x40	; 64
 79e:	72 e4       	ldi	r23, 0x42	; 66
 7a0:	8f e0       	ldi	r24, 0x0F	; 15
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	a7 01       	movw	r20, r14
 7a6:	96 01       	movw	r18, r12
 7a8:	6f d0       	rcall	.+222    	; 0x888 <__divmodsi4>
 7aa:	49 01       	movw	r8, r18
 7ac:	5a 01       	movw	r10, r20
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
 7ae:	68 e0       	ldi	r22, 0x08	; 8
 7b0:	76 e4       	ldi	r23, 0x46	; 70
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	a7 01       	movw	r20, r14
 7b8:	96 01       	movw	r18, r12
 7ba:	66 d0       	rcall	.+204    	; 0x888 <__divmodsi4>
 7bc:	69 01       	movw	r12, r18
 7be:	7a 01       	movw	r14, r20
	
	while(elapsed_us < (duration * 1000L)) {
 7c0:	a8 ee       	ldi	r26, 0xE8	; 232
 7c2:	b3 e0       	ldi	r27, 0x03	; 3
 7c4:	a3 01       	movw	r20, r6
 7c6:	92 01       	movw	r18, r4
 7c8:	7b d0       	rcall	.+246    	; 0x8c0 <__muluhisi3>
 7ca:	8b 01       	movw	r16, r22
 7cc:	9c 01       	movw	r18, r24
 7ce:	16 16       	cp	r1, r22
 7d0:	17 06       	cpc	r1, r23
 7d2:	18 06       	cpc	r1, r24
 7d4:	19 06       	cpc	r1, r25
 7d6:	a4 f5       	brge	.+104    	; 0x840 <speaker_generate_tone+0xcc>
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	ba 01       	movw	r22, r20
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
 7de:	e0 e0       	ldi	r30, 0x00	; 0
 7e0:	f4 e0       	ldi	r31, 0x04	; 4
 7e2:	c0 e2       	ldi	r28, 0x20	; 32
 7e4:	dc 2f       	mov	r29, r28
 7e6:	d5 83       	std	Z+5, r29	; 0x05
		
		for (long i = 0L; i < half_period_wait; i++)
 7e8:	1c 14       	cp	r1, r12
 7ea:	1d 04       	cpc	r1, r13
 7ec:	1e 04       	cpc	r1, r14
 7ee:	1f 04       	cpc	r1, r15
 7f0:	04 f5       	brge	.+64     	; 0x832 <speaker_generate_tone+0xbe>
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	dc 01       	movw	r26, r24
		{
			_NOP();
 7f8:	00 00       	nop
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
		SPEAKER_PORT.OUTSET = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	a1 1d       	adc	r26, r1
 7fe:	b1 1d       	adc	r27, r1
 800:	c8 16       	cp	r12, r24
 802:	d9 06       	cpc	r13, r25
 804:	ea 06       	cpc	r14, r26
 806:	fb 06       	cpc	r15, r27
 808:	b9 f7       	brne	.-18     	; 0x7f8 <speaker_generate_tone+0x84>
 80a:	15 c0       	rjmp	.+42     	; 0x836 <speaker_generate_tone+0xc2>
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
 80c:	00 00       	nop
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
		
		for (long i = 0L; i < half_period_wait; i++)
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	a1 1d       	adc	r26, r1
 812:	b1 1d       	adc	r27, r1
 814:	c8 16       	cp	r12, r24
 816:	d9 06       	cpc	r13, r25
 818:	ea 06       	cpc	r14, r26
 81a:	fb 06       	cpc	r15, r27
 81c:	b9 f7       	brne	.-18     	; 0x80c <speaker_generate_tone+0x98>
		{
			_NOP();
		}
		
		elapsed_us += period_us;
 81e:	48 0d       	add	r20, r8
 820:	59 1d       	adc	r21, r9
 822:	6a 1d       	adc	r22, r10
 824:	7b 1d       	adc	r23, r11
{
	long period_us = 1000000L / frequency;
	long elapsed_us = 0L;
	long half_period_wait = 149000L / frequency;
	
	while(elapsed_us < (duration * 1000L)) {
 826:	40 17       	cp	r20, r16
 828:	51 07       	cpc	r21, r17
 82a:	62 07       	cpc	r22, r18
 82c:	73 07       	cpc	r23, r19
 82e:	dc f2       	brlt	.-74     	; 0x7e6 <speaker_generate_tone+0x72>
 830:	07 c0       	rjmp	.+14     	; 0x840 <speaker_generate_tone+0xcc>
		for (long i = 0L; i < half_period_wait; i++)
		{
			_NOP();
		}
		
		SPEAKER_PORT.OUTCLR = SPEAKER_PIN;
 832:	c6 83       	std	Z+6, r28	; 0x06
 834:	f4 cf       	rjmp	.-24     	; 0x81e <speaker_generate_tone+0xaa>
 836:	c6 83       	std	Z+6, r28	; 0x06
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	dc 01       	movw	r26, r24
 83e:	e6 cf       	rjmp	.-52     	; 0x80c <speaker_generate_tone+0x98>
		}
		
		elapsed_us += period_us;
	}
	
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
 84c:	df 90       	pop	r13
 84e:	cf 90       	pop	r12
 850:	bf 90       	pop	r11
 852:	af 90       	pop	r10
 854:	9f 90       	pop	r9
 856:	8f 90       	pop	r8
 858:	7f 90       	pop	r7
 85a:	6f 90       	pop	r6
 85c:	5f 90       	pop	r5
 85e:	4f 90       	pop	r4
 860:	08 95       	ret

00000862 <__divmodhi4>:
 862:	97 fb       	bst	r25, 7
 864:	07 2e       	mov	r0, r23
 866:	16 f4       	brtc	.+4      	; 0x86c <__divmodhi4+0xa>
 868:	00 94       	com	r0
 86a:	06 d0       	rcall	.+12     	; 0x878 <__divmodhi4_neg1>
 86c:	77 fd       	sbrc	r23, 7
 86e:	08 d0       	rcall	.+16     	; 0x880 <__divmodhi4_neg2>
 870:	31 d0       	rcall	.+98     	; 0x8d4 <__udivmodhi4>
 872:	07 fc       	sbrc	r0, 7
 874:	05 d0       	rcall	.+10     	; 0x880 <__divmodhi4_neg2>
 876:	3e f4       	brtc	.+14     	; 0x886 <__divmodhi4_exit>

00000878 <__divmodhi4_neg1>:
 878:	90 95       	com	r25
 87a:	81 95       	neg	r24
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__divmodhi4_neg2>:
 880:	70 95       	com	r23
 882:	61 95       	neg	r22
 884:	7f 4f       	sbci	r23, 0xFF	; 255

00000886 <__divmodhi4_exit>:
 886:	08 95       	ret

00000888 <__divmodsi4>:
 888:	05 2e       	mov	r0, r21
 88a:	97 fb       	bst	r25, 7
 88c:	16 f4       	brtc	.+4      	; 0x892 <__divmodsi4+0xa>
 88e:	00 94       	com	r0
 890:	0f d0       	rcall	.+30     	; 0x8b0 <__negsi2>
 892:	57 fd       	sbrc	r21, 7
 894:	05 d0       	rcall	.+10     	; 0x8a0 <__divmodsi4_neg2>
 896:	32 d0       	rcall	.+100    	; 0x8fc <__udivmodsi4>
 898:	07 fc       	sbrc	r0, 7
 89a:	02 d0       	rcall	.+4      	; 0x8a0 <__divmodsi4_neg2>
 89c:	46 f4       	brtc	.+16     	; 0x8ae <__divmodsi4_exit>
 89e:	08 c0       	rjmp	.+16     	; 0x8b0 <__negsi2>

000008a0 <__divmodsi4_neg2>:
 8a0:	50 95       	com	r21
 8a2:	40 95       	com	r20
 8a4:	30 95       	com	r19
 8a6:	21 95       	neg	r18
 8a8:	3f 4f       	sbci	r19, 0xFF	; 255
 8aa:	4f 4f       	sbci	r20, 0xFF	; 255
 8ac:	5f 4f       	sbci	r21, 0xFF	; 255

000008ae <__divmodsi4_exit>:
 8ae:	08 95       	ret

000008b0 <__negsi2>:
 8b0:	90 95       	com	r25
 8b2:	80 95       	com	r24
 8b4:	70 95       	com	r23
 8b6:	61 95       	neg	r22
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__muluhisi3>:
 8c0:	3f d0       	rcall	.+126    	; 0x940 <__umulhisi3>
 8c2:	a5 9f       	mul	r26, r21
 8c4:	90 0d       	add	r25, r0
 8c6:	b4 9f       	mul	r27, r20
 8c8:	90 0d       	add	r25, r0
 8ca:	a4 9f       	mul	r26, r20
 8cc:	80 0d       	add	r24, r0
 8ce:	91 1d       	adc	r25, r1
 8d0:	11 24       	eor	r1, r1
 8d2:	08 95       	ret

000008d4 <__udivmodhi4>:
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	51 e1       	ldi	r21, 0x11	; 17
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <__udivmodhi4_ep>

000008dc <__udivmodhi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	a6 17       	cp	r26, r22
 8e2:	b7 07       	cpc	r27, r23
 8e4:	10 f0       	brcs	.+4      	; 0x8ea <__udivmodhi4_ep>
 8e6:	a6 1b       	sub	r26, r22
 8e8:	b7 0b       	sbc	r27, r23

000008ea <__udivmodhi4_ep>:
 8ea:	88 1f       	adc	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	5a 95       	dec	r21
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__udivmodhi4_loop>
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	bc 01       	movw	r22, r24
 8f8:	cd 01       	movw	r24, r26
 8fa:	08 95       	ret

000008fc <__udivmodsi4>:
 8fc:	a1 e2       	ldi	r26, 0x21	; 33
 8fe:	1a 2e       	mov	r1, r26
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	fd 01       	movw	r30, r26
 906:	0d c0       	rjmp	.+26     	; 0x922 <__udivmodsi4_ep>

00000908 <__udivmodsi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	ee 1f       	adc	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	a2 17       	cp	r26, r18
 912:	b3 07       	cpc	r27, r19
 914:	e4 07       	cpc	r30, r20
 916:	f5 07       	cpc	r31, r21
 918:	20 f0       	brcs	.+8      	; 0x922 <__udivmodsi4_ep>
 91a:	a2 1b       	sub	r26, r18
 91c:	b3 0b       	sbc	r27, r19
 91e:	e4 0b       	sbc	r30, r20
 920:	f5 0b       	sbc	r31, r21

00000922 <__udivmodsi4_ep>:
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a 94       	dec	r1
 92c:	69 f7       	brne	.-38     	; 0x908 <__udivmodsi4_loop>
 92e:	60 95       	com	r22
 930:	70 95       	com	r23
 932:	80 95       	com	r24
 934:	90 95       	com	r25
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	bd 01       	movw	r22, r26
 93c:	cf 01       	movw	r24, r30
 93e:	08 95       	ret

00000940 <__umulhisi3>:
 940:	a2 9f       	mul	r26, r18
 942:	b0 01       	movw	r22, r0
 944:	b3 9f       	mul	r27, r19
 946:	c0 01       	movw	r24, r0
 948:	a3 9f       	mul	r26, r19
 94a:	01 d0       	rcall	.+2      	; 0x94e <__umulhisi3+0xe>
 94c:	b2 9f       	mul	r27, r18
 94e:	70 0d       	add	r23, r0
 950:	81 1d       	adc	r24, r1
 952:	11 24       	eor	r1, r1
 954:	91 1d       	adc	r25, r1
 956:	08 95       	ret

00000958 <malloc>:
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	82 30       	cpi	r24, 0x02	; 2
 962:	91 05       	cpc	r25, r1
 964:	10 f4       	brcc	.+4      	; 0x96a <malloc+0x12>
 966:	82 e0       	ldi	r24, 0x02	; 2
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	e0 91 86 3e 	lds	r30, 0x3E86	; 0x803e86 <__flp>
 96e:	f0 91 87 3e 	lds	r31, 0x3E87	; 0x803e87 <__flp+0x1>
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	a0 e0       	ldi	r26, 0x00	; 0
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	30 97       	sbiw	r30, 0x00	; 0
 97c:	19 f1       	breq	.+70     	; 0x9c4 <malloc+0x6c>
 97e:	40 81       	ld	r20, Z
 980:	51 81       	ldd	r21, Z+1	; 0x01
 982:	02 81       	ldd	r16, Z+2	; 0x02
 984:	13 81       	ldd	r17, Z+3	; 0x03
 986:	48 17       	cp	r20, r24
 988:	59 07       	cpc	r21, r25
 98a:	c8 f0       	brcs	.+50     	; 0x9be <malloc+0x66>
 98c:	84 17       	cp	r24, r20
 98e:	95 07       	cpc	r25, r21
 990:	69 f4       	brne	.+26     	; 0x9ac <malloc+0x54>
 992:	10 97       	sbiw	r26, 0x00	; 0
 994:	31 f0       	breq	.+12     	; 0x9a2 <malloc+0x4a>
 996:	12 96       	adiw	r26, 0x02	; 2
 998:	0c 93       	st	X, r16
 99a:	12 97       	sbiw	r26, 0x02	; 2
 99c:	13 96       	adiw	r26, 0x03	; 3
 99e:	1c 93       	st	X, r17
 9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <malloc+0x98>
 9a2:	00 93 86 3e 	sts	0x3E86, r16	; 0x803e86 <__flp>
 9a6:	10 93 87 3e 	sts	0x3E87, r17	; 0x803e87 <__flp+0x1>
 9aa:	22 c0       	rjmp	.+68     	; 0x9f0 <malloc+0x98>
 9ac:	21 15       	cp	r18, r1
 9ae:	31 05       	cpc	r19, r1
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <malloc+0x60>
 9b2:	42 17       	cp	r20, r18
 9b4:	53 07       	cpc	r21, r19
 9b6:	18 f4       	brcc	.+6      	; 0x9be <malloc+0x66>
 9b8:	9a 01       	movw	r18, r20
 9ba:	bd 01       	movw	r22, r26
 9bc:	ef 01       	movw	r28, r30
 9be:	df 01       	movw	r26, r30
 9c0:	f8 01       	movw	r30, r16
 9c2:	db cf       	rjmp	.-74     	; 0x97a <malloc+0x22>
 9c4:	21 15       	cp	r18, r1
 9c6:	31 05       	cpc	r19, r1
 9c8:	f9 f0       	breq	.+62     	; 0xa08 <malloc+0xb0>
 9ca:	28 1b       	sub	r18, r24
 9cc:	39 0b       	sbc	r19, r25
 9ce:	24 30       	cpi	r18, 0x04	; 4
 9d0:	31 05       	cpc	r19, r1
 9d2:	80 f4       	brcc	.+32     	; 0x9f4 <malloc+0x9c>
 9d4:	8a 81       	ldd	r24, Y+2	; 0x02
 9d6:	9b 81       	ldd	r25, Y+3	; 0x03
 9d8:	61 15       	cp	r22, r1
 9da:	71 05       	cpc	r23, r1
 9dc:	21 f0       	breq	.+8      	; 0x9e6 <malloc+0x8e>
 9de:	fb 01       	movw	r30, r22
 9e0:	82 83       	std	Z+2, r24	; 0x02
 9e2:	93 83       	std	Z+3, r25	; 0x03
 9e4:	04 c0       	rjmp	.+8      	; 0x9ee <malloc+0x96>
 9e6:	80 93 86 3e 	sts	0x3E86, r24	; 0x803e86 <__flp>
 9ea:	90 93 87 3e 	sts	0x3E87, r25	; 0x803e87 <__flp+0x1>
 9ee:	fe 01       	movw	r30, r28
 9f0:	32 96       	adiw	r30, 0x02	; 2
 9f2:	44 c0       	rjmp	.+136    	; 0xa7c <malloc+0x124>
 9f4:	fe 01       	movw	r30, r28
 9f6:	e2 0f       	add	r30, r18
 9f8:	f3 1f       	adc	r31, r19
 9fa:	81 93       	st	Z+, r24
 9fc:	91 93       	st	Z+, r25
 9fe:	22 50       	subi	r18, 0x02	; 2
 a00:	31 09       	sbc	r19, r1
 a02:	28 83       	st	Y, r18
 a04:	39 83       	std	Y+1, r19	; 0x01
 a06:	3a c0       	rjmp	.+116    	; 0xa7c <malloc+0x124>
 a08:	20 91 84 3e 	lds	r18, 0x3E84	; 0x803e84 <__brkval>
 a0c:	30 91 85 3e 	lds	r19, 0x3E85	; 0x803e85 <__brkval+0x1>
 a10:	23 2b       	or	r18, r19
 a12:	41 f4       	brne	.+16     	; 0xa24 <malloc+0xcc>
 a14:	20 91 02 3e 	lds	r18, 0x3E02	; 0x803e02 <__malloc_heap_start>
 a18:	30 91 03 3e 	lds	r19, 0x3E03	; 0x803e03 <__malloc_heap_start+0x1>
 a1c:	20 93 84 3e 	sts	0x3E84, r18	; 0x803e84 <__brkval>
 a20:	30 93 85 3e 	sts	0x3E85, r19	; 0x803e85 <__brkval+0x1>
 a24:	20 91 00 3e 	lds	r18, 0x3E00	; 0x803e00 <__data_start>
 a28:	30 91 01 3e 	lds	r19, 0x3E01	; 0x803e01 <__data_start+0x1>
 a2c:	21 15       	cp	r18, r1
 a2e:	31 05       	cpc	r19, r1
 a30:	41 f4       	brne	.+16     	; 0xa42 <malloc+0xea>
 a32:	2d b7       	in	r18, 0x3d	; 61
 a34:	3e b7       	in	r19, 0x3e	; 62
 a36:	40 91 04 3e 	lds	r20, 0x3E04	; 0x803e04 <__malloc_margin>
 a3a:	50 91 05 3e 	lds	r21, 0x3E05	; 0x803e05 <__malloc_margin+0x1>
 a3e:	24 1b       	sub	r18, r20
 a40:	35 0b       	sbc	r19, r21
 a42:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <__brkval>
 a46:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <__brkval+0x1>
 a4a:	e2 17       	cp	r30, r18
 a4c:	f3 07       	cpc	r31, r19
 a4e:	a0 f4       	brcc	.+40     	; 0xa78 <malloc+0x120>
 a50:	2e 1b       	sub	r18, r30
 a52:	3f 0b       	sbc	r19, r31
 a54:	28 17       	cp	r18, r24
 a56:	39 07       	cpc	r19, r25
 a58:	78 f0       	brcs	.+30     	; 0xa78 <malloc+0x120>
 a5a:	ac 01       	movw	r20, r24
 a5c:	4e 5f       	subi	r20, 0xFE	; 254
 a5e:	5f 4f       	sbci	r21, 0xFF	; 255
 a60:	24 17       	cp	r18, r20
 a62:	35 07       	cpc	r19, r21
 a64:	48 f0       	brcs	.+18     	; 0xa78 <malloc+0x120>
 a66:	4e 0f       	add	r20, r30
 a68:	5f 1f       	adc	r21, r31
 a6a:	40 93 84 3e 	sts	0x3E84, r20	; 0x803e84 <__brkval>
 a6e:	50 93 85 3e 	sts	0x3E85, r21	; 0x803e85 <__brkval+0x1>
 a72:	81 93       	st	Z+, r24
 a74:	91 93       	st	Z+, r25
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <malloc+0x124>
 a78:	e0 e0       	ldi	r30, 0x00	; 0
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	cf 01       	movw	r24, r30
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	1f 91       	pop	r17
 a84:	0f 91       	pop	r16
 a86:	08 95       	ret

00000a88 <free>:
 a88:	cf 93       	push	r28
 a8a:	df 93       	push	r29
 a8c:	00 97       	sbiw	r24, 0x00	; 0
 a8e:	09 f4       	brne	.+2      	; 0xa92 <free+0xa>
 a90:	81 c0       	rjmp	.+258    	; 0xb94 <free+0x10c>
 a92:	fc 01       	movw	r30, r24
 a94:	32 97       	sbiw	r30, 0x02	; 2
 a96:	12 82       	std	Z+2, r1	; 0x02
 a98:	13 82       	std	Z+3, r1	; 0x03
 a9a:	a0 91 86 3e 	lds	r26, 0x3E86	; 0x803e86 <__flp>
 a9e:	b0 91 87 3e 	lds	r27, 0x3E87	; 0x803e87 <__flp+0x1>
 aa2:	10 97       	sbiw	r26, 0x00	; 0
 aa4:	81 f4       	brne	.+32     	; 0xac6 <free+0x3e>
 aa6:	20 81       	ld	r18, Z
 aa8:	31 81       	ldd	r19, Z+1	; 0x01
 aaa:	82 0f       	add	r24, r18
 aac:	93 1f       	adc	r25, r19
 aae:	20 91 84 3e 	lds	r18, 0x3E84	; 0x803e84 <__brkval>
 ab2:	30 91 85 3e 	lds	r19, 0x3E85	; 0x803e85 <__brkval+0x1>
 ab6:	28 17       	cp	r18, r24
 ab8:	39 07       	cpc	r19, r25
 aba:	51 f5       	brne	.+84     	; 0xb10 <free+0x88>
 abc:	e0 93 84 3e 	sts	0x3E84, r30	; 0x803e84 <__brkval>
 ac0:	f0 93 85 3e 	sts	0x3E85, r31	; 0x803e85 <__brkval+0x1>
 ac4:	67 c0       	rjmp	.+206    	; 0xb94 <free+0x10c>
 ac6:	ed 01       	movw	r28, r26
 ac8:	20 e0       	ldi	r18, 0x00	; 0
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	ce 17       	cp	r28, r30
 ace:	df 07       	cpc	r29, r31
 ad0:	40 f4       	brcc	.+16     	; 0xae2 <free+0x5a>
 ad2:	4a 81       	ldd	r20, Y+2	; 0x02
 ad4:	5b 81       	ldd	r21, Y+3	; 0x03
 ad6:	9e 01       	movw	r18, r28
 ad8:	41 15       	cp	r20, r1
 ada:	51 05       	cpc	r21, r1
 adc:	f1 f0       	breq	.+60     	; 0xb1a <free+0x92>
 ade:	ea 01       	movw	r28, r20
 ae0:	f5 cf       	rjmp	.-22     	; 0xacc <free+0x44>
 ae2:	c2 83       	std	Z+2, r28	; 0x02
 ae4:	d3 83       	std	Z+3, r29	; 0x03
 ae6:	40 81       	ld	r20, Z
 ae8:	51 81       	ldd	r21, Z+1	; 0x01
 aea:	84 0f       	add	r24, r20
 aec:	95 1f       	adc	r25, r21
 aee:	c8 17       	cp	r28, r24
 af0:	d9 07       	cpc	r29, r25
 af2:	59 f4       	brne	.+22     	; 0xb0a <free+0x82>
 af4:	88 81       	ld	r24, Y
 af6:	99 81       	ldd	r25, Y+1	; 0x01
 af8:	84 0f       	add	r24, r20
 afa:	95 1f       	adc	r25, r21
 afc:	02 96       	adiw	r24, 0x02	; 2
 afe:	80 83       	st	Z, r24
 b00:	91 83       	std	Z+1, r25	; 0x01
 b02:	8a 81       	ldd	r24, Y+2	; 0x02
 b04:	9b 81       	ldd	r25, Y+3	; 0x03
 b06:	82 83       	std	Z+2, r24	; 0x02
 b08:	93 83       	std	Z+3, r25	; 0x03
 b0a:	21 15       	cp	r18, r1
 b0c:	31 05       	cpc	r19, r1
 b0e:	29 f4       	brne	.+10     	; 0xb1a <free+0x92>
 b10:	e0 93 86 3e 	sts	0x3E86, r30	; 0x803e86 <__flp>
 b14:	f0 93 87 3e 	sts	0x3E87, r31	; 0x803e87 <__flp+0x1>
 b18:	3d c0       	rjmp	.+122    	; 0xb94 <free+0x10c>
 b1a:	e9 01       	movw	r28, r18
 b1c:	ea 83       	std	Y+2, r30	; 0x02
 b1e:	fb 83       	std	Y+3, r31	; 0x03
 b20:	49 91       	ld	r20, Y+
 b22:	59 91       	ld	r21, Y+
 b24:	c4 0f       	add	r28, r20
 b26:	d5 1f       	adc	r29, r21
 b28:	ec 17       	cp	r30, r28
 b2a:	fd 07       	cpc	r31, r29
 b2c:	61 f4       	brne	.+24     	; 0xb46 <free+0xbe>
 b2e:	80 81       	ld	r24, Z
 b30:	91 81       	ldd	r25, Z+1	; 0x01
 b32:	84 0f       	add	r24, r20
 b34:	95 1f       	adc	r25, r21
 b36:	02 96       	adiw	r24, 0x02	; 2
 b38:	e9 01       	movw	r28, r18
 b3a:	88 83       	st	Y, r24
 b3c:	99 83       	std	Y+1, r25	; 0x01
 b3e:	82 81       	ldd	r24, Z+2	; 0x02
 b40:	93 81       	ldd	r25, Z+3	; 0x03
 b42:	8a 83       	std	Y+2, r24	; 0x02
 b44:	9b 83       	std	Y+3, r25	; 0x03
 b46:	e0 e0       	ldi	r30, 0x00	; 0
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	12 96       	adiw	r26, 0x02	; 2
 b4c:	8d 91       	ld	r24, X+
 b4e:	9c 91       	ld	r25, X
 b50:	13 97       	sbiw	r26, 0x03	; 3
 b52:	00 97       	sbiw	r24, 0x00	; 0
 b54:	19 f0       	breq	.+6      	; 0xb5c <free+0xd4>
 b56:	fd 01       	movw	r30, r26
 b58:	dc 01       	movw	r26, r24
 b5a:	f7 cf       	rjmp	.-18     	; 0xb4a <free+0xc2>
 b5c:	8d 91       	ld	r24, X+
 b5e:	9c 91       	ld	r25, X
 b60:	11 97       	sbiw	r26, 0x01	; 1
 b62:	9d 01       	movw	r18, r26
 b64:	2e 5f       	subi	r18, 0xFE	; 254
 b66:	3f 4f       	sbci	r19, 0xFF	; 255
 b68:	82 0f       	add	r24, r18
 b6a:	93 1f       	adc	r25, r19
 b6c:	20 91 84 3e 	lds	r18, 0x3E84	; 0x803e84 <__brkval>
 b70:	30 91 85 3e 	lds	r19, 0x3E85	; 0x803e85 <__brkval+0x1>
 b74:	28 17       	cp	r18, r24
 b76:	39 07       	cpc	r19, r25
 b78:	69 f4       	brne	.+26     	; 0xb94 <free+0x10c>
 b7a:	30 97       	sbiw	r30, 0x00	; 0
 b7c:	29 f4       	brne	.+10     	; 0xb88 <free+0x100>
 b7e:	10 92 86 3e 	sts	0x3E86, r1	; 0x803e86 <__flp>
 b82:	10 92 87 3e 	sts	0x3E87, r1	; 0x803e87 <__flp+0x1>
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <free+0x104>
 b88:	12 82       	std	Z+2, r1	; 0x02
 b8a:	13 82       	std	Z+3, r1	; 0x03
 b8c:	a0 93 84 3e 	sts	0x3E84, r26	; 0x803e84 <__brkval>
 b90:	b0 93 85 3e 	sts	0x3E85, r27	; 0x803e85 <__brkval+0x1>
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	08 95       	ret

00000b9a <do_rand>:
 b9a:	8f 92       	push	r8
 b9c:	9f 92       	push	r9
 b9e:	af 92       	push	r10
 ba0:	bf 92       	push	r11
 ba2:	cf 92       	push	r12
 ba4:	df 92       	push	r13
 ba6:	ef 92       	push	r14
 ba8:	ff 92       	push	r15
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	ec 01       	movw	r28, r24
 bb0:	68 81       	ld	r22, Y
 bb2:	79 81       	ldd	r23, Y+1	; 0x01
 bb4:	8a 81       	ldd	r24, Y+2	; 0x02
 bb6:	9b 81       	ldd	r25, Y+3	; 0x03
 bb8:	61 15       	cp	r22, r1
 bba:	71 05       	cpc	r23, r1
 bbc:	81 05       	cpc	r24, r1
 bbe:	91 05       	cpc	r25, r1
 bc0:	21 f4       	brne	.+8      	; 0xbca <do_rand+0x30>
 bc2:	64 e2       	ldi	r22, 0x24	; 36
 bc4:	79 ed       	ldi	r23, 0xD9	; 217
 bc6:	8b e5       	ldi	r24, 0x5B	; 91
 bc8:	97 e0       	ldi	r25, 0x07	; 7
 bca:	2d e1       	ldi	r18, 0x1D	; 29
 bcc:	33 ef       	ldi	r19, 0xF3	; 243
 bce:	41 e0       	ldi	r20, 0x01	; 1
 bd0:	50 e0       	ldi	r21, 0x00	; 0
 bd2:	5a de       	rcall	.-844    	; 0x888 <__divmodsi4>
 bd4:	49 01       	movw	r8, r18
 bd6:	5a 01       	movw	r10, r20
 bd8:	9b 01       	movw	r18, r22
 bda:	ac 01       	movw	r20, r24
 bdc:	a7 ea       	ldi	r26, 0xA7	; 167
 bde:	b1 e4       	ldi	r27, 0x41	; 65
 be0:	6f de       	rcall	.-802    	; 0x8c0 <__muluhisi3>
 be2:	6b 01       	movw	r12, r22
 be4:	7c 01       	movw	r14, r24
 be6:	ac ee       	ldi	r26, 0xEC	; 236
 be8:	b4 ef       	ldi	r27, 0xF4	; 244
 bea:	a5 01       	movw	r20, r10
 bec:	94 01       	movw	r18, r8
 bee:	2e d0       	rcall	.+92     	; 0xc4c <__mulohisi3>
 bf0:	dc 01       	movw	r26, r24
 bf2:	cb 01       	movw	r24, r22
 bf4:	8c 0d       	add	r24, r12
 bf6:	9d 1d       	adc	r25, r13
 bf8:	ae 1d       	adc	r26, r14
 bfa:	bf 1d       	adc	r27, r15
 bfc:	b7 ff       	sbrs	r27, 7
 bfe:	03 c0       	rjmp	.+6      	; 0xc06 <do_rand+0x6c>
 c00:	01 97       	sbiw	r24, 0x01	; 1
 c02:	a1 09       	sbc	r26, r1
 c04:	b0 48       	sbci	r27, 0x80	; 128
 c06:	88 83       	st	Y, r24
 c08:	99 83       	std	Y+1, r25	; 0x01
 c0a:	aa 83       	std	Y+2, r26	; 0x02
 c0c:	bb 83       	std	Y+3, r27	; 0x03
 c0e:	9f 77       	andi	r25, 0x7F	; 127
 c10:	df 91       	pop	r29
 c12:	cf 91       	pop	r28
 c14:	ff 90       	pop	r15
 c16:	ef 90       	pop	r14
 c18:	df 90       	pop	r13
 c1a:	cf 90       	pop	r12
 c1c:	bf 90       	pop	r11
 c1e:	af 90       	pop	r10
 c20:	9f 90       	pop	r9
 c22:	8f 90       	pop	r8
 c24:	08 95       	ret

00000c26 <rand_r>:
 c26:	b9 df       	rcall	.-142    	; 0xb9a <do_rand>
 c28:	08 95       	ret

00000c2a <rand>:
 c2a:	86 e0       	ldi	r24, 0x06	; 6
 c2c:	9e e3       	ldi	r25, 0x3E	; 62
 c2e:	b5 df       	rcall	.-150    	; 0xb9a <do_rand>
 c30:	08 95       	ret

00000c32 <srand>:
 c32:	a0 e0       	ldi	r26, 0x00	; 0
 c34:	b0 e0       	ldi	r27, 0x00	; 0
 c36:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <next>
 c3a:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <next+0x1>
 c3e:	a0 93 08 3e 	sts	0x3E08, r26	; 0x803e08 <next+0x2>
 c42:	b0 93 09 3e 	sts	0x3E09, r27	; 0x803e09 <next+0x3>
 c46:	08 95       	ret

00000c48 <__mulshisi3>:
 c48:	b7 ff       	sbrs	r27, 7
 c4a:	3a ce       	rjmp	.-908    	; 0x8c0 <__muluhisi3>

00000c4c <__mulohisi3>:
 c4c:	39 de       	rcall	.-910    	; 0x8c0 <__muluhisi3>
 c4e:	82 1b       	sub	r24, r18
 c50:	93 0b       	sbc	r25, r19
 c52:	08 95       	ret

00000c54 <_exit>:
 c54:	f8 94       	cli

00000c56 <__stop_program>:
 c56:	ff cf       	rjmp	.-2      	; 0xc56 <__stop_program>
